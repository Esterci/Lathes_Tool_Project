
ad7606_ADCT_buf_allAD_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c64  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08005d74  08005d74  00015d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e10  08005e10  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005e10  08005e10  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e10  08005e10  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e10  08005e10  00015e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e14  08005e14  00015e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000112c  20000010  08005e28  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000113c  08005e28  0002113c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ec8  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033d0  00000000  00000000  00035f01  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001438  00000000  00000000  000392d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012b0  00000000  00000000  0003a710  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016039  00000000  00000000  0003b9c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010c33  00000000  00000000  000519f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007c8a9  00000000  00000000  0006262c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000deed5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005328  00000000  00000000  000def50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08005d5c 	.word	0x08005d5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08005d5c 	.word	0x08005d5c

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000002c 	.word	0x2000002c
 800017c:	20000080 	.word	0x20000080

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b092      	sub	sp, #72	; 0x48
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fcff 	bl	8000b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f855 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f925 	bl	80003dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000192:	f000 f8fd 	bl	8000390 <MX_DMA_Init>
  MX_SPI1_Init();
 8000196:	f000 f8c7 	bl	8000328 <MX_SPI1_Init>
  MX_RTC_Init();
 800019a:	f000 f8ab 	bl	80002f4 <MX_RTC_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of habAQ */
  osSemaphoreDef(habAQ);
 800019e:	2300      	movs	r3, #0
 80001a0:	643b      	str	r3, [r7, #64]	; 0x40
 80001a2:	2300      	movs	r3, #0
 80001a4:	647b      	str	r3, [r7, #68]	; 0x44
  habAQHandle = osSemaphoreCreate(osSemaphore(habAQ), 1);
 80001a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80001aa:	2101      	movs	r1, #1
 80001ac:	4618      	mov	r0, r3
 80001ae:	f002 fe7e 	bl	8002eae <osSemaphoreCreate>
 80001b2:	4602      	mov	r2, r0
 80001b4:	4b1a      	ldr	r3, [pc, #104]	; (8000220 <main+0xa0>)
 80001b6:	601a      	str	r2, [r3, #0]

  /* definition and creation of habENV */
  osSemaphoreDef(habENV);
 80001b8:	2300      	movs	r3, #0
 80001ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80001bc:	2300      	movs	r3, #0
 80001be:	63fb      	str	r3, [r7, #60]	; 0x3c
  habENVHandle = osSemaphoreCreate(osSemaphore(habENV), 1);
 80001c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80001c4:	2101      	movs	r1, #1
 80001c6:	4618      	mov	r0, r3
 80001c8:	f002 fe71 	bl	8002eae <osSemaphoreCreate>
 80001cc:	4602      	mov	r2, r0
 80001ce:	4b15      	ldr	r3, [pc, #84]	; (8000224 <main+0xa4>)
 80001d0:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of enviaTask */
  osThreadDef(enviaTask, StartEnviaTask, osPriorityNormal, 0, 128);
 80001d2:	4b15      	ldr	r3, [pc, #84]	; (8000228 <main+0xa8>)
 80001d4:	f107 041c 	add.w	r4, r7, #28
 80001d8:	461d      	mov	r5, r3
 80001da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  enviaTaskHandle = osThreadCreate(osThread(enviaTask), NULL);
 80001e6:	f107 031c 	add.w	r3, r7, #28
 80001ea:	2100      	movs	r1, #0
 80001ec:	4618      	mov	r0, r3
 80001ee:	f002 fdfe 	bl	8002dee <osThreadCreate>
 80001f2:	4602      	mov	r2, r0
 80001f4:	4b0d      	ldr	r3, [pc, #52]	; (800022c <main+0xac>)
 80001f6:	601a      	str	r2, [r3, #0]

  /* definition and creation of aquisitaTask */
  osThreadDef(aquisitaTask, StartAquisitaTask, osPriorityHigh, 0, 128);
 80001f8:	4b0d      	ldr	r3, [pc, #52]	; (8000230 <main+0xb0>)
 80001fa:	463c      	mov	r4, r7
 80001fc:	461d      	mov	r5, r3
 80001fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000200:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000202:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000206:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  aquisitaTaskHandle = osThreadCreate(osThread(aquisitaTask), NULL);
 800020a:	463b      	mov	r3, r7
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f002 fded 	bl	8002dee <osThreadCreate>
 8000214:	4602      	mov	r2, r0
 8000216:	4b07      	ldr	r3, [pc, #28]	; (8000234 <main+0xb4>)
 8000218:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800021a:	f002 fde1 	bl	8002de0 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800021e:	e7fe      	b.n	800021e <main+0x9e>
 8000220:	2000106c 	.word	0x2000106c
 8000224:	20000ff8 	.word	0x20000ff8
 8000228:	08005d80 	.word	0x08005d80
 800022c:	20000ff4 	.word	0x20000ff4
 8000230:	08005dac 	.word	0x08005dac
 8000234:	20000ffc 	.word	0x20000ffc

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b094      	sub	sp, #80	; 0x50
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000242:	2228      	movs	r2, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f005 fd7f 	bl	8005d4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	f107 0314 	add.w	r3, r7, #20
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
 800025a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000268:	2305      	movs	r3, #5
 800026a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800026c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000270:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000276:	2301      	movs	r3, #1
 8000278:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027a:	2301      	movs	r3, #1
 800027c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027e:	2302      	movs	r3, #2
 8000280:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000282:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000286:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000288:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800028c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000292:	4618      	mov	r0, r3
 8000294:	f001 f984 	bl	80015a0 <HAL_RCC_OscConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800029e:	f000 fa66 	bl	800076e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a2:	230f      	movs	r3, #15
 80002a4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a6:	2302      	movs	r3, #2
 80002a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b8:	f107 0314 	add.w	r3, r7, #20
 80002bc:	2102      	movs	r1, #2
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 fbee 	bl	8001aa0 <HAL_RCC_ClockConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002ca:	f000 fa50 	bl	800076e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80002ce:	2301      	movs	r3, #1
 80002d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80002d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002d6:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 fdac 	bl	8001e38 <HAL_RCCEx_PeriphCLKConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80002e6:	f000 fa42 	bl	800076e <Error_Handler>
  }
}
 80002ea:	bf00      	nop
 80002ec:	3750      	adds	r7, #80	; 0x50
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
	...

080002f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80002f8:	4b09      	ldr	r3, [pc, #36]	; (8000320 <MX_RTC_Init+0x2c>)
 80002fa:	4a0a      	ldr	r2, [pc, #40]	; (8000324 <MX_RTC_Init+0x30>)
 80002fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = 127;
 80002fe:	4b08      	ldr	r3, [pc, #32]	; (8000320 <MX_RTC_Init+0x2c>)
 8000300:	227f      	movs	r2, #127	; 0x7f
 8000302:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_SECOND;
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <MX_RTC_Init+0x2c>)
 8000306:	f44f 7240 	mov.w	r2, #768	; 0x300
 800030a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800030c:	4804      	ldr	r0, [pc, #16]	; (8000320 <MX_RTC_Init+0x2c>)
 800030e:	f001 ff05 	bl	800211c <HAL_RTC_Init>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_RTC_Init+0x28>
  {
    Error_Handler();
 8000318:	f000 fa29 	bl	800076e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20001000 	.word	0x20001000
 8000324:	40002800 	.word	0x40002800

08000328 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800032c:	4b16      	ldr	r3, [pc, #88]	; (8000388 <MX_SPI1_Init+0x60>)
 800032e:	4a17      	ldr	r2, [pc, #92]	; (800038c <MX_SPI1_Init+0x64>)
 8000330:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <MX_SPI1_Init+0x60>)
 8000334:	2200      	movs	r2, #0
 8000336:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000338:	4b13      	ldr	r3, [pc, #76]	; (8000388 <MX_SPI1_Init+0x60>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800033e:	4b12      	ldr	r3, [pc, #72]	; (8000388 <MX_SPI1_Init+0x60>)
 8000340:	2200      	movs	r2, #0
 8000342:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000344:	4b10      	ldr	r3, [pc, #64]	; (8000388 <MX_SPI1_Init+0x60>)
 8000346:	2200      	movs	r2, #0
 8000348:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800034a:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <MX_SPI1_Init+0x60>)
 800034c:	2200      	movs	r2, #0
 800034e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000350:	4b0d      	ldr	r3, [pc, #52]	; (8000388 <MX_SPI1_Init+0x60>)
 8000352:	2200      	movs	r2, #0
 8000354:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000356:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <MX_SPI1_Init+0x60>)
 8000358:	2208      	movs	r2, #8
 800035a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800035c:	4b0a      	ldr	r3, [pc, #40]	; (8000388 <MX_SPI1_Init+0x60>)
 800035e:	2200      	movs	r2, #0
 8000360:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000362:	4b09      	ldr	r3, [pc, #36]	; (8000388 <MX_SPI1_Init+0x60>)
 8000364:	2200      	movs	r2, #0
 8000366:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000368:	4b07      	ldr	r3, [pc, #28]	; (8000388 <MX_SPI1_Init+0x60>)
 800036a:	2200      	movs	r2, #0
 800036c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800036e:	4b06      	ldr	r3, [pc, #24]	; (8000388 <MX_SPI1_Init+0x60>)
 8000370:	220a      	movs	r2, #10
 8000372:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000374:	4804      	ldr	r0, [pc, #16]	; (8000388 <MX_SPI1_Init+0x60>)
 8000376:	f001 ffe4 	bl	8002342 <HAL_SPI_Init>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_SPI1_Init+0x5c>
  {
    Error_Handler();
 8000380:	f000 f9f5 	bl	800076e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20001014 	.word	0x20001014
 800038c:	40013000 	.word	0x40013000

08000390 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000396:	4b10      	ldr	r3, [pc, #64]	; (80003d8 <MX_DMA_Init+0x48>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	4a0f      	ldr	r2, [pc, #60]	; (80003d8 <MX_DMA_Init+0x48>)
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	6153      	str	r3, [r2, #20]
 80003a2:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <MX_DMA_Init+0x48>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	f003 0301 	and.w	r3, r3, #1
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2105      	movs	r1, #5
 80003b2:	200c      	movs	r0, #12
 80003b4:	f000 fccf 	bl	8000d56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80003b8:	200c      	movs	r0, #12
 80003ba:	f000 fce8 	bl	8000d8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80003be:	2200      	movs	r2, #0
 80003c0:	2105      	movs	r1, #5
 80003c2:	200d      	movs	r0, #13
 80003c4:	f000 fcc7 	bl	8000d56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80003c8:	200d      	movs	r0, #13
 80003ca:	f000 fce0 	bl	8000d8e <HAL_NVIC_EnableIRQ>

}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000

080003dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b088      	sub	sp, #32
 80003e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e2:	f107 0310 	add.w	r3, r7, #16
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f0:	4b59      	ldr	r3, [pc, #356]	; (8000558 <MX_GPIO_Init+0x17c>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a58      	ldr	r2, [pc, #352]	; (8000558 <MX_GPIO_Init+0x17c>)
 80003f6:	f043 0310 	orr.w	r3, r3, #16
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b56      	ldr	r3, [pc, #344]	; (8000558 <MX_GPIO_Init+0x17c>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0310 	and.w	r3, r3, #16
 8000404:	60fb      	str	r3, [r7, #12]
 8000406:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000408:	4b53      	ldr	r3, [pc, #332]	; (8000558 <MX_GPIO_Init+0x17c>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a52      	ldr	r2, [pc, #328]	; (8000558 <MX_GPIO_Init+0x17c>)
 800040e:	f043 0320 	orr.w	r3, r3, #32
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b50      	ldr	r3, [pc, #320]	; (8000558 <MX_GPIO_Init+0x17c>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f003 0320 	and.w	r3, r3, #32
 800041c:	60bb      	str	r3, [r7, #8]
 800041e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000420:	4b4d      	ldr	r3, [pc, #308]	; (8000558 <MX_GPIO_Init+0x17c>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a4c      	ldr	r2, [pc, #304]	; (8000558 <MX_GPIO_Init+0x17c>)
 8000426:	f043 0304 	orr.w	r3, r3, #4
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b4a      	ldr	r3, [pc, #296]	; (8000558 <MX_GPIO_Init+0x17c>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0304 	and.w	r3, r3, #4
 8000434:	607b      	str	r3, [r7, #4]
 8000436:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000438:	4b47      	ldr	r3, [pc, #284]	; (8000558 <MX_GPIO_Init+0x17c>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a46      	ldr	r2, [pc, #280]	; (8000558 <MX_GPIO_Init+0x17c>)
 800043e:	f043 0308 	orr.w	r3, r3, #8
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b44      	ldr	r3, [pc, #272]	; (8000558 <MX_GPIO_Init+0x17c>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0308 	and.w	r3, r3, #8
 800044c:	603b      	str	r3, [r7, #0]
 800044e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000456:	4841      	ldr	r0, [pc, #260]	; (800055c <MX_GPIO_Init+0x180>)
 8000458:	f001 f866 	bl	8001528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Cvrst_Pin|Cs_Pin, GPIO_PIN_SET);
 800045c:	2201      	movs	r2, #1
 800045e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000462:	483f      	ldr	r0, [pc, #252]	; (8000560 <MX_GPIO_Init+0x184>)
 8000464:	f001 f860 	bl	8001528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Os0_Pin|rst_Pin|ce_Pin|Os1_Pin 
 8000468:	2200      	movs	r2, #0
 800046a:	f44f 411e 	mov.w	r1, #40448	; 0x9e00
 800046e:	483c      	ldr	r0, [pc, #240]	; (8000560 <MX_GPIO_Init+0x184>)
 8000470:	f001 f85a 	bl	8001528 <HAL_GPIO_WritePin>
                          |Os2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000474:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047a:	2301      	movs	r3, #1
 800047c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047e:	2300      	movs	r3, #0
 8000480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000482:	2302      	movs	r3, #2
 8000484:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000486:	f107 0310 	add.w	r3, r7, #16
 800048a:	4619      	mov	r1, r3
 800048c:	4833      	ldr	r0, [pc, #204]	; (800055c <MX_GPIO_Init+0x180>)
 800048e:	f000 fef1 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pin : ext_nss_Pin */
  GPIO_InitStruct.Pin = ext_nss_Pin;
 8000492:	2301      	movs	r3, #1
 8000494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000496:	4b33      	ldr	r3, [pc, #204]	; (8000564 <MX_GPIO_Init+0x188>)
 8000498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	2300      	movs	r3, #0
 800049c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ext_nss_GPIO_Port, &GPIO_InitStruct);
 800049e:	f107 0310 	add.w	r3, r7, #16
 80004a2:	4619      	mov	r1, r3
 80004a4:	482e      	ldr	r0, [pc, #184]	; (8000560 <MX_GPIO_Init+0x184>)
 80004a6:	f000 fee5 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pin : Frsdt_Pin */
  GPIO_InitStruct.Pin = Frsdt_Pin;
 80004aa:	2302      	movs	r3, #2
 80004ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ae:	2300      	movs	r3, #0
 80004b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b2:	2300      	movs	r3, #0
 80004b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Frsdt_GPIO_Port, &GPIO_InitStruct);
 80004b6:	f107 0310 	add.w	r3, r7, #16
 80004ba:	4619      	mov	r1, r3
 80004bc:	4828      	ldr	r0, [pc, #160]	; (8000560 <MX_GPIO_Init+0x184>)
 80004be:	f000 fed9 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pins : Cvrst_Pin Cs_Pin ce_Pin */
  GPIO_InitStruct.Pin = Cvrst_Pin|Cs_Pin|ce_Pin;
 80004c2:	f640 1304 	movw	r3, #2308	; 0x904
 80004c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c8:	2301      	movs	r3, #1
 80004ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	2300      	movs	r3, #0
 80004ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d0:	2303      	movs	r3, #3
 80004d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	4619      	mov	r1, r3
 80004da:	4821      	ldr	r0, [pc, #132]	; (8000560 <MX_GPIO_Init+0x184>)
 80004dc:	f000 feca 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pin : Busy_Pin */
  GPIO_InitStruct.Pin = Busy_Pin;
 80004e0:	2308      	movs	r3, #8
 80004e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004e4:	4b20      	ldr	r3, [pc, #128]	; (8000568 <MX_GPIO_Init+0x18c>)
 80004e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004e8:	2302      	movs	r3, #2
 80004ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Busy_GPIO_Port, &GPIO_InitStruct);
 80004ec:	f107 0310 	add.w	r3, r7, #16
 80004f0:	4619      	mov	r1, r3
 80004f2:	481b      	ldr	r0, [pc, #108]	; (8000560 <MX_GPIO_Init+0x184>)
 80004f4:	f000 febe 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pins : db0_Pin db1_Pin db2_Pin db10_Pin 
                           db11_Pin db12_Pin db13_Pin db14_Pin 
                           db15_Pin db3_Pin db4_Pin db5_Pin 
                           db6_Pin db7_Pin db8_Pin db9_Pin */
  GPIO_InitStruct.Pin = db0_Pin|db1_Pin|db2_Pin|db10_Pin 
 80004f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004fc:	613b      	str	r3, [r7, #16]
                          |db11_Pin|db12_Pin|db13_Pin|db14_Pin 
                          |db15_Pin|db3_Pin|db4_Pin|db5_Pin 
                          |db6_Pin|db7_Pin|db8_Pin|db9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	2300      	movs	r3, #0
 8000504:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	4619      	mov	r1, r3
 800050c:	4817      	ldr	r0, [pc, #92]	; (800056c <MX_GPIO_Init+0x190>)
 800050e:	f000 feb1 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pins : Os0_Pin rst_Pin Os1_Pin Os2_Pin */
  GPIO_InitStruct.Pin = Os0_Pin|rst_Pin|Os1_Pin|Os2_Pin;
 8000512:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000518:	2301      	movs	r3, #1
 800051a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000520:	2302      	movs	r3, #2
 8000522:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	4619      	mov	r1, r3
 800052a:	480d      	ldr	r0, [pc, #52]	; (8000560 <MX_GPIO_Init+0x184>)
 800052c:	f000 fea2 	bl	8001274 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000530:	2200      	movs	r2, #0
 8000532:	2105      	movs	r1, #5
 8000534:	2006      	movs	r0, #6
 8000536:	f000 fc0e 	bl	8000d56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800053a:	2006      	movs	r0, #6
 800053c:	f000 fc27 	bl	8000d8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000540:	2200      	movs	r2, #0
 8000542:	2105      	movs	r1, #5
 8000544:	2009      	movs	r0, #9
 8000546:	f000 fc06 	bl	8000d56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800054a:	2009      	movs	r0, #9
 800054c:	f000 fc1f 	bl	8000d8e <HAL_NVIC_EnableIRQ>

}
 8000550:	bf00      	nop
 8000552:	3720      	adds	r7, #32
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40021000 	.word	0x40021000
 800055c:	40011000 	.word	0x40011000
 8000560:	40010800 	.word	0x40010800
 8000564:	10110000 	.word	0x10110000
 8000568:	10210000 	.word	0x10210000
 800056c:	40010c00 	.word	0x40010c00

08000570 <Converst>:
{
	//HAL_GPIO_WritePin(GPIOA, range_Pin, 1);

}
void Converst(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOA, Cvrst_Pin, 0);
 8000574:	2200      	movs	r2, #0
 8000576:	2104      	movs	r1, #4
 8000578:	4804      	ldr	r0, [pc, #16]	; (800058c <Converst+0x1c>)
 800057a:	f000 ffd5 	bl	8001528 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA, Cvrst_Pin, 1);
 800057e:	2201      	movs	r2, #1
 8000580:	2104      	movs	r1, #4
 8000582:	4802      	ldr	r0, [pc, #8]	; (800058c <Converst+0x1c>)
 8000584:	f000 ffd0 	bl	8001528 <HAL_GPIO_WritePin>
}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40010800 	.word	0x40010800

08000590 <Read>:

 void Read(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
	int i;
	uint16_t valor;
	static unsigned char valor2;
	static unsigned char valor3;
	static unsigned char canais[16];
	for (i=0; i<16;)
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	e034      	b.n	8000606 <Read+0x76>
		{
			HAL_GPIO_WritePin(GPIOA, Cs_Pin, 0);//cs AD
 800059c:	2200      	movs	r2, #0
 800059e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a2:	481e      	ldr	r0, [pc, #120]	; (800061c <Read+0x8c>)
 80005a4:	f000 ffc0 	bl	8001528 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, ce_Pin, 1); //enable buffer externo
 80005a8:	2201      	movs	r2, #1
 80005aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ae:	481b      	ldr	r0, [pc, #108]	; (800061c <Read+0x8c>)
 80005b0:	f000 ffba 	bl	8001528 <HAL_GPIO_WritePin>

			valor = GPIOB->IDR;   // captura a palavra de 16bits referente à portB onde estão os bits do AD
 80005b4:	4b1a      	ldr	r3, [pc, #104]	; (8000620 <Read+0x90>)
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	807b      	strh	r3, [r7, #2]
			valor2 = (valor & 255); // como o envio é feito em bytes, decompoe-se a palavra de 16 bits em 2 bytes (byte 2)
 80005ba:	887b      	ldrh	r3, [r7, #2]
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4b19      	ldr	r3, [pc, #100]	; (8000624 <Read+0x94>)
 80005c0:	701a      	strb	r2, [r3, #0]
			valor3 = ((valor>>8) & 255);  // como o envio é feito em bytes, decompoe-se a palavra de 16 bits em 2 bytes (byte 1)
 80005c2:	887b      	ldrh	r3, [r7, #2]
 80005c4:	0a1b      	lsrs	r3, r3, #8
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	4b17      	ldr	r3, [pc, #92]	; (8000628 <Read+0x98>)
 80005cc:	701a      	strb	r2, [r3, #0]
			canais[i]= valor3; //(byte 1)
 80005ce:	4b16      	ldr	r3, [pc, #88]	; (8000628 <Read+0x98>)
 80005d0:	7819      	ldrb	r1, [r3, #0]
 80005d2:	4a16      	ldr	r2, [pc, #88]	; (800062c <Read+0x9c>)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4413      	add	r3, r2
 80005d8:	460a      	mov	r2, r1
 80005da:	701a      	strb	r2, [r3, #0]
			canais[i+1]= valor2; //(byte 2)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3301      	adds	r3, #1
 80005e0:	4a10      	ldr	r2, [pc, #64]	; (8000624 <Read+0x94>)
 80005e2:	7811      	ldrb	r1, [r2, #0]
 80005e4:	4a11      	ldr	r2, [pc, #68]	; (800062c <Read+0x9c>)
 80005e6:	54d1      	strb	r1, [r2, r3]
			////{
				//i=0;
			//}


			i=i+2;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	3302      	adds	r3, #2
 80005ec:	607b      	str	r3, [r7, #4]
			HAL_GPIO_WritePin(GPIOA, Cs_Pin, 1);
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f4:	4809      	ldr	r0, [pc, #36]	; (800061c <Read+0x8c>)
 80005f6:	f000 ff97 	bl	8001528 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, ce_Pin, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000600:	4806      	ldr	r0, [pc, #24]	; (800061c <Read+0x8c>)
 8000602:	f000 ff91 	bl	8001528 <HAL_GPIO_WritePin>
	for (i=0; i<16;)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2b0f      	cmp	r3, #15
 800060a:	ddc7      	ble.n	800059c <Read+0xc>
		}

	vA_send_Function(canais);
 800060c:	4807      	ldr	r0, [pc, #28]	; (800062c <Read+0x9c>)
 800060e:	f000 f839 	bl	8000684 <vA_send_Function>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40010800 	.word	0x40010800
 8000620:	40010c00 	.word	0x40010c00
 8000624:	20000280 	.word	0x20000280
 8000628:	20000281 	.word	0x20000281
 800062c:	20000284 	.word	0x20000284

08000630 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)  //interrupção de busy do AD responsável por iniciar a thread para aquisição
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Busy_Pin)
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	2b08      	cmp	r3, #8
 800063e:	d104      	bne.n	800064a <HAL_GPIO_EXTI_Callback+0x1a>

	{
		osSemaphoreRelease (habAQHandle); //https://arm-software.github.io/CMSIS_5/RTOS/html/group__CMSIS__RTOS__SemaphoreMgmt.html
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <HAL_GPIO_EXTI_Callback+0x24>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4618      	mov	r0, r3
 8000646:	f002 fcb3 	bl	8002fb0 <osSemaphoreRelease>

	}

}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	2000106c 	.word	0x2000106c

08000658 <vAFunction>:
void vAFunction( void ) // https://www.freertos.org/RTOS-stream-buffer-API.html
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	//StreamBufferHandle_t xStreamBuffers;
	const size_t xStreamBufferSizeBytes = 1600, xTriggerLevel = 16;
 800065e:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	2310      	movs	r3, #16
 8000666:	603b      	str	r3, [r7, #0]

    /* Create a stream buffer that can hold 100 bytes.  The memory used to hold
    both the stream buffer structure and the data in the stream buffer is
    allocated dynamically. */
    xStreamBuffer = xStreamBufferCreate( xStreamBufferSizeBytes, xTriggerLevel );
 8000668:	2200      	movs	r2, #0
 800066a:	6839      	ldr	r1, [r7, #0]
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f003 fe9f 	bl	80043b0 <xStreamBufferGenericCreate>
 8000672:	4602      	mov	r2, r0
 8000674:	4b02      	ldr	r3, [pc, #8]	; (8000680 <vAFunction+0x28>)
 8000676:	601a      	str	r2, [r3, #0]

}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000ff0 	.word	0x20000ff0

08000684 <vA_send_Function>:

void vA_send_Function( unsigned char to_send[16]  )  // https://www.freertos.org/RTOS-stream-buffer-API.html
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	size_t xBytesSent;

	const TickType_t x100ms = pdMS_TO_TICKS( 100 );
 800068c:	2364      	movs	r3, #100	; 0x64
 800068e:	60fb      	str	r3, [r7, #12]

	xBytesSent = xStreamBufferSend( xStreamBuffer, (void *)to_send, 16, x100ms );
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <vA_send_Function+0x24>)
 8000692:	6818      	ldr	r0, [r3, #0]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	2210      	movs	r2, #16
 8000698:	6879      	ldr	r1, [r7, #4]
 800069a:	f003 fefb 	bl	8004494 <xStreamBufferSend>
 800069e:	60b8      	str	r0, [r7, #8]



}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000ff0 	.word	0x20000ff0

080006ac <vA_receive_Function>:

void vA_receive_Function(void)  // https://www.freertos.org/RTOS-stream-buffer-API.html
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
	static unsigned char ucRxData[16];
	size_t xReceivedBytes;
	const TickType_t xBlockTime = pdMS_TO_TICKS( 20 );
 80006b2:	2314      	movs	r3, #20
 80006b4:	607b      	str	r3, [r7, #4]

	xReceivedBytes = xStreamBufferReceive( xStreamBuffer, (void *)ucRxData, 16, xBlockTime );
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <vA_receive_Function+0x34>)
 80006b8:	6818      	ldr	r0, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2210      	movs	r2, #16
 80006be:	4909      	ldr	r1, [pc, #36]	; (80006e4 <vA_receive_Function+0x38>)
 80006c0:	f003 ffc9 	bl	8004656 <xStreamBufferReceive>
 80006c4:	6038      	str	r0, [r7, #0]


	if( xReceivedBytes == sizeof( ucRxData ) )
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	2b10      	cmp	r3, #16
 80006ca:	d104      	bne.n	80006d6 <vA_receive_Function+0x2a>
	{

	  HAL_SPI_Transmit_DMA(&hspi1, ucRxData, 16);
 80006cc:	2210      	movs	r2, #16
 80006ce:	4905      	ldr	r1, [pc, #20]	; (80006e4 <vA_receive_Function+0x38>)
 80006d0:	4805      	ldr	r0, [pc, #20]	; (80006e8 <vA_receive_Function+0x3c>)
 80006d2:	f001 fe97 	bl	8002404 <HAL_SPI_Transmit_DMA>

	}
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000ff0 	.word	0x20000ff0
 80006e4:	20000294 	.word	0x20000294
 80006e8:	20001014 	.word	0x20001014

080006ec <StartEnviaTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartEnviaTask */
void StartEnviaTask(void const * argument) //https://www.freertos.org/a00106.html
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait (habENVHandle, osWaitForever); //https://arm-software.github.io/CMSIS_5/RTOS/html/group__CMSIS__RTOS__SemaphoreMgmt.html
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <StartEnviaTask+0x28>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f04f 31ff 	mov.w	r1, #4294967295
 80006fc:	4618      	mov	r0, r3
 80006fe:	f002 fc09 	bl	8002f14 <osSemaphoreWait>
	  vA_receive_Function();
 8000702:	f7ff ffd3 	bl	80006ac <vA_receive_Function>
	  osDelay(1);
 8000706:	2001      	movs	r0, #1
 8000708:	f002 fbbd 	bl	8002e86 <osDelay>
	  Converst();
 800070c:	f7ff ff30 	bl	8000570 <Converst>
	  osSemaphoreWait (habENVHandle, osWaitForever); //https://arm-software.github.io/CMSIS_5/RTOS/html/group__CMSIS__RTOS__SemaphoreMgmt.html
 8000710:	e7f0      	b.n	80006f4 <StartEnviaTask+0x8>
 8000712:	bf00      	nop
 8000714:	20000ff8 	.word	0x20000ff8

08000718 <StartAquisitaTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAquisitaTask */
void StartAquisitaTask(void const * argument)  //https://www.freertos.org/a00106.html
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAquisitaTask */
	vAFunction();
 8000720:	f7ff ff9a 	bl	8000658 <vAFunction>
  /* Infinite loop */
  for(;;)
  {

	  osSemaphoreWait (habAQHandle, osWaitForever ); //https://arm-software.github.io/CMSIS_5/RTOS/html/group__CMSIS__RTOS__SemaphoreMgmt.html
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <StartAquisitaTask+0x30>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f04f 31ff 	mov.w	r1, #4294967295
 800072c:	4618      	mov	r0, r3
 800072e:	f002 fbf1 	bl	8002f14 <osSemaphoreWait>
	  Read();
 8000732:	f7ff ff2d 	bl	8000590 <Read>
	  osSemaphoreRelease (habENVHandle); //https://arm-software.github.io/CMSIS_5/RTOS/html/group__CMSIS__RTOS__SemaphoreMgmt.html
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <StartAquisitaTask+0x34>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4618      	mov	r0, r3
 800073c:	f002 fc38 	bl	8002fb0 <osSemaphoreRelease>
	  osDelay(1);
 8000740:	2001      	movs	r0, #1
 8000742:	f002 fba0 	bl	8002e86 <osDelay>
	  osSemaphoreWait (habAQHandle, osWaitForever ); //https://arm-software.github.io/CMSIS_5/RTOS/html/group__CMSIS__RTOS__SemaphoreMgmt.html
 8000746:	e7ed      	b.n	8000724 <StartAquisitaTask+0xc>
 8000748:	2000106c 	.word	0x2000106c
 800074c:	20000ff8 	.word	0x20000ff8

08000750 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000760:	d101      	bne.n	8000766 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000762:	f000 fa27 	bl	8000bb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
	...

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000782:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <HAL_MspInit+0x68>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	4a17      	ldr	r2, [pc, #92]	; (80007e4 <HAL_MspInit+0x68>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6193      	str	r3, [r2, #24]
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <HAL_MspInit+0x68>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <HAL_MspInit+0x68>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	4a11      	ldr	r2, [pc, #68]	; (80007e4 <HAL_MspInit+0x68>)
 80007a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a4:	61d3      	str	r3, [r2, #28]
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <HAL_MspInit+0x68>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	210f      	movs	r1, #15
 80007b6:	f06f 0001 	mvn.w	r0, #1
 80007ba:	f000 facc 	bl	8000d56 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007be:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <HAL_MspInit+0x6c>)
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <HAL_MspInit+0x6c>)
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007da:	bf00      	nop
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40010000 	.word	0x40010000

080007ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a0b      	ldr	r2, [pc, #44]	; (8000828 <HAL_RTC_MspInit+0x3c>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d110      	bne.n	8000820 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80007fe:	f000 fec3 	bl	8001588 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <HAL_RTC_MspInit+0x40>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	4a09      	ldr	r2, [pc, #36]	; (800082c <HAL_RTC_MspInit+0x40>)
 8000808:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800080c:	61d3      	str	r3, [r2, #28]
 800080e:	4b07      	ldr	r3, [pc, #28]	; (800082c <HAL_RTC_MspInit+0x40>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <HAL_RTC_MspInit+0x44>)
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40002800 	.word	0x40002800
 800082c:	40021000 	.word	0x40021000
 8000830:	4242043c 	.word	0x4242043c

08000834 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a47      	ldr	r2, [pc, #284]	; (800096c <HAL_SPI_MspInit+0x138>)
 8000850:	4293      	cmp	r3, r2
 8000852:	f040 8086 	bne.w	8000962 <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000856:	4b46      	ldr	r3, [pc, #280]	; (8000970 <HAL_SPI_MspInit+0x13c>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	4a45      	ldr	r2, [pc, #276]	; (8000970 <HAL_SPI_MspInit+0x13c>)
 800085c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000860:	6193      	str	r3, [r2, #24]
 8000862:	4b43      	ldr	r3, [pc, #268]	; (8000970 <HAL_SPI_MspInit+0x13c>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b40      	ldr	r3, [pc, #256]	; (8000970 <HAL_SPI_MspInit+0x13c>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	4a3f      	ldr	r2, [pc, #252]	; (8000970 <HAL_SPI_MspInit+0x13c>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	6193      	str	r3, [r2, #24]
 800087a:	4b3d      	ldr	r3, [pc, #244]	; (8000970 <HAL_SPI_MspInit+0x13c>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000886:	23b0      	movs	r3, #176	; 0xb0
 8000888:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000892:	f107 0310 	add.w	r3, r7, #16
 8000896:	4619      	mov	r1, r3
 8000898:	4836      	ldr	r0, [pc, #216]	; (8000974 <HAL_SPI_MspInit+0x140>)
 800089a:	f000 fceb 	bl	8001274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800089e:	2340      	movs	r3, #64	; 0x40
 80008a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 0310 	add.w	r3, r7, #16
 80008ae:	4619      	mov	r1, r3
 80008b0:	4830      	ldr	r0, [pc, #192]	; (8000974 <HAL_SPI_MspInit+0x140>)
 80008b2:	f000 fcdf 	bl	8001274 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80008b6:	4b30      	ldr	r3, [pc, #192]	; (8000978 <HAL_SPI_MspInit+0x144>)
 80008b8:	4a30      	ldr	r2, [pc, #192]	; (800097c <HAL_SPI_MspInit+0x148>)
 80008ba:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008bc:	4b2e      	ldr	r3, [pc, #184]	; (8000978 <HAL_SPI_MspInit+0x144>)
 80008be:	2200      	movs	r2, #0
 80008c0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c2:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <HAL_SPI_MspInit+0x144>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008c8:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <HAL_SPI_MspInit+0x144>)
 80008ca:	2280      	movs	r2, #128	; 0x80
 80008cc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008ce:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <HAL_SPI_MspInit+0x144>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008d4:	4b28      	ldr	r3, [pc, #160]	; (8000978 <HAL_SPI_MspInit+0x144>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80008da:	4b27      	ldr	r3, [pc, #156]	; (8000978 <HAL_SPI_MspInit+0x144>)
 80008dc:	2220      	movs	r2, #32
 80008de:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <HAL_SPI_MspInit+0x144>)
 80008e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008e6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80008e8:	4823      	ldr	r0, [pc, #140]	; (8000978 <HAL_SPI_MspInit+0x144>)
 80008ea:	f000 fa5f 	bl	8000dac <HAL_DMA_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 80008f4:	f7ff ff3b 	bl	800076e <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a1f      	ldr	r2, [pc, #124]	; (8000978 <HAL_SPI_MspInit+0x144>)
 80008fc:	64da      	str	r2, [r3, #76]	; 0x4c
 80008fe:	4a1e      	ldr	r2, [pc, #120]	; (8000978 <HAL_SPI_MspInit+0x144>)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000904:	4b1e      	ldr	r3, [pc, #120]	; (8000980 <HAL_SPI_MspInit+0x14c>)
 8000906:	4a1f      	ldr	r2, [pc, #124]	; (8000984 <HAL_SPI_MspInit+0x150>)
 8000908:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800090a:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <HAL_SPI_MspInit+0x14c>)
 800090c:	2210      	movs	r2, #16
 800090e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000910:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <HAL_SPI_MspInit+0x14c>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <HAL_SPI_MspInit+0x14c>)
 8000918:	2280      	movs	r2, #128	; 0x80
 800091a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800091c:	4b18      	ldr	r3, [pc, #96]	; (8000980 <HAL_SPI_MspInit+0x14c>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <HAL_SPI_MspInit+0x14c>)
 8000924:	2200      	movs	r2, #0
 8000926:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8000928:	4b15      	ldr	r3, [pc, #84]	; (8000980 <HAL_SPI_MspInit+0x14c>)
 800092a:	2220      	movs	r2, #32
 800092c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <HAL_SPI_MspInit+0x14c>)
 8000930:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000934:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000936:	4812      	ldr	r0, [pc, #72]	; (8000980 <HAL_SPI_MspInit+0x14c>)
 8000938:	f000 fa38 	bl	8000dac <HAL_DMA_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8000942:	f7ff ff14 	bl	800076e <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a0d      	ldr	r2, [pc, #52]	; (8000980 <HAL_SPI_MspInit+0x14c>)
 800094a:	649a      	str	r2, [r3, #72]	; 0x48
 800094c:	4a0c      	ldr	r2, [pc, #48]	; (8000980 <HAL_SPI_MspInit+0x14c>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2105      	movs	r1, #5
 8000956:	2023      	movs	r0, #35	; 0x23
 8000958:	f000 f9fd 	bl	8000d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800095c:	2023      	movs	r0, #35	; 0x23
 800095e:	f000 fa16 	bl	8000d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000962:	bf00      	nop
 8000964:	3720      	adds	r7, #32
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40013000 	.word	0x40013000
 8000970:	40021000 	.word	0x40021000
 8000974:	40010800 	.word	0x40010800
 8000978:	20001070 	.word	0x20001070
 800097c:	4002001c 	.word	0x4002001c
 8000980:	200010b4 	.word	0x200010b4
 8000984:	40020030 	.word	0x40020030

08000988 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08c      	sub	sp, #48	; 0x30
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8000998:	2200      	movs	r2, #0
 800099a:	6879      	ldr	r1, [r7, #4]
 800099c:	201c      	movs	r0, #28
 800099e:	f000 f9da 	bl	8000d56 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 80009a2:	201c      	movs	r0, #28
 80009a4:	f000 f9f3 	bl	8000d8e <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80009a8:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <HAL_InitTick+0xa4>)
 80009aa:	69db      	ldr	r3, [r3, #28]
 80009ac:	4a1f      	ldr	r2, [pc, #124]	; (8000a2c <HAL_InitTick+0xa4>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	61d3      	str	r3, [r2, #28]
 80009b4:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <HAL_InitTick+0xa4>)
 80009b6:	69db      	ldr	r3, [r3, #28]
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009c0:	f107 0210 	add.w	r2, r7, #16
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 f9e6 	bl	8001d9c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009d0:	f001 f9bc 	bl	8001d4c <HAL_RCC_GetPCLK1Freq>
 80009d4:	4603      	mov	r3, r0
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80009da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009dc:	4a14      	ldr	r2, [pc, #80]	; (8000a30 <HAL_InitTick+0xa8>)
 80009de:	fba2 2303 	umull	r2, r3, r2, r3
 80009e2:	0c9b      	lsrs	r3, r3, #18
 80009e4:	3b01      	subs	r3, #1
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <HAL_InitTick+0xac>)
 80009ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 80009f0:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <HAL_InitTick+0xac>)
 80009f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009f6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <HAL_InitTick+0xac>)
 80009fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009fc:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80009fe:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <HAL_InitTick+0xac>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a04:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <HAL_InitTick+0xac>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000a0a:	480a      	ldr	r0, [pc, #40]	; (8000a34 <HAL_InitTick+0xac>)
 8000a0c:	f001 ffc8 	bl	80029a0 <HAL_TIM_Base_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d104      	bne.n	8000a20 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000a16:	4807      	ldr	r0, [pc, #28]	; (8000a34 <HAL_InitTick+0xac>)
 8000a18:	f001 fff6 	bl	8002a08 <HAL_TIM_Base_Start_IT>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	e000      	b.n	8000a22 <HAL_InitTick+0x9a>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000a20:	2301      	movs	r3, #1
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3730      	adds	r7, #48	; 0x30
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	431bde83 	.word	0x431bde83
 8000a34:	200010f8 	.word	0x200010f8

08000a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <HardFault_Handler+0x4>

08000a4a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <MemManage_Handler+0x4>

08000a50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <BusFault_Handler+0x4>

08000a56 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <UsageFault_Handler+0x4>

08000a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr

08000a68 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f000 fd73 	bl	8001558 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000a7a:	2008      	movs	r0, #8
 8000a7c:	f000 fd6c 	bl	8001558 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <DMA1_Channel2_IRQHandler+0x10>)
 8000a8a:	f000 fabf 	bl	800100c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20001070 	.word	0x20001070

08000a98 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000a9c:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <DMA1_Channel3_IRQHandler+0x10>)
 8000a9e:	f000 fab5 	bl	800100c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200010b4 	.word	0x200010b4

08000aac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <TIM2_IRQHandler+0x10>)
 8000ab2:	f001 ffcc 	bl	8002a4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200010f8 	.word	0x200010f8

08000ac0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <SPI1_IRQHandler+0x10>)
 8000ac6:	f001 fd4b 	bl	8002560 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20001014 	.word	0x20001014

08000ad4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <SystemInit+0x5c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a14      	ldr	r2, [pc, #80]	; (8000b30 <SystemInit+0x5c>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <SystemInit+0x5c>)
 8000ae6:	685a      	ldr	r2, [r3, #4]
 8000ae8:	4911      	ldr	r1, [pc, #68]	; (8000b30 <SystemInit+0x5c>)
 8000aea:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <SystemInit+0x60>)
 8000aec:	4013      	ands	r3, r2
 8000aee:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <SystemInit+0x5c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <SystemInit+0x5c>)
 8000af6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000afe:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <SystemInit+0x5c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <SystemInit+0x5c>)
 8000b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b0a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <SystemInit+0x5c>)
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <SystemInit+0x5c>)
 8000b12:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000b16:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <SystemInit+0x5c>)
 8000b1a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000b1e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <SystemInit+0x64>)
 8000b22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b26:	609a      	str	r2, [r3, #8]
#endif 
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	40021000 	.word	0x40021000
 8000b34:	f8ff0000 	.word	0xf8ff0000
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b3c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b3e:	e003      	b.n	8000b48 <LoopCopyDataInit>

08000b40 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b42:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b44:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b46:	3104      	adds	r1, #4

08000b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b48:	480a      	ldr	r0, [pc, #40]	; (8000b74 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b4c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b4e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b50:	d3f6      	bcc.n	8000b40 <CopyDataInit>
  ldr r2, =_sbss
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b54:	e002      	b.n	8000b5c <LoopFillZerobss>

08000b56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b58:	f842 3b04 	str.w	r3, [r2], #4

08000b5c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b5e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b60:	d3f9      	bcc.n	8000b56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b62:	f7ff ffb7 	bl	8000ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b66:	f005 f8c1 	bl	8005cec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b6a:	f7ff fb09 	bl	8000180 <main>
  bx lr
 8000b6e:	4770      	bx	lr
  ldr r3, =_sidata
 8000b70:	08005e18 	.word	0x08005e18
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b78:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000b7c:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000b80:	2000113c 	.word	0x2000113c

08000b84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC1_2_IRQHandler>
	...

08000b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_Init+0x28>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <HAL_Init+0x28>)
 8000b92:	f043 0310 	orr.w	r3, r3, #16
 8000b96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 f8d1 	bl	8000d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f7ff fef2 	bl	8000988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba4:	f7ff fdea 	bl	800077c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40022000 	.word	0x40022000

08000bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <HAL_IncTick+0x1c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a03      	ldr	r2, [pc, #12]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	20001138 	.word	0x20001138

08000bd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b02      	ldr	r3, [pc, #8]	; (8000be8 <HAL_GetTick+0x10>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	20001138 	.word	0x20001138

08000bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	db0b      	blt.n	8000c7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	f003 021f 	and.w	r2, r3, #31
 8000c68:	4906      	ldr	r1, [pc, #24]	; (8000c84 <__NVIC_EnableIRQ+0x34>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	095b      	lsrs	r3, r3, #5
 8000c70:	2001      	movs	r0, #1
 8000c72:	fa00 f202 	lsl.w	r2, r0, r2
 8000c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	e000e100 	.word	0xe000e100

08000c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db0a      	blt.n	8000cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	490c      	ldr	r1, [pc, #48]	; (8000cd4 <__NVIC_SetPriority+0x4c>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	0112      	lsls	r2, r2, #4
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	440b      	add	r3, r1
 8000cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb0:	e00a      	b.n	8000cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4908      	ldr	r1, [pc, #32]	; (8000cd8 <__NVIC_SetPriority+0x50>)
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	3b04      	subs	r3, #4
 8000cc0:	0112      	lsls	r2, r2, #4
 8000cc2:	b2d2      	uxtb	r2, r2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	761a      	strb	r2, [r3, #24]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000e100 	.word	0xe000e100
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b089      	sub	sp, #36	; 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f1c3 0307 	rsb	r3, r3, #7
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	bf28      	it	cs
 8000cfa:	2304      	movcs	r3, #4
 8000cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3304      	adds	r3, #4
 8000d02:	2b06      	cmp	r3, #6
 8000d04:	d902      	bls.n	8000d0c <NVIC_EncodePriority+0x30>
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3b03      	subs	r3, #3
 8000d0a:	e000      	b.n	8000d0e <NVIC_EncodePriority+0x32>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	f04f 32ff 	mov.w	r2, #4294967295
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	401a      	ands	r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d24:	f04f 31ff 	mov.w	r1, #4294967295
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	43d9      	mvns	r1, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	4313      	orrs	r3, r2
         );
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3724      	adds	r7, #36	; 0x24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ff4f 	bl	8000bec <__NVIC_SetPriorityGrouping>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d68:	f7ff ff64 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8000d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	6978      	ldr	r0, [r7, #20]
 8000d74:	f7ff ffb2 	bl	8000cdc <NVIC_EncodePriority>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff81 	bl	8000c88 <__NVIC_SetPriority>
}
 8000d86:	bf00      	nop
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff57 	bl	8000c50 <__NVIC_EnableIRQ>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d101      	bne.n	8000dc2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e043      	b.n	8000e4a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <HAL_DMA_Init+0xa8>)
 8000dca:	4413      	add	r3, r2
 8000dcc:	4a22      	ldr	r2, [pc, #136]	; (8000e58 <HAL_DMA_Init+0xac>)
 8000dce:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd2:	091b      	lsrs	r3, r3, #4
 8000dd4:	009a      	lsls	r2, r3, #2
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a1f      	ldr	r2, [pc, #124]	; (8000e5c <HAL_DMA_Init+0xb0>)
 8000dde:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2202      	movs	r2, #2
 8000de4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000df6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000dfa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e24:	68fa      	ldr	r2, [r7, #12]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	bffdfff8 	.word	0xbffdfff8
 8000e58:	cccccccd 	.word	0xcccccccd
 8000e5c:	40020000 	.word	0x40020000

08000e60 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
 8000e6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d101      	bne.n	8000e80 <HAL_DMA_Start_IT+0x20>
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	e04a      	b.n	8000f16 <HAL_DMA_Start_IT+0xb6>
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2201      	movs	r2, #1
 8000e84:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d13a      	bne.n	8000f08 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2202      	movs	r2, #2
 8000e96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f022 0201 	bic.w	r2, r2, #1
 8000eae:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	68b9      	ldr	r1, [r7, #8]
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f000 f9ae 	bl	8001218 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d008      	beq.n	8000ed6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f042 020e 	orr.w	r2, r2, #14
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	e00f      	b.n	8000ef6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f022 0204 	bic.w	r2, r2, #4
 8000ee4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f042 020a 	orr.w	r2, r2, #10
 8000ef4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f042 0201 	orr.w	r2, r2, #1
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	e005      	b.n	8000f14 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f10:	2302      	movs	r3, #2
 8000f12:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d005      	beq.n	8000f42 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2204      	movs	r2, #4
 8000f3a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
 8000f40:	e051      	b.n	8000fe6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f022 020e 	bic.w	r2, r2, #14
 8000f50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f022 0201 	bic.w	r2, r2, #1
 8000f60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a22      	ldr	r2, [pc, #136]	; (8000ff0 <HAL_DMA_Abort_IT+0xd0>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d029      	beq.n	8000fc0 <HAL_DMA_Abort_IT+0xa0>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a20      	ldr	r2, [pc, #128]	; (8000ff4 <HAL_DMA_Abort_IT+0xd4>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d022      	beq.n	8000fbc <HAL_DMA_Abort_IT+0x9c>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a1f      	ldr	r2, [pc, #124]	; (8000ff8 <HAL_DMA_Abort_IT+0xd8>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d01a      	beq.n	8000fb6 <HAL_DMA_Abort_IT+0x96>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a1d      	ldr	r2, [pc, #116]	; (8000ffc <HAL_DMA_Abort_IT+0xdc>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d012      	beq.n	8000fb0 <HAL_DMA_Abort_IT+0x90>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a1c      	ldr	r2, [pc, #112]	; (8001000 <HAL_DMA_Abort_IT+0xe0>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d00a      	beq.n	8000faa <HAL_DMA_Abort_IT+0x8a>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a1a      	ldr	r2, [pc, #104]	; (8001004 <HAL_DMA_Abort_IT+0xe4>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d102      	bne.n	8000fa4 <HAL_DMA_Abort_IT+0x84>
 8000f9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000fa2:	e00e      	b.n	8000fc2 <HAL_DMA_Abort_IT+0xa2>
 8000fa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fa8:	e00b      	b.n	8000fc2 <HAL_DMA_Abort_IT+0xa2>
 8000faa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fae:	e008      	b.n	8000fc2 <HAL_DMA_Abort_IT+0xa2>
 8000fb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb4:	e005      	b.n	8000fc2 <HAL_DMA_Abort_IT+0xa2>
 8000fb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fba:	e002      	b.n	8000fc2 <HAL_DMA_Abort_IT+0xa2>
 8000fbc:	2310      	movs	r3, #16
 8000fbe:	e000      	b.n	8000fc2 <HAL_DMA_Abort_IT+0xa2>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	4a11      	ldr	r2, [pc, #68]	; (8001008 <HAL_DMA_Abort_IT+0xe8>)
 8000fc4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	4798      	blx	r3
    } 
  }
  return status;
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40020008 	.word	0x40020008
 8000ff4:	4002001c 	.word	0x4002001c
 8000ff8:	40020030 	.word	0x40020030
 8000ffc:	40020044 	.word	0x40020044
 8001000:	40020058 	.word	0x40020058
 8001004:	4002006c 	.word	0x4002006c
 8001008:	40020000 	.word	0x40020000

0800100c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	2204      	movs	r2, #4
 800102a:	409a      	lsls	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4013      	ands	r3, r2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d04f      	beq.n	80010d4 <HAL_DMA_IRQHandler+0xc8>
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	f003 0304 	and.w	r3, r3, #4
 800103a:	2b00      	cmp	r3, #0
 800103c:	d04a      	beq.n	80010d4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0320 	and.w	r3, r3, #32
 8001048:	2b00      	cmp	r3, #0
 800104a:	d107      	bne.n	800105c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f022 0204 	bic.w	r2, r2, #4
 800105a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a66      	ldr	r2, [pc, #408]	; (80011fc <HAL_DMA_IRQHandler+0x1f0>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d029      	beq.n	80010ba <HAL_DMA_IRQHandler+0xae>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a65      	ldr	r2, [pc, #404]	; (8001200 <HAL_DMA_IRQHandler+0x1f4>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d022      	beq.n	80010b6 <HAL_DMA_IRQHandler+0xaa>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a63      	ldr	r2, [pc, #396]	; (8001204 <HAL_DMA_IRQHandler+0x1f8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d01a      	beq.n	80010b0 <HAL_DMA_IRQHandler+0xa4>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a62      	ldr	r2, [pc, #392]	; (8001208 <HAL_DMA_IRQHandler+0x1fc>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d012      	beq.n	80010aa <HAL_DMA_IRQHandler+0x9e>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a60      	ldr	r2, [pc, #384]	; (800120c <HAL_DMA_IRQHandler+0x200>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d00a      	beq.n	80010a4 <HAL_DMA_IRQHandler+0x98>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a5f      	ldr	r2, [pc, #380]	; (8001210 <HAL_DMA_IRQHandler+0x204>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d102      	bne.n	800109e <HAL_DMA_IRQHandler+0x92>
 8001098:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800109c:	e00e      	b.n	80010bc <HAL_DMA_IRQHandler+0xb0>
 800109e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010a2:	e00b      	b.n	80010bc <HAL_DMA_IRQHandler+0xb0>
 80010a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80010a8:	e008      	b.n	80010bc <HAL_DMA_IRQHandler+0xb0>
 80010aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010ae:	e005      	b.n	80010bc <HAL_DMA_IRQHandler+0xb0>
 80010b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b4:	e002      	b.n	80010bc <HAL_DMA_IRQHandler+0xb0>
 80010b6:	2340      	movs	r3, #64	; 0x40
 80010b8:	e000      	b.n	80010bc <HAL_DMA_IRQHandler+0xb0>
 80010ba:	2304      	movs	r3, #4
 80010bc:	4a55      	ldr	r2, [pc, #340]	; (8001214 <HAL_DMA_IRQHandler+0x208>)
 80010be:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 8094 	beq.w	80011f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80010d2:	e08e      	b.n	80011f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	2202      	movs	r2, #2
 80010da:	409a      	lsls	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4013      	ands	r3, r2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d056      	beq.n	8001192 <HAL_DMA_IRQHandler+0x186>
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d051      	beq.n	8001192 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0320 	and.w	r3, r3, #32
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d10b      	bne.n	8001114 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 020a 	bic.w	r2, r2, #10
 800110a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2201      	movs	r2, #1
 8001110:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a38      	ldr	r2, [pc, #224]	; (80011fc <HAL_DMA_IRQHandler+0x1f0>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d029      	beq.n	8001172 <HAL_DMA_IRQHandler+0x166>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a37      	ldr	r2, [pc, #220]	; (8001200 <HAL_DMA_IRQHandler+0x1f4>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d022      	beq.n	800116e <HAL_DMA_IRQHandler+0x162>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a35      	ldr	r2, [pc, #212]	; (8001204 <HAL_DMA_IRQHandler+0x1f8>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d01a      	beq.n	8001168 <HAL_DMA_IRQHandler+0x15c>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a34      	ldr	r2, [pc, #208]	; (8001208 <HAL_DMA_IRQHandler+0x1fc>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d012      	beq.n	8001162 <HAL_DMA_IRQHandler+0x156>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a32      	ldr	r2, [pc, #200]	; (800120c <HAL_DMA_IRQHandler+0x200>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d00a      	beq.n	800115c <HAL_DMA_IRQHandler+0x150>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a31      	ldr	r2, [pc, #196]	; (8001210 <HAL_DMA_IRQHandler+0x204>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d102      	bne.n	8001156 <HAL_DMA_IRQHandler+0x14a>
 8001150:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001154:	e00e      	b.n	8001174 <HAL_DMA_IRQHandler+0x168>
 8001156:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800115a:	e00b      	b.n	8001174 <HAL_DMA_IRQHandler+0x168>
 800115c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001160:	e008      	b.n	8001174 <HAL_DMA_IRQHandler+0x168>
 8001162:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001166:	e005      	b.n	8001174 <HAL_DMA_IRQHandler+0x168>
 8001168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800116c:	e002      	b.n	8001174 <HAL_DMA_IRQHandler+0x168>
 800116e:	2320      	movs	r3, #32
 8001170:	e000      	b.n	8001174 <HAL_DMA_IRQHandler+0x168>
 8001172:	2302      	movs	r3, #2
 8001174:	4a27      	ldr	r2, [pc, #156]	; (8001214 <HAL_DMA_IRQHandler+0x208>)
 8001176:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001184:	2b00      	cmp	r3, #0
 8001186:	d034      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001190:	e02f      	b.n	80011f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	2208      	movs	r2, #8
 8001198:	409a      	lsls	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4013      	ands	r3, r2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d028      	beq.n	80011f4 <HAL_DMA_IRQHandler+0x1e8>
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d023      	beq.n	80011f4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 020e 	bic.w	r2, r2, #14
 80011ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c4:	2101      	movs	r1, #1
 80011c6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2201      	movs	r2, #1
 80011d0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2201      	movs	r2, #1
 80011d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d004      	beq.n	80011f4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	4798      	blx	r3
    }
  }
  return;
 80011f2:	bf00      	nop
 80011f4:	bf00      	nop
}
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40020008 	.word	0x40020008
 8001200:	4002001c 	.word	0x4002001c
 8001204:	40020030 	.word	0x40020030
 8001208:	40020044 	.word	0x40020044
 800120c:	40020058 	.word	0x40020058
 8001210:	4002006c 	.word	0x4002006c
 8001214:	40020000 	.word	0x40020000

08001218 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800122e:	2101      	movs	r1, #1
 8001230:	fa01 f202 	lsl.w	r2, r1, r2
 8001234:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b10      	cmp	r3, #16
 8001244:	d108      	bne.n	8001258 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001256:	e007      	b.n	8001268 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68ba      	ldr	r2, [r7, #8]
 800125e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	60da      	str	r2, [r3, #12]
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
	...

08001274 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001274:	b480      	push	{r7}
 8001276:	b08b      	sub	sp, #44	; 0x2c
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001286:	e127      	b.n	80014d8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001288:	2201      	movs	r2, #1
 800128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	69fa      	ldr	r2, [r7, #28]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	f040 8116 	bne.w	80014d2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2b12      	cmp	r3, #18
 80012ac:	d034      	beq.n	8001318 <HAL_GPIO_Init+0xa4>
 80012ae:	2b12      	cmp	r3, #18
 80012b0:	d80d      	bhi.n	80012ce <HAL_GPIO_Init+0x5a>
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d02b      	beq.n	800130e <HAL_GPIO_Init+0x9a>
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d804      	bhi.n	80012c4 <HAL_GPIO_Init+0x50>
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d031      	beq.n	8001322 <HAL_GPIO_Init+0xae>
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d01c      	beq.n	80012fc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012c2:	e048      	b.n	8001356 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d043      	beq.n	8001350 <HAL_GPIO_Init+0xdc>
 80012c8:	2b11      	cmp	r3, #17
 80012ca:	d01b      	beq.n	8001304 <HAL_GPIO_Init+0x90>
          break;
 80012cc:	e043      	b.n	8001356 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012ce:	4a89      	ldr	r2, [pc, #548]	; (80014f4 <HAL_GPIO_Init+0x280>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d026      	beq.n	8001322 <HAL_GPIO_Init+0xae>
 80012d4:	4a87      	ldr	r2, [pc, #540]	; (80014f4 <HAL_GPIO_Init+0x280>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d806      	bhi.n	80012e8 <HAL_GPIO_Init+0x74>
 80012da:	4a87      	ldr	r2, [pc, #540]	; (80014f8 <HAL_GPIO_Init+0x284>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d020      	beq.n	8001322 <HAL_GPIO_Init+0xae>
 80012e0:	4a86      	ldr	r2, [pc, #536]	; (80014fc <HAL_GPIO_Init+0x288>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d01d      	beq.n	8001322 <HAL_GPIO_Init+0xae>
          break;
 80012e6:	e036      	b.n	8001356 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012e8:	4a85      	ldr	r2, [pc, #532]	; (8001500 <HAL_GPIO_Init+0x28c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d019      	beq.n	8001322 <HAL_GPIO_Init+0xae>
 80012ee:	4a85      	ldr	r2, [pc, #532]	; (8001504 <HAL_GPIO_Init+0x290>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d016      	beq.n	8001322 <HAL_GPIO_Init+0xae>
 80012f4:	4a84      	ldr	r2, [pc, #528]	; (8001508 <HAL_GPIO_Init+0x294>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d013      	beq.n	8001322 <HAL_GPIO_Init+0xae>
          break;
 80012fa:	e02c      	b.n	8001356 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	623b      	str	r3, [r7, #32]
          break;
 8001302:	e028      	b.n	8001356 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	3304      	adds	r3, #4
 800130a:	623b      	str	r3, [r7, #32]
          break;
 800130c:	e023      	b.n	8001356 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	3308      	adds	r3, #8
 8001314:	623b      	str	r3, [r7, #32]
          break;
 8001316:	e01e      	b.n	8001356 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	330c      	adds	r3, #12
 800131e:	623b      	str	r3, [r7, #32]
          break;
 8001320:	e019      	b.n	8001356 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d102      	bne.n	8001330 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800132a:	2304      	movs	r3, #4
 800132c:	623b      	str	r3, [r7, #32]
          break;
 800132e:	e012      	b.n	8001356 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d105      	bne.n	8001344 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001338:	2308      	movs	r3, #8
 800133a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69fa      	ldr	r2, [r7, #28]
 8001340:	611a      	str	r2, [r3, #16]
          break;
 8001342:	e008      	b.n	8001356 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001344:	2308      	movs	r3, #8
 8001346:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69fa      	ldr	r2, [r7, #28]
 800134c:	615a      	str	r2, [r3, #20]
          break;
 800134e:	e002      	b.n	8001356 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
          break;
 8001354:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	2bff      	cmp	r3, #255	; 0xff
 800135a:	d801      	bhi.n	8001360 <HAL_GPIO_Init+0xec>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	e001      	b.n	8001364 <HAL_GPIO_Init+0xf0>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3304      	adds	r3, #4
 8001364:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	2bff      	cmp	r3, #255	; 0xff
 800136a:	d802      	bhi.n	8001372 <HAL_GPIO_Init+0xfe>
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	e002      	b.n	8001378 <HAL_GPIO_Init+0x104>
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	3b08      	subs	r3, #8
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	210f      	movs	r1, #15
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	fa01 f303 	lsl.w	r3, r1, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	401a      	ands	r2, r3
 800138a:	6a39      	ldr	r1, [r7, #32]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	fa01 f303 	lsl.w	r3, r1, r3
 8001392:	431a      	orrs	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 8096 	beq.w	80014d2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013a6:	4b59      	ldr	r3, [pc, #356]	; (800150c <HAL_GPIO_Init+0x298>)
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	4a58      	ldr	r2, [pc, #352]	; (800150c <HAL_GPIO_Init+0x298>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6193      	str	r3, [r2, #24]
 80013b2:	4b56      	ldr	r3, [pc, #344]	; (800150c <HAL_GPIO_Init+0x298>)
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013be:	4a54      	ldr	r2, [pc, #336]	; (8001510 <HAL_GPIO_Init+0x29c>)
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	089b      	lsrs	r3, r3, #2
 80013c4:	3302      	adds	r3, #2
 80013c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ca:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	f003 0303 	and.w	r3, r3, #3
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	220f      	movs	r2, #15
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	4013      	ands	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4b      	ldr	r2, [pc, #300]	; (8001514 <HAL_GPIO_Init+0x2a0>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d013      	beq.n	8001412 <HAL_GPIO_Init+0x19e>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4a      	ldr	r2, [pc, #296]	; (8001518 <HAL_GPIO_Init+0x2a4>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d00d      	beq.n	800140e <HAL_GPIO_Init+0x19a>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a49      	ldr	r2, [pc, #292]	; (800151c <HAL_GPIO_Init+0x2a8>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d007      	beq.n	800140a <HAL_GPIO_Init+0x196>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a48      	ldr	r2, [pc, #288]	; (8001520 <HAL_GPIO_Init+0x2ac>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d101      	bne.n	8001406 <HAL_GPIO_Init+0x192>
 8001402:	2303      	movs	r3, #3
 8001404:	e006      	b.n	8001414 <HAL_GPIO_Init+0x1a0>
 8001406:	2304      	movs	r3, #4
 8001408:	e004      	b.n	8001414 <HAL_GPIO_Init+0x1a0>
 800140a:	2302      	movs	r3, #2
 800140c:	e002      	b.n	8001414 <HAL_GPIO_Init+0x1a0>
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <HAL_GPIO_Init+0x1a0>
 8001412:	2300      	movs	r3, #0
 8001414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001416:	f002 0203 	and.w	r2, r2, #3
 800141a:	0092      	lsls	r2, r2, #2
 800141c:	4093      	lsls	r3, r2
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	4313      	orrs	r3, r2
 8001422:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001424:	493a      	ldr	r1, [pc, #232]	; (8001510 <HAL_GPIO_Init+0x29c>)
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	089b      	lsrs	r3, r3, #2
 800142a:	3302      	adds	r3, #2
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d006      	beq.n	800144c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800143e:	4b39      	ldr	r3, [pc, #228]	; (8001524 <HAL_GPIO_Init+0x2b0>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	4938      	ldr	r1, [pc, #224]	; (8001524 <HAL_GPIO_Init+0x2b0>)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	600b      	str	r3, [r1, #0]
 800144a:	e006      	b.n	800145a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800144c:	4b35      	ldr	r3, [pc, #212]	; (8001524 <HAL_GPIO_Init+0x2b0>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	43db      	mvns	r3, r3
 8001454:	4933      	ldr	r1, [pc, #204]	; (8001524 <HAL_GPIO_Init+0x2b0>)
 8001456:	4013      	ands	r3, r2
 8001458:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d006      	beq.n	8001474 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001466:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <HAL_GPIO_Init+0x2b0>)
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	492e      	ldr	r1, [pc, #184]	; (8001524 <HAL_GPIO_Init+0x2b0>)
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	4313      	orrs	r3, r2
 8001470:	604b      	str	r3, [r1, #4]
 8001472:	e006      	b.n	8001482 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001474:	4b2b      	ldr	r3, [pc, #172]	; (8001524 <HAL_GPIO_Init+0x2b0>)
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	43db      	mvns	r3, r3
 800147c:	4929      	ldr	r1, [pc, #164]	; (8001524 <HAL_GPIO_Init+0x2b0>)
 800147e:	4013      	ands	r3, r2
 8001480:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d006      	beq.n	800149c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800148e:	4b25      	ldr	r3, [pc, #148]	; (8001524 <HAL_GPIO_Init+0x2b0>)
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	4924      	ldr	r1, [pc, #144]	; (8001524 <HAL_GPIO_Init+0x2b0>)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	608b      	str	r3, [r1, #8]
 800149a:	e006      	b.n	80014aa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800149c:	4b21      	ldr	r3, [pc, #132]	; (8001524 <HAL_GPIO_Init+0x2b0>)
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	491f      	ldr	r1, [pc, #124]	; (8001524 <HAL_GPIO_Init+0x2b0>)
 80014a6:	4013      	ands	r3, r2
 80014a8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d006      	beq.n	80014c4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014b6:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <HAL_GPIO_Init+0x2b0>)
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	491a      	ldr	r1, [pc, #104]	; (8001524 <HAL_GPIO_Init+0x2b0>)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	60cb      	str	r3, [r1, #12]
 80014c2:	e006      	b.n	80014d2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014c4:	4b17      	ldr	r3, [pc, #92]	; (8001524 <HAL_GPIO_Init+0x2b0>)
 80014c6:	68da      	ldr	r2, [r3, #12]
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	4915      	ldr	r1, [pc, #84]	; (8001524 <HAL_GPIO_Init+0x2b0>)
 80014ce:	4013      	ands	r3, r2
 80014d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	3301      	adds	r3, #1
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	fa22 f303 	lsr.w	r3, r2, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f47f aed0 	bne.w	8001288 <HAL_GPIO_Init+0x14>
  }
}
 80014e8:	bf00      	nop
 80014ea:	372c      	adds	r7, #44	; 0x2c
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	10210000 	.word	0x10210000
 80014f8:	10110000 	.word	0x10110000
 80014fc:	10120000 	.word	0x10120000
 8001500:	10310000 	.word	0x10310000
 8001504:	10320000 	.word	0x10320000
 8001508:	10220000 	.word	0x10220000
 800150c:	40021000 	.word	0x40021000
 8001510:	40010000 	.word	0x40010000
 8001514:	40010800 	.word	0x40010800
 8001518:	40010c00 	.word	0x40010c00
 800151c:	40011000 	.word	0x40011000
 8001520:	40011400 	.word	0x40011400
 8001524:	40010400 	.word	0x40010400

08001528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	807b      	strh	r3, [r7, #2]
 8001534:	4613      	mov	r3, r2
 8001536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001538:	787b      	ldrb	r3, [r7, #1]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800153e:	887a      	ldrh	r2, [r7, #2]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001544:	e003      	b.n	800154e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001546:	887b      	ldrh	r3, [r7, #2]
 8001548:	041a      	lsls	r2, r3, #16
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	611a      	str	r2, [r3, #16]
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001564:	695a      	ldr	r2, [r3, #20]
 8001566:	88fb      	ldrh	r3, [r7, #6]
 8001568:	4013      	ands	r3, r2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d006      	beq.n	800157c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff f85a 	bl	8000630 <HAL_GPIO_EXTI_Callback>
  }
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40010400 	.word	0x40010400

08001588 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <HAL_PWR_EnableBkUpAccess+0x14>)
 800158e:	2201      	movs	r2, #1
 8001590:	601a      	str	r2, [r3, #0]
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	420e0020 	.word	0x420e0020

080015a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e26c      	b.n	8001a8c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 8087 	beq.w	80016ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015c0:	4b92      	ldr	r3, [pc, #584]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 030c 	and.w	r3, r3, #12
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	d00c      	beq.n	80015e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015cc:	4b8f      	ldr	r3, [pc, #572]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 030c 	and.w	r3, r3, #12
 80015d4:	2b08      	cmp	r3, #8
 80015d6:	d112      	bne.n	80015fe <HAL_RCC_OscConfig+0x5e>
 80015d8:	4b8c      	ldr	r3, [pc, #560]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e4:	d10b      	bne.n	80015fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e6:	4b89      	ldr	r3, [pc, #548]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d06c      	beq.n	80016cc <HAL_RCC_OscConfig+0x12c>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d168      	bne.n	80016cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e246      	b.n	8001a8c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001606:	d106      	bne.n	8001616 <HAL_RCC_OscConfig+0x76>
 8001608:	4b80      	ldr	r3, [pc, #512]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a7f      	ldr	r2, [pc, #508]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 800160e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	e02e      	b.n	8001674 <HAL_RCC_OscConfig+0xd4>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10c      	bne.n	8001638 <HAL_RCC_OscConfig+0x98>
 800161e:	4b7b      	ldr	r3, [pc, #492]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a7a      	ldr	r2, [pc, #488]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	4b78      	ldr	r3, [pc, #480]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a77      	ldr	r2, [pc, #476]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e01d      	b.n	8001674 <HAL_RCC_OscConfig+0xd4>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001640:	d10c      	bne.n	800165c <HAL_RCC_OscConfig+0xbc>
 8001642:	4b72      	ldr	r3, [pc, #456]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a71      	ldr	r2, [pc, #452]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	4b6f      	ldr	r3, [pc, #444]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a6e      	ldr	r2, [pc, #440]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	e00b      	b.n	8001674 <HAL_RCC_OscConfig+0xd4>
 800165c:	4b6b      	ldr	r3, [pc, #428]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a6a      	ldr	r2, [pc, #424]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b68      	ldr	r3, [pc, #416]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a67      	ldr	r2, [pc, #412]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 800166e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001672:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d013      	beq.n	80016a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff faac 	bl	8000bd8 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001684:	f7ff faa8 	bl	8000bd8 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	; 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e1fa      	b.n	8001a8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001696:	4b5d      	ldr	r3, [pc, #372]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0xe4>
 80016a2:	e014      	b.n	80016ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fa98 	bl	8000bd8 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ac:	f7ff fa94 	bl	8000bd8 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	; 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e1e6      	b.n	8001a8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016be:	4b53      	ldr	r3, [pc, #332]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x10c>
 80016ca:	e000      	b.n	80016ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d063      	beq.n	80017a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016da:	4b4c      	ldr	r3, [pc, #304]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00b      	beq.n	80016fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016e6:	4b49      	ldr	r3, [pc, #292]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 030c 	and.w	r3, r3, #12
 80016ee:	2b08      	cmp	r3, #8
 80016f0:	d11c      	bne.n	800172c <HAL_RCC_OscConfig+0x18c>
 80016f2:	4b46      	ldr	r3, [pc, #280]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d116      	bne.n	800172c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016fe:	4b43      	ldr	r3, [pc, #268]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d005      	beq.n	8001716 <HAL_RCC_OscConfig+0x176>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d001      	beq.n	8001716 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e1ba      	b.n	8001a8c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001716:	4b3d      	ldr	r3, [pc, #244]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	4939      	ldr	r1, [pc, #228]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001726:	4313      	orrs	r3, r2
 8001728:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172a:	e03a      	b.n	80017a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d020      	beq.n	8001776 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001734:	4b36      	ldr	r3, [pc, #216]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 8001736:	2201      	movs	r2, #1
 8001738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173a:	f7ff fa4d 	bl	8000bd8 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001742:	f7ff fa49 	bl	8000bd8 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e19b      	b.n	8001a8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001754:	4b2d      	ldr	r3, [pc, #180]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001760:	4b2a      	ldr	r3, [pc, #168]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	4927      	ldr	r1, [pc, #156]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001770:	4313      	orrs	r3, r2
 8001772:	600b      	str	r3, [r1, #0]
 8001774:	e015      	b.n	80017a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001776:	4b26      	ldr	r3, [pc, #152]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7ff fa2c 	bl	8000bd8 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001784:	f7ff fa28 	bl	8000bd8 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e17a      	b.n	8001a8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001796:	4b1d      	ldr	r3, [pc, #116]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d03a      	beq.n	8001824 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d019      	beq.n	80017ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <HAL_RCC_OscConfig+0x274>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017bc:	f7ff fa0c 	bl	8000bd8 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c4:	f7ff fa08 	bl	8000bd8 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e15a      	b.n	8001a8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d6:	4b0d      	ldr	r3, [pc, #52]	; (800180c <HAL_RCC_OscConfig+0x26c>)
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017e2:	2001      	movs	r0, #1
 80017e4:	f000 fb0a 	bl	8001dfc <RCC_Delay>
 80017e8:	e01c      	b.n	8001824 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ea:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <HAL_RCC_OscConfig+0x274>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f0:	f7ff f9f2 	bl	8000bd8 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f6:	e00f      	b.n	8001818 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f8:	f7ff f9ee 	bl	8000bd8 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d908      	bls.n	8001818 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e140      	b.n	8001a8c <HAL_RCC_OscConfig+0x4ec>
 800180a:	bf00      	nop
 800180c:	40021000 	.word	0x40021000
 8001810:	42420000 	.word	0x42420000
 8001814:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001818:	4b9e      	ldr	r3, [pc, #632]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1e9      	bne.n	80017f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 80a6 	beq.w	800197e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001832:	2300      	movs	r3, #0
 8001834:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001836:	4b97      	ldr	r3, [pc, #604]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10d      	bne.n	800185e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	4b94      	ldr	r3, [pc, #592]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	4a93      	ldr	r2, [pc, #588]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 8001848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184c:	61d3      	str	r3, [r2, #28]
 800184e:	4b91      	ldr	r3, [pc, #580]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800185a:	2301      	movs	r3, #1
 800185c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185e:	4b8e      	ldr	r3, [pc, #568]	; (8001a98 <HAL_RCC_OscConfig+0x4f8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001866:	2b00      	cmp	r3, #0
 8001868:	d118      	bne.n	800189c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800186a:	4b8b      	ldr	r3, [pc, #556]	; (8001a98 <HAL_RCC_OscConfig+0x4f8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a8a      	ldr	r2, [pc, #552]	; (8001a98 <HAL_RCC_OscConfig+0x4f8>)
 8001870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001874:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001876:	f7ff f9af 	bl	8000bd8 <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800187e:	f7ff f9ab 	bl	8000bd8 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b64      	cmp	r3, #100	; 0x64
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e0fd      	b.n	8001a8c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001890:	4b81      	ldr	r3, [pc, #516]	; (8001a98 <HAL_RCC_OscConfig+0x4f8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0f0      	beq.n	800187e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d106      	bne.n	80018b2 <HAL_RCC_OscConfig+0x312>
 80018a4:	4b7b      	ldr	r3, [pc, #492]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	4a7a      	ldr	r2, [pc, #488]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	6213      	str	r3, [r2, #32]
 80018b0:	e02d      	b.n	800190e <HAL_RCC_OscConfig+0x36e>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d10c      	bne.n	80018d4 <HAL_RCC_OscConfig+0x334>
 80018ba:	4b76      	ldr	r3, [pc, #472]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	4a75      	ldr	r2, [pc, #468]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 80018c0:	f023 0301 	bic.w	r3, r3, #1
 80018c4:	6213      	str	r3, [r2, #32]
 80018c6:	4b73      	ldr	r3, [pc, #460]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	4a72      	ldr	r2, [pc, #456]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 80018cc:	f023 0304 	bic.w	r3, r3, #4
 80018d0:	6213      	str	r3, [r2, #32]
 80018d2:	e01c      	b.n	800190e <HAL_RCC_OscConfig+0x36e>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	2b05      	cmp	r3, #5
 80018da:	d10c      	bne.n	80018f6 <HAL_RCC_OscConfig+0x356>
 80018dc:	4b6d      	ldr	r3, [pc, #436]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	4a6c      	ldr	r2, [pc, #432]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 80018e2:	f043 0304 	orr.w	r3, r3, #4
 80018e6:	6213      	str	r3, [r2, #32]
 80018e8:	4b6a      	ldr	r3, [pc, #424]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	4a69      	ldr	r2, [pc, #420]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6213      	str	r3, [r2, #32]
 80018f4:	e00b      	b.n	800190e <HAL_RCC_OscConfig+0x36e>
 80018f6:	4b67      	ldr	r3, [pc, #412]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	4a66      	ldr	r2, [pc, #408]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 80018fc:	f023 0301 	bic.w	r3, r3, #1
 8001900:	6213      	str	r3, [r2, #32]
 8001902:	4b64      	ldr	r3, [pc, #400]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	4a63      	ldr	r2, [pc, #396]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 8001908:	f023 0304 	bic.w	r3, r3, #4
 800190c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d015      	beq.n	8001942 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001916:	f7ff f95f 	bl	8000bd8 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191c:	e00a      	b.n	8001934 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191e:	f7ff f95b 	bl	8000bd8 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	f241 3288 	movw	r2, #5000	; 0x1388
 800192c:	4293      	cmp	r3, r2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e0ab      	b.n	8001a8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001934:	4b57      	ldr	r3, [pc, #348]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0ee      	beq.n	800191e <HAL_RCC_OscConfig+0x37e>
 8001940:	e014      	b.n	800196c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001942:	f7ff f949 	bl	8000bd8 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001948:	e00a      	b.n	8001960 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194a:	f7ff f945 	bl	8000bd8 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	f241 3288 	movw	r2, #5000	; 0x1388
 8001958:	4293      	cmp	r3, r2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e095      	b.n	8001a8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001960:	4b4c      	ldr	r3, [pc, #304]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1ee      	bne.n	800194a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800196c:	7dfb      	ldrb	r3, [r7, #23]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d105      	bne.n	800197e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001972:	4b48      	ldr	r3, [pc, #288]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	4a47      	ldr	r2, [pc, #284]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 8001978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800197c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 8081 	beq.w	8001a8a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001988:	4b42      	ldr	r3, [pc, #264]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 030c 	and.w	r3, r3, #12
 8001990:	2b08      	cmp	r3, #8
 8001992:	d061      	beq.n	8001a58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69db      	ldr	r3, [r3, #28]
 8001998:	2b02      	cmp	r3, #2
 800199a:	d146      	bne.n	8001a2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199c:	4b3f      	ldr	r3, [pc, #252]	; (8001a9c <HAL_RCC_OscConfig+0x4fc>)
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a2:	f7ff f919 	bl	8000bd8 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019aa:	f7ff f915 	bl	8000bd8 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e067      	b.n	8001a8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019bc:	4b35      	ldr	r3, [pc, #212]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1f0      	bne.n	80019aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d0:	d108      	bne.n	80019e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019d2:	4b30      	ldr	r3, [pc, #192]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	492d      	ldr	r1, [pc, #180]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019e4:	4b2b      	ldr	r3, [pc, #172]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a19      	ldr	r1, [r3, #32]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f4:	430b      	orrs	r3, r1
 80019f6:	4927      	ldr	r1, [pc, #156]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019fc:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <HAL_RCC_OscConfig+0x4fc>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a02:	f7ff f8e9 	bl	8000bd8 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0a:	f7ff f8e5 	bl	8000bd8 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e037      	b.n	8001a8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f0      	beq.n	8001a0a <HAL_RCC_OscConfig+0x46a>
 8001a28:	e02f      	b.n	8001a8a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2a:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <HAL_RCC_OscConfig+0x4fc>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7ff f8d2 	bl	8000bd8 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a38:	f7ff f8ce 	bl	8000bd8 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e020      	b.n	8001a8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a4a:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x498>
 8001a56:	e018      	b.n	8001a8a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d101      	bne.n	8001a64 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e013      	b.n	8001a8c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <HAL_RCC_OscConfig+0x4f4>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d106      	bne.n	8001a86 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d001      	beq.n	8001a8a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40007000 	.word	0x40007000
 8001a9c:	42420060 	.word	0x42420060

08001aa0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0d0      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b6a      	ldr	r3, [pc, #424]	; (8001c60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d910      	bls.n	8001ae4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b67      	ldr	r3, [pc, #412]	; (8001c60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f023 0207 	bic.w	r2, r3, #7
 8001aca:	4965      	ldr	r1, [pc, #404]	; (8001c60 <HAL_RCC_ClockConfig+0x1c0>)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad2:	4b63      	ldr	r3, [pc, #396]	; (8001c60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0b8      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d020      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001afc:	4b59      	ldr	r3, [pc, #356]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	4a58      	ldr	r2, [pc, #352]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b14:	4b53      	ldr	r3, [pc, #332]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	4a52      	ldr	r2, [pc, #328]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b20:	4b50      	ldr	r3, [pc, #320]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	494d      	ldr	r1, [pc, #308]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d040      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d107      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	4b47      	ldr	r3, [pc, #284]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d115      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e07f      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d107      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5e:	4b41      	ldr	r3, [pc, #260]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d109      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e073      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6e:	4b3d      	ldr	r3, [pc, #244]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e06b      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b7e:	4b39      	ldr	r3, [pc, #228]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f023 0203 	bic.w	r2, r3, #3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4936      	ldr	r1, [pc, #216]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b90:	f7ff f822 	bl	8000bd8 <HAL_GetTick>
 8001b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b96:	e00a      	b.n	8001bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b98:	f7ff f81e 	bl	8000bd8 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e053      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bae:	4b2d      	ldr	r3, [pc, #180]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 020c 	and.w	r2, r3, #12
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d1eb      	bne.n	8001b98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b27      	ldr	r3, [pc, #156]	; (8001c60 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d210      	bcs.n	8001bf0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f023 0207 	bic.w	r2, r3, #7
 8001bd6:	4922      	ldr	r1, [pc, #136]	; (8001c60 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bde:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <HAL_RCC_ClockConfig+0x1c0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e032      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d008      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bfc:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	4916      	ldr	r1, [pc, #88]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d009      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c1a:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	490e      	ldr	r1, [pc, #56]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c2e:	f000 f821 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 8001c32:	4601      	mov	r1, r0
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <HAL_RCC_ClockConfig+0x1c8>)
 8001c40:	5cd3      	ldrb	r3, [r2, r3]
 8001c42:	fa21 f303 	lsr.w	r3, r1, r3
 8001c46:	4a09      	ldr	r2, [pc, #36]	; (8001c6c <HAL_RCC_ClockConfig+0x1cc>)
 8001c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_RCC_ClockConfig+0x1d0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fe9a 	bl	8000988 <HAL_InitTick>

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40022000 	.word	0x40022000
 8001c64:	40021000 	.word	0x40021000
 8001c68:	08005df8 	.word	0x08005df8
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	20000004 	.word	0x20000004

08001c74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c74:	b490      	push	{r4, r7}
 8001c76:	b08a      	sub	sp, #40	; 0x28
 8001c78:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c7a:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c7c:	1d3c      	adds	r4, r7, #4
 8001c7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c84:	4b28      	ldr	r3, [pc, #160]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
 8001c92:	2300      	movs	r3, #0
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c9e:	4b23      	ldr	r3, [pc, #140]	; (8001d2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d002      	beq.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x40>
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d003      	beq.n	8001cba <HAL_RCC_GetSysClockFreq+0x46>
 8001cb2:	e02d      	b.n	8001d10 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cb6:	623b      	str	r3, [r7, #32]
      break;
 8001cb8:	e02d      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	0c9b      	lsrs	r3, r3, #18
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cc6:	4413      	add	r3, r2
 8001cc8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ccc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d013      	beq.n	8001d00 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cd8:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	0c5b      	lsrs	r3, r3, #17
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001cec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	4a0f      	ldr	r2, [pc, #60]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cf2:	fb02 f203 	mul.w	r2, r2, r3
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfe:	e004      	b.n	8001d0a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	4a0c      	ldr	r2, [pc, #48]	; (8001d34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d04:	fb02 f303 	mul.w	r3, r2, r3
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	623b      	str	r3, [r7, #32]
      break;
 8001d0e:	e002      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d10:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d12:	623b      	str	r3, [r7, #32]
      break;
 8001d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d16:	6a3b      	ldr	r3, [r7, #32]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3728      	adds	r7, #40	; 0x28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc90      	pop	{r4, r7}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	08005dc8 	.word	0x08005dc8
 8001d28:	08005dd8 	.word	0x08005dd8
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	007a1200 	.word	0x007a1200
 8001d34:	003d0900 	.word	0x003d0900

08001d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d3c:	4b02      	ldr	r3, [pc, #8]	; (8001d48 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	20000000 	.word	0x20000000

08001d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d50:	f7ff fff2 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d54:	4601      	mov	r1, r0
 8001d56:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	0a1b      	lsrs	r3, r3, #8
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	4a03      	ldr	r2, [pc, #12]	; (8001d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d62:	5cd3      	ldrb	r3, [r2, r3]
 8001d64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	08005e08 	.word	0x08005e08

08001d74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d78:	f7ff ffde 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d7c:	4601      	mov	r1, r0
 8001d7e:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	0adb      	lsrs	r3, r3, #11
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	4a03      	ldr	r2, [pc, #12]	; (8001d98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d8a:	5cd3      	ldrb	r3, [r2, r3]
 8001d8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40021000 	.word	0x40021000
 8001d98:	08005e08 	.word	0x08005e08

08001d9c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	220f      	movs	r2, #15
 8001daa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001dac:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <HAL_RCC_GetClockConfig+0x58>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 0203 	and.w	r2, r3, #3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001db8:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <HAL_RCC_GetClockConfig+0x58>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_RCC_GetClockConfig+0x58>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <HAL_RCC_GetClockConfig+0x58>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	08db      	lsrs	r3, r3, #3
 8001dd6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_RCC_GetClockConfig+0x5c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0207 	and.w	r2, r3, #7
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40022000 	.word	0x40022000

08001dfc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e04:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <RCC_Delay+0x34>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <RCC_Delay+0x38>)
 8001e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0e:	0a5b      	lsrs	r3, r3, #9
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	fb02 f303 	mul.w	r3, r2, r3
 8001e16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e18:	bf00      	nop
  }
  while (Delay --);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	1e5a      	subs	r2, r3, #1
 8001e1e:	60fa      	str	r2, [r7, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1f9      	bne.n	8001e18 <RCC_Delay+0x1c>
}
 8001e24:	bf00      	nop
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000000 	.word	0x20000000
 8001e34:	10624dd3 	.word	0x10624dd3

08001e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d07d      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001e54:	2300      	movs	r3, #0
 8001e56:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e58:	4b4f      	ldr	r3, [pc, #316]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10d      	bne.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e64:	4b4c      	ldr	r3, [pc, #304]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	4a4b      	ldr	r2, [pc, #300]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	61d3      	str	r3, [r2, #28]
 8001e70:	4b49      	ldr	r3, [pc, #292]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e72:	69db      	ldr	r3, [r3, #28]
 8001e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e80:	4b46      	ldr	r3, [pc, #280]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d118      	bne.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e8c:	4b43      	ldr	r3, [pc, #268]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a42      	ldr	r2, [pc, #264]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e98:	f7fe fe9e 	bl	8000bd8 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea0:	f7fe fe9a 	bl	8000bd8 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b64      	cmp	r3, #100	; 0x64
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e06d      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb2:	4b3a      	ldr	r3, [pc, #232]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ebe:	4b36      	ldr	r3, [pc, #216]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ec6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d02e      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d027      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001edc:	4b2e      	ldr	r3, [pc, #184]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ee4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ee6:	4b2e      	ldr	r3, [pc, #184]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eec:	4b2c      	ldr	r3, [pc, #176]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ef2:	4a29      	ldr	r2, [pc, #164]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d014      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f02:	f7fe fe69 	bl	8000bd8 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f08:	e00a      	b.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0a:	f7fe fe65 	bl	8000bd8 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e036      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f20:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0ee      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f2c:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	4917      	ldr	r1, [pc, #92]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f3e:	7dfb      	ldrb	r3, [r7, #23]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d105      	bne.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f44:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	4a13      	ldr	r2, [pc, #76]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f5c:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	490b      	ldr	r1, [pc, #44]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0310 	and.w	r3, r3, #16
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d008      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f7a:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	4904      	ldr	r1, [pc, #16]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40007000 	.word	0x40007000
 8001fa0:	42420440 	.word	0x42420440

08001fa4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	b08d      	sub	sp, #52	; 0x34
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fac:	4b55      	ldr	r3, [pc, #340]	; (8002104 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001fae:	f107 040c 	add.w	r4, r7, #12
 8001fb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fb8:	4b53      	ldr	r3, [pc, #332]	; (8002108 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d07f      	beq.n	80020d8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8001fd8:	2b10      	cmp	r3, #16
 8001fda:	d002      	beq.n	8001fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d048      	beq.n	8002072 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001fe0:	e08b      	b.n	80020fa <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8001fe2:	4b4a      	ldr	r3, [pc, #296]	; (800210c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001fe8:	4b48      	ldr	r3, [pc, #288]	; (800210c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d07f      	beq.n	80020f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	0c9b      	lsrs	r3, r3, #18
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002000:	4413      	add	r3, r2
 8002002:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002006:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d018      	beq.n	8002044 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002012:	4b3e      	ldr	r3, [pc, #248]	; (800210c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	0c5b      	lsrs	r3, r3, #17
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002020:	4413      	add	r3, r2
 8002022:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00d      	beq.n	800204e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002032:	4a37      	ldr	r2, [pc, #220]	; (8002110 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	fbb2 f2f3 	udiv	r2, r2, r3
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	fb02 f303 	mul.w	r3, r2, r3
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002042:	e004      	b.n	800204e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	4a33      	ldr	r2, [pc, #204]	; (8002114 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002048:	fb02 f303 	mul.w	r3, r2, r3
 800204c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800204e:	4b2f      	ldr	r3, [pc, #188]	; (800210c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002056:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800205a:	d102      	bne.n	8002062 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 800205c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002060:	e048      	b.n	80020f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8002062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4a2c      	ldr	r2, [pc, #176]	; (8002118 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002068:	fba2 2303 	umull	r2, r3, r2, r3
 800206c:	085b      	lsrs	r3, r3, #1
 800206e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002070:	e040      	b.n	80020f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8002072:	4b26      	ldr	r3, [pc, #152]	; (800210c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800207e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002082:	d108      	bne.n	8002096 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800208e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28
 8002094:	e01f      	b.n	80020d6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020a0:	d109      	bne.n	80020b6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80020a2:	4b1a      	ldr	r3, [pc, #104]	; (800210c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80020ae:	f649 4340 	movw	r3, #40000	; 0x9c40
 80020b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80020b4:	e00f      	b.n	80020d6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020c0:	d11a      	bne.n	80020f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80020c2:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d014      	beq.n	80020f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80020ce:	f24f 4324 	movw	r3, #62500	; 0xf424
 80020d2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80020d4:	e010      	b.n	80020f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80020d6:	e00f      	b.n	80020f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80020d8:	f7ff fe4c 	bl	8001d74 <HAL_RCC_GetPCLK2Freq>
 80020dc:	4602      	mov	r2, r0
 80020de:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	0b9b      	lsrs	r3, r3, #14
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	3301      	adds	r3, #1
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80020f2:	e002      	b.n	80020fa <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80020f4:	bf00      	nop
 80020f6:	e000      	b.n	80020fa <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80020f8:	bf00      	nop
    }
  }
  return (frequency);
 80020fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3734      	adds	r7, #52	; 0x34
 8002100:	46bd      	mov	sp, r7
 8002102:	bd90      	pop	{r4, r7, pc}
 8002104:	08005ddc 	.word	0x08005ddc
 8002108:	08005dec 	.word	0x08005dec
 800210c:	40021000 	.word	0x40021000
 8002110:	007a1200 	.word	0x007a1200
 8002114:	003d0900 	.word	0x003d0900
 8002118:	aaaaaaab 	.word	0xaaaaaaab

0800211c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e084      	b.n	800223c <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	7c5b      	ldrb	r3, [r3, #17]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d105      	bne.n	8002148 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7fe fb52 	bl	80007ec <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f87a 	bl	8002248 <HAL_RTC_WaitForSynchro>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d004      	beq.n	8002164 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2204      	movs	r2, #4
 800215e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e06b      	b.n	800223c <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f89c 	bl	80022a2 <RTC_EnterInitMode>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d004      	beq.n	800217a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2204      	movs	r2, #4
 8002174:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e060      	b.n	800223c <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0207 	bic.w	r2, r2, #7
 8002188:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002192:	4b2c      	ldr	r3, [pc, #176]	; (8002244 <HAL_RTC_Init+0x128>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a2b      	ldr	r2, [pc, #172]	; (8002244 <HAL_RTC_Init+0x128>)
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800219e:	4b29      	ldr	r3, [pc, #164]	; (8002244 <HAL_RTC_Init+0x128>)
 80021a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a2:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	4926      	ldr	r1, [pc, #152]	; (8002244 <HAL_RTC_Init+0x128>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b8:	d003      	beq.n	80021c2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	e00e      	b.n	80021e0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80021c2:	2001      	movs	r0, #1
 80021c4:	f7ff feee 	bl	8001fa4 <HAL_RCCEx_GetPeriphCLKFreq>
 80021c8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d104      	bne.n	80021da <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2204      	movs	r2, #4
 80021d4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e030      	b.n	800223c <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	3b01      	subs	r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f023 010f 	bic.w	r1, r3, #15
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	0c1a      	lsrs	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	0c1b      	lsrs	r3, r3, #16
 80021fe:	041b      	lsls	r3, r3, #16
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	b291      	uxth	r1, r2
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6812      	ldr	r2, [r2, #0]
 8002208:	430b      	orrs	r3, r1
 800220a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f870 	bl	80022f2 <RTC_ExitInitMode>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d004      	beq.n	8002222 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2204      	movs	r2, #4
 800221c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e00c      	b.n	800223c <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800223a:	2300      	movs	r3, #0
  }
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40006c00 	.word	0x40006c00

08002248 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e01d      	b.n	800229a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0208 	bic.w	r2, r2, #8
 800226c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800226e:	f7fe fcb3 	bl	8000bd8 <HAL_GetTick>
 8002272:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002274:	e009      	b.n	800228a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002276:	f7fe fcaf 	bl	8000bd8 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002284:	d901      	bls.n	800228a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e007      	b.n	800229a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0ee      	beq.n	8002276 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b084      	sub	sp, #16
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80022ae:	f7fe fc93 	bl	8000bd8 <HAL_GetTick>
 80022b2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80022b4:	e009      	b.n	80022ca <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80022b6:	f7fe fc8f 	bl	8000bd8 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022c4:	d901      	bls.n	80022ca <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e00f      	b.n	80022ea <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0320 	and.w	r3, r3, #32
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0ee      	beq.n	80022b6 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0210 	orr.w	r2, r2, #16
 80022e6:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b084      	sub	sp, #16
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0210 	bic.w	r2, r2, #16
 800230c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800230e:	f7fe fc63 	bl	8000bd8 <HAL_GetTick>
 8002312:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002314:	e009      	b.n	800232a <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002316:	f7fe fc5f 	bl	8000bd8 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002324:	d901      	bls.n	800232a <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e007      	b.n	800233a <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 0320 	and.w	r3, r3, #32
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0ee      	beq.n	8002316 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e053      	b.n	80023fc <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d106      	bne.n	8002374 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7fe fa60 	bl	8000834 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2202      	movs	r2, #2
 8002378:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800238a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	431a      	orrs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	ea42 0103 	orr.w	r1, r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	0c1a      	lsrs	r2, r3, #16
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f002 0204 	and.w	r2, r2, #4
 80023da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	69da      	ldr	r2, [r3, #28]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	4613      	mov	r3, r2
 8002410:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_SPI_Transmit_DMA+0x20>
 8002420:	2302      	movs	r3, #2
 8002422:	e093      	b.n	800254c <HAL_SPI_Transmit_DMA+0x148>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b01      	cmp	r3, #1
 8002436:	d002      	beq.n	800243e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002438:	2302      	movs	r3, #2
 800243a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800243c:	e081      	b.n	8002542 <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d002      	beq.n	800244a <HAL_SPI_Transmit_DMA+0x46>
 8002444:	88fb      	ldrh	r3, [r7, #6]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d102      	bne.n	8002450 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800244e:	e078      	b.n	8002542 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2203      	movs	r2, #3
 8002454:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	88fa      	ldrh	r2, [r7, #6]
 8002468:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	88fa      	ldrh	r2, [r7, #6]
 800246e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002496:	d107      	bne.n	80024a8 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ac:	4a29      	ldr	r2, [pc, #164]	; (8002554 <HAL_SPI_Transmit_DMA+0x150>)
 80024ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b4:	4a28      	ldr	r2, [pc, #160]	; (8002558 <HAL_SPI_Transmit_DMA+0x154>)
 80024b6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024bc:	4a27      	ldr	r2, [pc, #156]	; (800255c <HAL_SPI_Transmit_DMA+0x158>)
 80024be:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c4:	2200      	movs	r2, #0
 80024c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d0:	4619      	mov	r1, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	330c      	adds	r3, #12
 80024d8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024de:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80024e0:	f7fe fcbe 	bl	8000e60 <HAL_DMA_Start_IT>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00c      	beq.n	8002504 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ee:	f043 0210 	orr.w	r2, r3, #16
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002502:	e01e      	b.n	8002542 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250e:	2b40      	cmp	r3, #64	; 0x40
 8002510:	d007      	beq.n	8002522 <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002520:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 0220 	orr.w	r2, r2, #32
 8002530:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0202 	orr.w	r2, r2, #2
 8002540:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800254a:	7dfb      	ldrb	r3, [r7, #23]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	0800280d 	.word	0x0800280d
 8002558:	08002767 	.word	0x08002767
 800255c:	08002829 	.word	0x08002829

08002560 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	099b      	lsrs	r3, r3, #6
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10f      	bne.n	80025a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00a      	beq.n	80025a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	099b      	lsrs	r3, r3, #6
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d004      	beq.n	80025a4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	4798      	blx	r3
    return;
 80025a2:	e0bf      	b.n	8002724 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	085b      	lsrs	r3, r3, #1
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00a      	beq.n	80025c6 <HAL_SPI_IRQHandler+0x66>
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	09db      	lsrs	r3, r3, #7
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d004      	beq.n	80025c6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	4798      	blx	r3
    return;
 80025c4:	e0ae      	b.n	8002724 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	095b      	lsrs	r3, r3, #5
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <HAL_SPI_IRQHandler+0x80>
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	099b      	lsrs	r3, r3, #6
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 80a2 	beq.w	8002724 <HAL_SPI_IRQHandler+0x1c4>
       && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 809b 	beq.w	8002724 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	099b      	lsrs	r3, r3, #6
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d023      	beq.n	8002642 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b03      	cmp	r3, #3
 8002604:	d011      	beq.n	800262a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260a:	f043 0204 	orr.w	r2, r3, #4
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	e00b      	b.n	8002642 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	693b      	ldr	r3, [r7, #16]
        return;
 8002640:	e070      	b.n	8002724 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	095b      	lsrs	r3, r3, #5
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d014      	beq.n	8002678 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002652:	f043 0201 	orr.w	r2, r3, #1
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267c:	2b00      	cmp	r3, #0
 800267e:	d050      	beq.n	8002722 <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800268e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d104      	bne.n	80026ac <HAL_SPI_IRQHandler+0x14c>
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d034      	beq.n	8002716 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0203 	bic.w	r2, r2, #3
 80026ba:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d011      	beq.n	80026e8 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c8:	4a18      	ldr	r2, [pc, #96]	; (800272c <HAL_SPI_IRQHandler+0x1cc>)
 80026ca:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fe fc25 	bl	8000f20 <HAL_DMA_Abort_IT>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d016      	beq.n	800271e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f4:	4a0d      	ldr	r2, [pc, #52]	; (800272c <HAL_SPI_IRQHandler+0x1cc>)
 80026f6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fe fc0f 	bl	8000f20 <HAL_DMA_Abort_IT>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00a      	beq.n	800271e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002714:	e003      	b.n	800271e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f81c 	bl	8002754 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800271c:	e000      	b.n	8002720 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800271e:	bf00      	nop
    return;
 8002720:	bf00      	nop
 8002722:	bf00      	nop
  }
}
 8002724:	3720      	adds	r7, #32
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	08002869 	.word	0x08002869

08002730 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr

08002742 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr

08002754 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr

08002766 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b086      	sub	sp, #24
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002774:	f7fe fa30 	bl	8000bd8 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0320 	and.w	r3, r3, #32
 8002784:	2b20      	cmp	r3, #32
 8002786:	d03b      	beq.n	8002800 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0220 	bic.w	r2, r2, #32
 8002796:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0202 	bic.w	r2, r2, #2
 80027a6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	2164      	movs	r1, #100	; 0x64
 80027ac:	6978      	ldr	r0, [r7, #20]
 80027ae:	f000 f8d9 	bl	8002964 <SPI_EndRxTxTransaction>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027bc:	f043 0220 	orr.w	r2, r3, #32
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10a      	bne.n	80027e2 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2200      	movs	r2, #0
 80027e6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80027f8:	6978      	ldr	r0, [r7, #20]
 80027fa:	f7ff ffab 	bl	8002754 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80027fe:	e002      	b.n	8002806 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002800:	6978      	ldr	r0, [r7, #20]
 8002802:	f7ff ff95 	bl	8002730 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f7ff ff91 	bl	8002742 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002820:	bf00      	nop
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0203 	bic.w	r2, r2, #3
 8002844:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284a:	f043 0210 	orr.w	r2, r3, #16
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f7ff ff7a 	bl	8002754 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002860:	bf00      	nop
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f7ff ff66 	bl	8002754 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	4613      	mov	r3, r2
 800289e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028a0:	e04c      	b.n	800293c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a8:	d048      	beq.n	800293c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80028aa:	f7fe f995 	bl	8000bd8 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d902      	bls.n	80028c0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d13d      	bne.n	800293c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028d8:	d111      	bne.n	80028fe <SPI_WaitFlagStateUntilTimeout+0x6e>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028e2:	d004      	beq.n	80028ee <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ec:	d107      	bne.n	80028fe <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002906:	d10f      	bne.n	8002928 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002926:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e00f      	b.n	800295c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	4013      	ands	r3, r2
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	429a      	cmp	r2, r3
 800294a:	bf0c      	ite	eq
 800294c:	2301      	moveq	r3, #1
 800294e:	2300      	movne	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	429a      	cmp	r2, r3
 8002958:	d1a3      	bne.n	80028a2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af02      	add	r7, sp, #8
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2200      	movs	r2, #0
 8002978:	2180      	movs	r1, #128	; 0x80
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f7ff ff88 	bl	8002890 <SPI_WaitFlagStateUntilTimeout>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d007      	beq.n	8002996 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298a:	f043 0220 	orr.w	r2, r3, #32
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e000      	b.n	8002998 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e01d      	b.n	80029ee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f815 	bl	80029f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2202      	movs	r2, #2
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3304      	adds	r3, #4
 80029dc:	4619      	mov	r1, r3
 80029de:	4610      	mov	r0, r2
 80029e0:	f000 f962 	bl	8002ca8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2b06      	cmp	r3, #6
 8002a30:	d007      	beq.n	8002a42 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0201 	orr.w	r2, r2, #1
 8002a40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d122      	bne.n	8002aaa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d11b      	bne.n	8002aaa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f06f 0202 	mvn.w	r2, #2
 8002a7a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f8ed 	bl	8002c70 <HAL_TIM_IC_CaptureCallback>
 8002a96:	e005      	b.n	8002aa4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f8e0 	bl	8002c5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f8ef 	bl	8002c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d122      	bne.n	8002afe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d11b      	bne.n	8002afe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f06f 0204 	mvn.w	r2, #4
 8002ace:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f8c3 	bl	8002c70 <HAL_TIM_IC_CaptureCallback>
 8002aea:	e005      	b.n	8002af8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f8b6 	bl	8002c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f8c5 	bl	8002c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d122      	bne.n	8002b52 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d11b      	bne.n	8002b52 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f06f 0208 	mvn.w	r2, #8
 8002b22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2204      	movs	r2, #4
 8002b28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f899 	bl	8002c70 <HAL_TIM_IC_CaptureCallback>
 8002b3e:	e005      	b.n	8002b4c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f88c 	bl	8002c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f89b 	bl	8002c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	f003 0310 	and.w	r3, r3, #16
 8002b5c:	2b10      	cmp	r3, #16
 8002b5e:	d122      	bne.n	8002ba6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f003 0310 	and.w	r3, r3, #16
 8002b6a:	2b10      	cmp	r3, #16
 8002b6c:	d11b      	bne.n	8002ba6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f06f 0210 	mvn.w	r2, #16
 8002b76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2208      	movs	r2, #8
 8002b7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f86f 	bl	8002c70 <HAL_TIM_IC_CaptureCallback>
 8002b92:	e005      	b.n	8002ba0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f862 	bl	8002c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f871 	bl	8002c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d10e      	bne.n	8002bd2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d107      	bne.n	8002bd2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f06f 0201 	mvn.w	r2, #1
 8002bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7fd fdbf 	bl	8000750 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bdc:	2b80      	cmp	r3, #128	; 0x80
 8002bde:	d10e      	bne.n	8002bfe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bea:	2b80      	cmp	r3, #128	; 0x80
 8002bec:	d107      	bne.n	8002bfe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f8c0 	bl	8002d7e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c08:	2b40      	cmp	r3, #64	; 0x40
 8002c0a:	d10e      	bne.n	8002c2a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c16:	2b40      	cmp	r3, #64	; 0x40
 8002c18:	d107      	bne.n	8002c2a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f835 	bl	8002c94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	f003 0320 	and.w	r3, r3, #32
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	d10e      	bne.n	8002c56 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f003 0320 	and.w	r3, r3, #32
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	d107      	bne.n	8002c56 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f06f 0220 	mvn.w	r2, #32
 8002c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f88b 	bl	8002d6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr

08002c70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr

08002c82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr

08002c94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr
	...

08002ca8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a29      	ldr	r2, [pc, #164]	; (8002d60 <TIM_Base_SetConfig+0xb8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00b      	beq.n	8002cd8 <TIM_Base_SetConfig+0x30>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc6:	d007      	beq.n	8002cd8 <TIM_Base_SetConfig+0x30>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a26      	ldr	r2, [pc, #152]	; (8002d64 <TIM_Base_SetConfig+0xbc>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d003      	beq.n	8002cd8 <TIM_Base_SetConfig+0x30>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a25      	ldr	r2, [pc, #148]	; (8002d68 <TIM_Base_SetConfig+0xc0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d108      	bne.n	8002cea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a1c      	ldr	r2, [pc, #112]	; (8002d60 <TIM_Base_SetConfig+0xb8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00b      	beq.n	8002d0a <TIM_Base_SetConfig+0x62>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf8:	d007      	beq.n	8002d0a <TIM_Base_SetConfig+0x62>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a19      	ldr	r2, [pc, #100]	; (8002d64 <TIM_Base_SetConfig+0xbc>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d003      	beq.n	8002d0a <TIM_Base_SetConfig+0x62>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a18      	ldr	r2, [pc, #96]	; (8002d68 <TIM_Base_SetConfig+0xc0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d108      	bne.n	8002d1c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a07      	ldr	r2, [pc, #28]	; (8002d60 <TIM_Base_SetConfig+0xb8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d103      	bne.n	8002d50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	615a      	str	r2, [r3, #20]
}
 8002d56:	bf00      	nop
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr
 8002d60:	40012c00 	.word	0x40012c00
 8002d64:	40000400 	.word	0x40000400
 8002d68:	40000800 	.word	0x40000800

08002d6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr

08002d7e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002da2:	2b84      	cmp	r3, #132	; 0x84
 8002da4:	d005      	beq.n	8002db2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002da6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4413      	add	r3, r2
 8002dae:	3303      	adds	r3, #3
 8002db0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002db2:	68fb      	ldr	r3, [r7, #12]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr

08002dbe <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dc4:	f3ef 8305 	mrs	r3, IPSR
 8002dc8:	607b      	str	r3, [r7, #4]
  return(result);
 8002dca:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	bf14      	ite	ne
 8002dd0:	2301      	movne	r3, #1
 8002dd2:	2300      	moveq	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr

08002de0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002de4:	f001 fff2 	bl	8004dcc <vTaskStartScheduler>
  
  return osOK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	bd80      	pop	{r7, pc}

08002dee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002dee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002df0:	b089      	sub	sp, #36	; 0x24
 8002df2:	af04      	add	r7, sp, #16
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d020      	beq.n	8002e42 <osThreadCreate+0x54>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d01c      	beq.n	8002e42 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685c      	ldr	r4, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681d      	ldr	r5, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691e      	ldr	r6, [r3, #16]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff ffb8 	bl	8002d90 <makeFreeRtosPriority>
 8002e20:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e2a:	9202      	str	r2, [sp, #8]
 8002e2c:	9301      	str	r3, [sp, #4]
 8002e2e:	9100      	str	r1, [sp, #0]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	4632      	mov	r2, r6
 8002e34:	4629      	mov	r1, r5
 8002e36:	4620      	mov	r0, r4
 8002e38:	f001 fe0d 	bl	8004a56 <xTaskCreateStatic>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	e01c      	b.n	8002e7c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685c      	ldr	r4, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e4e:	b29e      	uxth	r6, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff ff9a 	bl	8002d90 <makeFreeRtosPriority>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	f107 030c 	add.w	r3, r7, #12
 8002e62:	9301      	str	r3, [sp, #4]
 8002e64:	9200      	str	r2, [sp, #0]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	4632      	mov	r2, r6
 8002e6a:	4629      	mov	r1, r5
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	f001 fe4b 	bl	8004b08 <xTaskCreate>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d001      	beq.n	8002e7c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	e000      	b.n	8002e7e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e86 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b084      	sub	sp, #16
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <osDelay+0x16>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	e000      	b.n	8002e9e <osDelay+0x18>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f001 ff60 	bl	8004d64 <vTaskDelay>
  
  return osOK;
 8002ea4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b086      	sub	sp, #24
 8002eb2:	af02      	add	r7, sp, #8
 8002eb4:	6078      	str	r0, [r7, #4]
 8002eb6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d010      	beq.n	8002ee2 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d10b      	bne.n	8002ede <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	2303      	movs	r3, #3
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	f000 fd6d 	bl	80039b4 <xQueueGenericCreateStatic>
 8002eda:	4603      	mov	r3, r0
 8002edc:	e016      	b.n	8002f0c <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	e014      	b.n	8002f0c <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d110      	bne.n	8002f0a <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8002ee8:	2203      	movs	r2, #3
 8002eea:	2100      	movs	r1, #0
 8002eec:	2001      	movs	r0, #1
 8002eee:	f000 fdd3 	bl	8003a98 <xQueueGenericCreate>
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d005      	beq.n	8002f06 <osSemaphoreCreate+0x58>
 8002efa:	2300      	movs	r3, #0
 8002efc:	2200      	movs	r2, #0
 8002efe:	2100      	movs	r1, #0
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 fe25 	bl	8003b50 <xQueueGenericSend>
      return sema;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	e000      	b.n	8002f0c <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002f0a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002f28:	2380      	movs	r3, #128	; 0x80
 8002f2a:	e03a      	b.n	8002fa2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f36:	d103      	bne.n	8002f40 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002f38:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	e009      	b.n	8002f54 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d006      	beq.n	8002f54 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <osSemaphoreWait+0x40>
      ticks = 1;
 8002f50:	2301      	movs	r3, #1
 8002f52:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002f54:	f7ff ff33 	bl	8002dbe <inHandlerMode>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d017      	beq.n	8002f8e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002f5e:	f107 0308 	add.w	r3, r7, #8
 8002f62:	461a      	mov	r2, r3
 8002f64:	2100      	movs	r1, #0
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f001 f87e 	bl	8004068 <xQueueReceiveFromISR>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d001      	beq.n	8002f76 <osSemaphoreWait+0x62>
      return osErrorOS;
 8002f72:	23ff      	movs	r3, #255	; 0xff
 8002f74:	e015      	b.n	8002fa2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d011      	beq.n	8002fa0 <osSemaphoreWait+0x8c>
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <osSemaphoreWait+0x98>)
 8002f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	e008      	b.n	8002fa0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002f8e:	68f9      	ldr	r1, [r7, #12]
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 ff61 	bl	8003e58 <xQueueSemaphoreTake>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d001      	beq.n	8002fa0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002f9c:	23ff      	movs	r3, #255	; 0xff
 8002f9e:	e000      	b.n	8002fa2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	e000ed04 	.word	0xe000ed04

08002fb0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002fc0:	f7ff fefd 	bl	8002dbe <inHandlerMode>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d016      	beq.n	8002ff8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002fca:	f107 0308 	add.w	r3, r7, #8
 8002fce:	4619      	mov	r1, r3
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 feb7 	bl	8003d44 <xQueueGiveFromISR>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d001      	beq.n	8002fe0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002fdc:	23ff      	movs	r3, #255	; 0xff
 8002fde:	e017      	b.n	8003010 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d013      	beq.n	800300e <osSemaphoreRelease+0x5e>
 8002fe6:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <osSemaphoreRelease+0x68>)
 8002fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	f3bf 8f4f 	dsb	sy
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	e00a      	b.n	800300e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fda6 	bl	8003b50 <xQueueGenericSend>
 8003004:	4603      	mov	r3, r0
 8003006:	2b01      	cmp	r3, #1
 8003008:	d001      	beq.n	800300e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800300a:	23ff      	movs	r3, #255	; 0xff
 800300c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800300e:	68fb      	ldr	r3, [r7, #12]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	e000ed04 	.word	0xe000ed04

0800301c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08a      	sub	sp, #40	; 0x28
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003024:	2300      	movs	r3, #0
 8003026:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003028:	f001 ff2e 	bl	8004e88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800302c:	4b57      	ldr	r3, [pc, #348]	; (800318c <pvPortMalloc+0x170>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003034:	f000 f90c 	bl	8003250 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003038:	4b55      	ldr	r3, [pc, #340]	; (8003190 <pvPortMalloc+0x174>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	f040 808c 	bne.w	800315e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01c      	beq.n	8003086 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800304c:	2208      	movs	r2, #8
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4413      	add	r3, r2
 8003052:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	2b00      	cmp	r3, #0
 800305c:	d013      	beq.n	8003086 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f023 0307 	bic.w	r3, r3, #7
 8003064:	3308      	adds	r3, #8
 8003066:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	2b00      	cmp	r3, #0
 8003070:	d009      	beq.n	8003086 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003076:	f383 8811 	msr	BASEPRI, r3
 800307a:	f3bf 8f6f 	isb	sy
 800307e:	f3bf 8f4f 	dsb	sy
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	e7fe      	b.n	8003084 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d068      	beq.n	800315e <pvPortMalloc+0x142>
 800308c:	4b41      	ldr	r3, [pc, #260]	; (8003194 <pvPortMalloc+0x178>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	429a      	cmp	r2, r3
 8003094:	d863      	bhi.n	800315e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003096:	4b40      	ldr	r3, [pc, #256]	; (8003198 <pvPortMalloc+0x17c>)
 8003098:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800309a:	4b3f      	ldr	r3, [pc, #252]	; (8003198 <pvPortMalloc+0x17c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030a0:	e004      	b.n	80030ac <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d903      	bls.n	80030be <pvPortMalloc+0xa2>
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f1      	bne.n	80030a2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80030be:	4b33      	ldr	r3, [pc, #204]	; (800318c <pvPortMalloc+0x170>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d04a      	beq.n	800315e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2208      	movs	r2, #8
 80030ce:	4413      	add	r3, r2
 80030d0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	1ad2      	subs	r2, r2, r3
 80030e2:	2308      	movs	r3, #8
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d91e      	bls.n	8003128 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80030ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4413      	add	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d009      	beq.n	8003110 <pvPortMalloc+0xf4>
 80030fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003100:	f383 8811 	msr	BASEPRI, r3
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	e7fe      	b.n	800310e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	1ad2      	subs	r2, r2, r3
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003122:	69b8      	ldr	r0, [r7, #24]
 8003124:	f000 f8f6 	bl	8003314 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003128:	4b1a      	ldr	r3, [pc, #104]	; (8003194 <pvPortMalloc+0x178>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	4a18      	ldr	r2, [pc, #96]	; (8003194 <pvPortMalloc+0x178>)
 8003134:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003136:	4b17      	ldr	r3, [pc, #92]	; (8003194 <pvPortMalloc+0x178>)
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	4b18      	ldr	r3, [pc, #96]	; (800319c <pvPortMalloc+0x180>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d203      	bcs.n	800314a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003142:	4b14      	ldr	r3, [pc, #80]	; (8003194 <pvPortMalloc+0x178>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a15      	ldr	r2, [pc, #84]	; (800319c <pvPortMalloc+0x180>)
 8003148:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <pvPortMalloc+0x174>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	431a      	orrs	r2, r3
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800315e:	f001 fea1 	bl	8004ea4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	2b00      	cmp	r3, #0
 800316a:	d009      	beq.n	8003180 <pvPortMalloc+0x164>
 800316c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003170:	f383 8811 	msr	BASEPRI, r3
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	e7fe      	b.n	800317e <pvPortMalloc+0x162>
	return pvReturn;
 8003180:	69fb      	ldr	r3, [r7, #28]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3728      	adds	r7, #40	; 0x28
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	20000eac 	.word	0x20000eac
 8003190:	20000eb8 	.word	0x20000eb8
 8003194:	20000eb0 	.word	0x20000eb0
 8003198:	20000ea4 	.word	0x20000ea4
 800319c:	20000eb4 	.word	0x20000eb4

080031a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d046      	beq.n	8003240 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80031b2:	2308      	movs	r3, #8
 80031b4:	425b      	negs	r3, r3
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4413      	add	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	4b20      	ldr	r3, [pc, #128]	; (8003248 <vPortFree+0xa8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4013      	ands	r3, r2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d109      	bne.n	80031e2 <vPortFree+0x42>
 80031ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d2:	f383 8811 	msr	BASEPRI, r3
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	e7fe      	b.n	80031e0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d009      	beq.n	80031fe <vPortFree+0x5e>
 80031ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ee:	f383 8811 	msr	BASEPRI, r3
 80031f2:	f3bf 8f6f 	isb	sy
 80031f6:	f3bf 8f4f 	dsb	sy
 80031fa:	60bb      	str	r3, [r7, #8]
 80031fc:	e7fe      	b.n	80031fc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	4b11      	ldr	r3, [pc, #68]	; (8003248 <vPortFree+0xa8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4013      	ands	r3, r2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d019      	beq.n	8003240 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d115      	bne.n	8003240 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <vPortFree+0xa8>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	43db      	mvns	r3, r3
 800321e:	401a      	ands	r2, r3
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003224:	f001 fe30 	bl	8004e88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	4b07      	ldr	r3, [pc, #28]	; (800324c <vPortFree+0xac>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4413      	add	r3, r2
 8003232:	4a06      	ldr	r2, [pc, #24]	; (800324c <vPortFree+0xac>)
 8003234:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003236:	6938      	ldr	r0, [r7, #16]
 8003238:	f000 f86c 	bl	8003314 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800323c:	f001 fe32 	bl	8004ea4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003240:	bf00      	nop
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20000eb8 	.word	0x20000eb8
 800324c:	20000eb0 	.word	0x20000eb0

08003250 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003256:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800325a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800325c:	4b27      	ldr	r3, [pc, #156]	; (80032fc <prvHeapInit+0xac>)
 800325e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00c      	beq.n	8003284 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	3307      	adds	r3, #7
 800326e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 0307 	bic.w	r3, r3, #7
 8003276:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	4a1f      	ldr	r2, [pc, #124]	; (80032fc <prvHeapInit+0xac>)
 8003280:	4413      	add	r3, r2
 8003282:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003288:	4a1d      	ldr	r2, [pc, #116]	; (8003300 <prvHeapInit+0xb0>)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800328e:	4b1c      	ldr	r3, [pc, #112]	; (8003300 <prvHeapInit+0xb0>)
 8003290:	2200      	movs	r2, #0
 8003292:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	4413      	add	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800329c:	2208      	movs	r2, #8
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f023 0307 	bic.w	r3, r3, #7
 80032aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4a15      	ldr	r2, [pc, #84]	; (8003304 <prvHeapInit+0xb4>)
 80032b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80032b2:	4b14      	ldr	r3, [pc, #80]	; (8003304 <prvHeapInit+0xb4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2200      	movs	r2, #0
 80032b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80032ba:	4b12      	ldr	r3, [pc, #72]	; (8003304 <prvHeapInit+0xb4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	1ad2      	subs	r2, r2, r3
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80032d0:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <prvHeapInit+0xb4>)
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	4a0a      	ldr	r2, [pc, #40]	; (8003308 <prvHeapInit+0xb8>)
 80032de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	4a09      	ldr	r2, [pc, #36]	; (800330c <prvHeapInit+0xbc>)
 80032e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80032e8:	4b09      	ldr	r3, [pc, #36]	; (8003310 <prvHeapInit+0xc0>)
 80032ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80032ee:	601a      	str	r2, [r3, #0]
}
 80032f0:	bf00      	nop
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	200002a4 	.word	0x200002a4
 8003300:	20000ea4 	.word	0x20000ea4
 8003304:	20000eac 	.word	0x20000eac
 8003308:	20000eb4 	.word	0x20000eb4
 800330c:	20000eb0 	.word	0x20000eb0
 8003310:	20000eb8 	.word	0x20000eb8

08003314 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800331c:	4b27      	ldr	r3, [pc, #156]	; (80033bc <prvInsertBlockIntoFreeList+0xa8>)
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	e002      	b.n	8003328 <prvInsertBlockIntoFreeList+0x14>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	429a      	cmp	r2, r3
 8003330:	d8f7      	bhi.n	8003322 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	4413      	add	r3, r2
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	429a      	cmp	r2, r3
 8003342:	d108      	bne.n	8003356 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	441a      	add	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	441a      	add	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d118      	bne.n	800339c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	4b14      	ldr	r3, [pc, #80]	; (80033c0 <prvInsertBlockIntoFreeList+0xac>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d00d      	beq.n	8003392 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	441a      	add	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	e008      	b.n	80033a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003392:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <prvInsertBlockIntoFreeList+0xac>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	e003      	b.n	80033a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d002      	beq.n	80033b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033b2:	bf00      	nop
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr
 80033bc:	20000ea4 	.word	0x20000ea4
 80033c0:	20000eac 	.word	0x20000eac

080033c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f103 0208 	add.w	r2, r3, #8
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f04f 32ff 	mov.w	r2, #4294967295
 80033dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f103 0208 	add.w	r2, r3, #8
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f103 0208 	add.w	r2, r3, #8
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr

08003402 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr

0800341a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800341a:	b480      	push	{r7}
 800341c:	b085      	sub	sp, #20
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	601a      	str	r2, [r3, #0]
}
 8003456:	bf00      	nop
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003476:	d103      	bne.n	8003480 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	e00c      	b.n	800349a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3308      	adds	r3, #8
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	e002      	b.n	800348e <vListInsert+0x2e>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	429a      	cmp	r2, r3
 8003498:	d2f6      	bcs.n	8003488 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	601a      	str	r2, [r3, #0]
}
 80034c6:	bf00      	nop
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr

080034d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6892      	ldr	r2, [r2, #8]
 80034e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6852      	ldr	r2, [r2, #4]
 80034f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d103      	bne.n	8003504 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	1e5a      	subs	r2, r3, #1
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr
	...

08003524 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	3b04      	subs	r3, #4
 8003534:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800353c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	3b04      	subs	r3, #4
 8003542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f023 0201 	bic.w	r2, r3, #1
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3b04      	subs	r3, #4
 8003552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003554:	4a08      	ldr	r2, [pc, #32]	; (8003578 <pxPortInitialiseStack+0x54>)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	3b14      	subs	r3, #20
 800355e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	3b20      	subs	r3, #32
 800356a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800356c:	68fb      	ldr	r3, [r7, #12]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	0800357d 	.word	0x0800357d

0800357c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003582:	2300      	movs	r3, #0
 8003584:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003586:	4b10      	ldr	r3, [pc, #64]	; (80035c8 <prvTaskExitError+0x4c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358e:	d009      	beq.n	80035a4 <prvTaskExitError+0x28>
 8003590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	e7fe      	b.n	80035a2 <prvTaskExitError+0x26>
 80035a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a8:	f383 8811 	msr	BASEPRI, r3
 80035ac:	f3bf 8f6f 	isb	sy
 80035b0:	f3bf 8f4f 	dsb	sy
 80035b4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80035b6:	bf00      	nop
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0fc      	beq.n	80035b8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80035be:	bf00      	nop
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr
 80035c8:	2000000c 	.word	0x2000000c
 80035cc:	00000000 	.word	0x00000000

080035d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80035d0:	4b07      	ldr	r3, [pc, #28]	; (80035f0 <pxCurrentTCBConst2>)
 80035d2:	6819      	ldr	r1, [r3, #0]
 80035d4:	6808      	ldr	r0, [r1, #0]
 80035d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80035da:	f380 8809 	msr	PSP, r0
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	f04f 0000 	mov.w	r0, #0
 80035e6:	f380 8811 	msr	BASEPRI, r0
 80035ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80035ee:	4770      	bx	lr

080035f0 <pxCurrentTCBConst2>:
 80035f0:	20000ec4 	.word	0x20000ec4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80035f4:	bf00      	nop
 80035f6:	bf00      	nop

080035f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80035f8:	4806      	ldr	r0, [pc, #24]	; (8003614 <prvPortStartFirstTask+0x1c>)
 80035fa:	6800      	ldr	r0, [r0, #0]
 80035fc:	6800      	ldr	r0, [r0, #0]
 80035fe:	f380 8808 	msr	MSP, r0
 8003602:	b662      	cpsie	i
 8003604:	b661      	cpsie	f
 8003606:	f3bf 8f4f 	dsb	sy
 800360a:	f3bf 8f6f 	isb	sy
 800360e:	df00      	svc	0
 8003610:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003612:	bf00      	nop
 8003614:	e000ed08 	.word	0xe000ed08

08003618 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800361e:	4b31      	ldr	r3, [pc, #196]	; (80036e4 <xPortStartScheduler+0xcc>)
 8003620:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	b2db      	uxtb	r3, r3
 8003628:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	22ff      	movs	r2, #255	; 0xff
 800362e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003638:	78fb      	ldrb	r3, [r7, #3]
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003640:	b2da      	uxtb	r2, r3
 8003642:	4b29      	ldr	r3, [pc, #164]	; (80036e8 <xPortStartScheduler+0xd0>)
 8003644:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003646:	4b29      	ldr	r3, [pc, #164]	; (80036ec <xPortStartScheduler+0xd4>)
 8003648:	2207      	movs	r2, #7
 800364a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800364c:	e009      	b.n	8003662 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800364e:	4b27      	ldr	r3, [pc, #156]	; (80036ec <xPortStartScheduler+0xd4>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	3b01      	subs	r3, #1
 8003654:	4a25      	ldr	r2, [pc, #148]	; (80036ec <xPortStartScheduler+0xd4>)
 8003656:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003658:	78fb      	ldrb	r3, [r7, #3]
 800365a:	b2db      	uxtb	r3, r3
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	b2db      	uxtb	r3, r3
 8003660:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003662:	78fb      	ldrb	r3, [r7, #3]
 8003664:	b2db      	uxtb	r3, r3
 8003666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366a:	2b80      	cmp	r3, #128	; 0x80
 800366c:	d0ef      	beq.n	800364e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800366e:	4b1f      	ldr	r3, [pc, #124]	; (80036ec <xPortStartScheduler+0xd4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f1c3 0307 	rsb	r3, r3, #7
 8003676:	2b04      	cmp	r3, #4
 8003678:	d009      	beq.n	800368e <xPortStartScheduler+0x76>
 800367a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367e:	f383 8811 	msr	BASEPRI, r3
 8003682:	f3bf 8f6f 	isb	sy
 8003686:	f3bf 8f4f 	dsb	sy
 800368a:	60bb      	str	r3, [r7, #8]
 800368c:	e7fe      	b.n	800368c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800368e:	4b17      	ldr	r3, [pc, #92]	; (80036ec <xPortStartScheduler+0xd4>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	021b      	lsls	r3, r3, #8
 8003694:	4a15      	ldr	r2, [pc, #84]	; (80036ec <xPortStartScheduler+0xd4>)
 8003696:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003698:	4b14      	ldr	r3, [pc, #80]	; (80036ec <xPortStartScheduler+0xd4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036a0:	4a12      	ldr	r2, [pc, #72]	; (80036ec <xPortStartScheduler+0xd4>)
 80036a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80036ac:	4b10      	ldr	r3, [pc, #64]	; (80036f0 <xPortStartScheduler+0xd8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a0f      	ldr	r2, [pc, #60]	; (80036f0 <xPortStartScheduler+0xd8>)
 80036b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80036b8:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <xPortStartScheduler+0xd8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a0c      	ldr	r2, [pc, #48]	; (80036f0 <xPortStartScheduler+0xd8>)
 80036be:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80036c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80036c4:	f000 f8b0 	bl	8003828 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80036c8:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <xPortStartScheduler+0xdc>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80036ce:	f7ff ff93 	bl	80035f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80036d2:	f001 fd3f 	bl	8005154 <vTaskSwitchContext>
	prvTaskExitError();
 80036d6:	f7ff ff51 	bl	800357c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	e000e400 	.word	0xe000e400
 80036e8:	20000ebc 	.word	0x20000ebc
 80036ec:	20000ec0 	.word	0x20000ec0
 80036f0:	e000ed20 	.word	0xe000ed20
 80036f4:	2000000c 	.word	0x2000000c

080036f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003702:	f383 8811 	msr	BASEPRI, r3
 8003706:	f3bf 8f6f 	isb	sy
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003710:	4b0e      	ldr	r3, [pc, #56]	; (800374c <vPortEnterCritical+0x54>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3301      	adds	r3, #1
 8003716:	4a0d      	ldr	r2, [pc, #52]	; (800374c <vPortEnterCritical+0x54>)
 8003718:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800371a:	4b0c      	ldr	r3, [pc, #48]	; (800374c <vPortEnterCritical+0x54>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d10e      	bne.n	8003740 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003722:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <vPortEnterCritical+0x58>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d009      	beq.n	8003740 <vPortEnterCritical+0x48>
 800372c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003730:	f383 8811 	msr	BASEPRI, r3
 8003734:	f3bf 8f6f 	isb	sy
 8003738:	f3bf 8f4f 	dsb	sy
 800373c:	603b      	str	r3, [r7, #0]
 800373e:	e7fe      	b.n	800373e <vPortEnterCritical+0x46>
	}
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	2000000c 	.word	0x2000000c
 8003750:	e000ed04 	.word	0xe000ed04

08003754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800375a:	4b10      	ldr	r3, [pc, #64]	; (800379c <vPortExitCritical+0x48>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d109      	bne.n	8003776 <vPortExitCritical+0x22>
 8003762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003766:	f383 8811 	msr	BASEPRI, r3
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	f3bf 8f4f 	dsb	sy
 8003772:	607b      	str	r3, [r7, #4]
 8003774:	e7fe      	b.n	8003774 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003776:	4b09      	ldr	r3, [pc, #36]	; (800379c <vPortExitCritical+0x48>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3b01      	subs	r3, #1
 800377c:	4a07      	ldr	r2, [pc, #28]	; (800379c <vPortExitCritical+0x48>)
 800377e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003780:	4b06      	ldr	r3, [pc, #24]	; (800379c <vPortExitCritical+0x48>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d104      	bne.n	8003792 <vPortExitCritical+0x3e>
 8003788:	2300      	movs	r3, #0
 800378a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr
 800379c:	2000000c 	.word	0x2000000c

080037a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80037a0:	f3ef 8009 	mrs	r0, PSP
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <pxCurrentTCBConst>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80037b0:	6010      	str	r0, [r2, #0]
 80037b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80037b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80037ba:	f380 8811 	msr	BASEPRI, r0
 80037be:	f001 fcc9 	bl	8005154 <vTaskSwitchContext>
 80037c2:	f04f 0000 	mov.w	r0, #0
 80037c6:	f380 8811 	msr	BASEPRI, r0
 80037ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80037ce:	6819      	ldr	r1, [r3, #0]
 80037d0:	6808      	ldr	r0, [r1, #0]
 80037d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80037d6:	f380 8809 	msr	PSP, r0
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	4770      	bx	lr

080037e0 <pxCurrentTCBConst>:
 80037e0:	20000ec4 	.word	0x20000ec4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop

080037e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
	__asm volatile
 80037ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f2:	f383 8811 	msr	BASEPRI, r3
 80037f6:	f3bf 8f6f 	isb	sy
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003800:	f001 fbec 	bl	8004fdc <xTaskIncrementTick>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <SysTick_Handler+0x3c>)
 800380c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	2300      	movs	r3, #0
 8003814:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800381c:	bf00      	nop
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	e000ed04 	.word	0xe000ed04

08003828 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800382c:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <vPortSetupTimerInterrupt+0x30>)
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003832:	4b0a      	ldr	r3, [pc, #40]	; (800385c <vPortSetupTimerInterrupt+0x34>)
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003838:	4b09      	ldr	r3, [pc, #36]	; (8003860 <vPortSetupTimerInterrupt+0x38>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a09      	ldr	r2, [pc, #36]	; (8003864 <vPortSetupTimerInterrupt+0x3c>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	099b      	lsrs	r3, r3, #6
 8003844:	4a08      	ldr	r2, [pc, #32]	; (8003868 <vPortSetupTimerInterrupt+0x40>)
 8003846:	3b01      	subs	r3, #1
 8003848:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800384a:	4b03      	ldr	r3, [pc, #12]	; (8003858 <vPortSetupTimerInterrupt+0x30>)
 800384c:	2207      	movs	r2, #7
 800384e:	601a      	str	r2, [r3, #0]
}
 8003850:	bf00      	nop
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr
 8003858:	e000e010 	.word	0xe000e010
 800385c:	e000e018 	.word	0xe000e018
 8003860:	20000000 	.word	0x20000000
 8003864:	10624dd3 	.word	0x10624dd3
 8003868:	e000e014 	.word	0xe000e014

0800386c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003872:	f3ef 8305 	mrs	r3, IPSR
 8003876:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2b0f      	cmp	r3, #15
 800387c:	d913      	bls.n	80038a6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800387e:	4a15      	ldr	r2, [pc, #84]	; (80038d4 <vPortValidateInterruptPriority+0x68>)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4413      	add	r3, r2
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003888:	4b13      	ldr	r3, [pc, #76]	; (80038d8 <vPortValidateInterruptPriority+0x6c>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	7afa      	ldrb	r2, [r7, #11]
 800388e:	429a      	cmp	r2, r3
 8003890:	d209      	bcs.n	80038a6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8003892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003896:	f383 8811 	msr	BASEPRI, r3
 800389a:	f3bf 8f6f 	isb	sy
 800389e:	f3bf 8f4f 	dsb	sy
 80038a2:	607b      	str	r3, [r7, #4]
 80038a4:	e7fe      	b.n	80038a4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80038a6:	4b0d      	ldr	r3, [pc, #52]	; (80038dc <vPortValidateInterruptPriority+0x70>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80038ae:	4b0c      	ldr	r3, [pc, #48]	; (80038e0 <vPortValidateInterruptPriority+0x74>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d909      	bls.n	80038ca <vPortValidateInterruptPriority+0x5e>
 80038b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ba:	f383 8811 	msr	BASEPRI, r3
 80038be:	f3bf 8f6f 	isb	sy
 80038c2:	f3bf 8f4f 	dsb	sy
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	e7fe      	b.n	80038c8 <vPortValidateInterruptPriority+0x5c>
	}
 80038ca:	bf00      	nop
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr
 80038d4:	e000e3f0 	.word	0xe000e3f0
 80038d8:	20000ebc 	.word	0x20000ebc
 80038dc:	e000ed0c 	.word	0xe000ed0c
 80038e0:	20000ec0 	.word	0x20000ec0

080038e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d109      	bne.n	800390c <xQueueGenericReset+0x28>
 80038f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	e7fe      	b.n	800390a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800390c:	f7ff fef4 	bl	80036f8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003918:	68f9      	ldr	r1, [r7, #12]
 800391a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800391c:	fb01 f303 	mul.w	r3, r1, r3
 8003920:	441a      	add	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393c:	3b01      	subs	r3, #1
 800393e:	68f9      	ldr	r1, [r7, #12]
 8003940:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003942:	fb01 f303 	mul.w	r3, r1, r3
 8003946:	441a      	add	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	22ff      	movs	r2, #255	; 0xff
 8003950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	22ff      	movs	r2, #255	; 0xff
 8003958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d114      	bne.n	800398c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d01a      	beq.n	80039a0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	3310      	adds	r3, #16
 800396e:	4618      	mov	r0, r3
 8003970:	f001 fc6e 	bl	8005250 <xTaskRemoveFromEventList>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d012      	beq.n	80039a0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800397a:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <xQueueGenericReset+0xcc>)
 800397c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	f3bf 8f6f 	isb	sy
 800398a:	e009      	b.n	80039a0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3310      	adds	r3, #16
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff fd17 	bl	80033c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	3324      	adds	r3, #36	; 0x24
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff fd12 	bl	80033c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80039a0:	f7ff fed8 	bl	8003754 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80039a4:	2301      	movs	r3, #1
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	e000ed04 	.word	0xe000ed04

080039b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08e      	sub	sp, #56	; 0x38
 80039b8:	af02      	add	r7, sp, #8
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
 80039c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d109      	bne.n	80039dc <xQueueGenericCreateStatic+0x28>
 80039c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039da:	e7fe      	b.n	80039da <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d109      	bne.n	80039f6 <xQueueGenericCreateStatic+0x42>
 80039e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e6:	f383 8811 	msr	BASEPRI, r3
 80039ea:	f3bf 8f6f 	isb	sy
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
 80039f4:	e7fe      	b.n	80039f4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <xQueueGenericCreateStatic+0x4e>
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <xQueueGenericCreateStatic+0x52>
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <xQueueGenericCreateStatic+0x54>
 8003a06:	2300      	movs	r3, #0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d109      	bne.n	8003a20 <xQueueGenericCreateStatic+0x6c>
 8003a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	623b      	str	r3, [r7, #32]
 8003a1e:	e7fe      	b.n	8003a1e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d102      	bne.n	8003a2c <xQueueGenericCreateStatic+0x78>
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <xQueueGenericCreateStatic+0x7c>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <xQueueGenericCreateStatic+0x7e>
 8003a30:	2300      	movs	r3, #0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d109      	bne.n	8003a4a <xQueueGenericCreateStatic+0x96>
 8003a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3a:	f383 8811 	msr	BASEPRI, r3
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	61fb      	str	r3, [r7, #28]
 8003a48:	e7fe      	b.n	8003a48 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a4a:	2348      	movs	r3, #72	; 0x48
 8003a4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2b48      	cmp	r3, #72	; 0x48
 8003a52:	d009      	beq.n	8003a68 <xQueueGenericCreateStatic+0xb4>
 8003a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	61bb      	str	r3, [r7, #24]
 8003a66:	e7fe      	b.n	8003a66 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00d      	beq.n	8003a8e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	4613      	mov	r3, r2
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	68b9      	ldr	r1, [r7, #8]
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 f842 	bl	8003b12 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3730      	adds	r7, #48	; 0x30
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b08a      	sub	sp, #40	; 0x28
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d109      	bne.n	8003ac0 <xQueueGenericCreate+0x28>
 8003aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	613b      	str	r3, [r7, #16]
 8003abe:	e7fe      	b.n	8003abe <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d102      	bne.n	8003acc <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61fb      	str	r3, [r7, #28]
 8003aca:	e004      	b.n	8003ad6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	fb02 f303 	mul.w	r3, r2, r3
 8003ad4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	3348      	adds	r3, #72	; 0x48
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7ff fa9e 	bl	800301c <pvPortMalloc>
 8003ae0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00f      	beq.n	8003b08 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	3348      	adds	r3, #72	; 0x48
 8003aec:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003af6:	79fa      	ldrb	r2, [r7, #7]
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	4613      	mov	r3, r2
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	68b9      	ldr	r1, [r7, #8]
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 f805 	bl	8003b12 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003b08:	69bb      	ldr	r3, [r7, #24]
	}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3720      	adds	r7, #32
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b084      	sub	sp, #16
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	60f8      	str	r0, [r7, #12]
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	607a      	str	r2, [r7, #4]
 8003b1e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d103      	bne.n	8003b2e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	e002      	b.n	8003b34 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b40:	2101      	movs	r1, #1
 8003b42:	69b8      	ldr	r0, [r7, #24]
 8003b44:	f7ff fece 	bl	80038e4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b48:	bf00      	nop
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08e      	sub	sp, #56	; 0x38
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
 8003b5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d109      	bne.n	8003b80 <xQueueGenericSend+0x30>
 8003b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b70:	f383 8811 	msr	BASEPRI, r3
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b7e:	e7fe      	b.n	8003b7e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d103      	bne.n	8003b8e <xQueueGenericSend+0x3e>
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <xQueueGenericSend+0x42>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <xQueueGenericSend+0x44>
 8003b92:	2300      	movs	r3, #0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d109      	bne.n	8003bac <xQueueGenericSend+0x5c>
 8003b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9c:	f383 8811 	msr	BASEPRI, r3
 8003ba0:	f3bf 8f6f 	isb	sy
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8003baa:	e7fe      	b.n	8003baa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d103      	bne.n	8003bba <xQueueGenericSend+0x6a>
 8003bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <xQueueGenericSend+0x6e>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <xQueueGenericSend+0x70>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d109      	bne.n	8003bd8 <xQueueGenericSend+0x88>
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	623b      	str	r3, [r7, #32]
 8003bd6:	e7fe      	b.n	8003bd6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bd8:	f001 fd28 	bl	800562c <xTaskGetSchedulerState>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d102      	bne.n	8003be8 <xQueueGenericSend+0x98>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <xQueueGenericSend+0x9c>
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <xQueueGenericSend+0x9e>
 8003bec:	2300      	movs	r3, #0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d109      	bne.n	8003c06 <xQueueGenericSend+0xb6>
 8003bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf6:	f383 8811 	msr	BASEPRI, r3
 8003bfa:	f3bf 8f6f 	isb	sy
 8003bfe:	f3bf 8f4f 	dsb	sy
 8003c02:	61fb      	str	r3, [r7, #28]
 8003c04:	e7fe      	b.n	8003c04 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c06:	f7ff fd77 	bl	80036f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d302      	bcc.n	8003c1c <xQueueGenericSend+0xcc>
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d129      	bne.n	8003c70 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	68b9      	ldr	r1, [r7, #8]
 8003c20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c22:	f000 fab5 	bl	8004190 <prvCopyDataToQueue>
 8003c26:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d010      	beq.n	8003c52 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c32:	3324      	adds	r3, #36	; 0x24
 8003c34:	4618      	mov	r0, r3
 8003c36:	f001 fb0b 	bl	8005250 <xTaskRemoveFromEventList>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d013      	beq.n	8003c68 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c40:	4b3f      	ldr	r3, [pc, #252]	; (8003d40 <xQueueGenericSend+0x1f0>)
 8003c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	e00a      	b.n	8003c68 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d007      	beq.n	8003c68 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c58:	4b39      	ldr	r3, [pc, #228]	; (8003d40 <xQueueGenericSend+0x1f0>)
 8003c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c68:	f7ff fd74 	bl	8003754 <vPortExitCritical>
				return pdPASS;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e063      	b.n	8003d38 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d103      	bne.n	8003c7e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c76:	f7ff fd6d 	bl	8003754 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	e05c      	b.n	8003d38 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d106      	bne.n	8003c92 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c84:	f107 0314 	add.w	r3, r7, #20
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f001 fb69 	bl	8005360 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c92:	f7ff fd5f 	bl	8003754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c96:	f001 f8f7 	bl	8004e88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c9a:	f7ff fd2d 	bl	80036f8 <vPortEnterCritical>
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ca4:	b25b      	sxtb	r3, r3
 8003ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003caa:	d103      	bne.n	8003cb4 <xQueueGenericSend+0x164>
 8003cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cba:	b25b      	sxtb	r3, r3
 8003cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc0:	d103      	bne.n	8003cca <xQueueGenericSend+0x17a>
 8003cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cca:	f7ff fd43 	bl	8003754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cce:	1d3a      	adds	r2, r7, #4
 8003cd0:	f107 0314 	add.w	r3, r7, #20
 8003cd4:	4611      	mov	r1, r2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f001 fb58 	bl	800538c <xTaskCheckForTimeOut>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d124      	bne.n	8003d2c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ce2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ce4:	f000 fb4c 	bl	8004380 <prvIsQueueFull>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d018      	beq.n	8003d20 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf0:	3310      	adds	r3, #16
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f001 fa86 	bl	8005208 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003cfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cfe:	f000 fad7 	bl	80042b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003d02:	f001 f8cf 	bl	8004ea4 <xTaskResumeAll>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f47f af7c 	bne.w	8003c06 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003d0e:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <xQueueGenericSend+0x1f0>)
 8003d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	f3bf 8f6f 	isb	sy
 8003d1e:	e772      	b.n	8003c06 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003d20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d22:	f000 fac5 	bl	80042b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d26:	f001 f8bd 	bl	8004ea4 <xTaskResumeAll>
 8003d2a:	e76c      	b.n	8003c06 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d2e:	f000 fabf 	bl	80042b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d32:	f001 f8b7 	bl	8004ea4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d36:	2300      	movs	r3, #0
		}
	}
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3738      	adds	r7, #56	; 0x38
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	e000ed04 	.word	0xe000ed04

08003d44 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08e      	sub	sp, #56	; 0x38
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d109      	bne.n	8003d6c <xQueueGiveFromISR+0x28>
 8003d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	623b      	str	r3, [r7, #32]
 8003d6a:	e7fe      	b.n	8003d6a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d009      	beq.n	8003d88 <xQueueGiveFromISR+0x44>
 8003d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	61fb      	str	r3, [r7, #28]
 8003d86:	e7fe      	b.n	8003d86 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d103      	bne.n	8003d98 <xQueueGiveFromISR+0x54>
 8003d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <xQueueGiveFromISR+0x58>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e000      	b.n	8003d9e <xQueueGiveFromISR+0x5a>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d109      	bne.n	8003db6 <xQueueGiveFromISR+0x72>
 8003da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	61bb      	str	r3, [r7, #24]
 8003db4:	e7fe      	b.n	8003db4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003db6:	f7ff fd59 	bl	800386c <vPortValidateInterruptPriority>
	__asm volatile
 8003dba:	f3ef 8211 	mrs	r2, BASEPRI
 8003dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	617a      	str	r2, [r7, #20]
 8003dd0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003dd2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dda:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d22b      	bcs.n	8003e3e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003df8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e00:	d112      	bne.n	8003e28 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d016      	beq.n	8003e38 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0c:	3324      	adds	r3, #36	; 0x24
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f001 fa1e 	bl	8005250 <xTaskRemoveFromEventList>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00e      	beq.n	8003e38 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00b      	beq.n	8003e38 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2201      	movs	r2, #1
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	e007      	b.n	8003e38 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	b25a      	sxtb	r2, r3
 8003e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e3c:	e001      	b.n	8003e42 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	637b      	str	r3, [r7, #52]	; 0x34
 8003e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e44:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3738      	adds	r7, #56	; 0x38
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08e      	sub	sp, #56	; 0x38
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e62:	2300      	movs	r3, #0
 8003e64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d109      	bne.n	8003e88 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8003e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e78:	f383 8811 	msr	BASEPRI, r3
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	623b      	str	r3, [r7, #32]
 8003e86:	e7fe      	b.n	8003e86 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d009      	beq.n	8003ea4 <xQueueSemaphoreTake+0x4c>
 8003e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	61fb      	str	r3, [r7, #28]
 8003ea2:	e7fe      	b.n	8003ea2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ea4:	f001 fbc2 	bl	800562c <xTaskGetSchedulerState>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d102      	bne.n	8003eb4 <xQueueSemaphoreTake+0x5c>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <xQueueSemaphoreTake+0x60>
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e000      	b.n	8003eba <xQueueSemaphoreTake+0x62>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <xQueueSemaphoreTake+0x7a>
 8003ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec2:	f383 8811 	msr	BASEPRI, r3
 8003ec6:	f3bf 8f6f 	isb	sy
 8003eca:	f3bf 8f4f 	dsb	sy
 8003ece:	61bb      	str	r3, [r7, #24]
 8003ed0:	e7fe      	b.n	8003ed0 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ed2:	f7ff fc11 	bl	80036f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d024      	beq.n	8003f2c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee4:	1e5a      	subs	r2, r3, #1
 8003ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d104      	bne.n	8003efc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003ef2:	f001 fd61 	bl	80059b8 <pvTaskIncrementMutexHeldCount>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efa:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00f      	beq.n	8003f24 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f06:	3310      	adds	r3, #16
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f001 f9a1 	bl	8005250 <xTaskRemoveFromEventList>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d007      	beq.n	8003f24 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f14:	4b53      	ldr	r3, [pc, #332]	; (8004064 <xQueueSemaphoreTake+0x20c>)
 8003f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f24:	f7ff fc16 	bl	8003754 <vPortExitCritical>
				return pdPASS;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e096      	b.n	800405a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d110      	bne.n	8003f54 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d009      	beq.n	8003f4c <xQueueSemaphoreTake+0xf4>
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	e7fe      	b.n	8003f4a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003f4c:	f7ff fc02 	bl	8003754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f50:	2300      	movs	r3, #0
 8003f52:	e082      	b.n	800405a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d106      	bne.n	8003f68 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f5a:	f107 030c 	add.w	r3, r7, #12
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f001 f9fe 	bl	8005360 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f64:	2301      	movs	r3, #1
 8003f66:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f68:	f7ff fbf4 	bl	8003754 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f6c:	f000 ff8c 	bl	8004e88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f70:	f7ff fbc2 	bl	80036f8 <vPortEnterCritical>
 8003f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f7a:	b25b      	sxtb	r3, r3
 8003f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f80:	d103      	bne.n	8003f8a <xQueueSemaphoreTake+0x132>
 8003f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f90:	b25b      	sxtb	r3, r3
 8003f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f96:	d103      	bne.n	8003fa0 <xQueueSemaphoreTake+0x148>
 8003f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fa0:	f7ff fbd8 	bl	8003754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fa4:	463a      	mov	r2, r7
 8003fa6:	f107 030c 	add.w	r3, r7, #12
 8003faa:	4611      	mov	r1, r2
 8003fac:	4618      	mov	r0, r3
 8003fae:	f001 f9ed 	bl	800538c <xTaskCheckForTimeOut>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d132      	bne.n	800401e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003fba:	f000 f9cb 	bl	8004354 <prvIsQueueEmpty>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d026      	beq.n	8004012 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d109      	bne.n	8003fe0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8003fcc:	f7ff fb94 	bl	80036f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f001 fb47 	bl	8005668 <xTaskPriorityInherit>
 8003fda:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003fdc:	f7ff fbba 	bl	8003754 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe2:	3324      	adds	r3, #36	; 0x24
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	4611      	mov	r1, r2
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f001 f90d 	bl	8005208 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003fee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ff0:	f000 f95e 	bl	80042b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ff4:	f000 ff56 	bl	8004ea4 <xTaskResumeAll>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f47f af69 	bne.w	8003ed2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004000:	4b18      	ldr	r3, [pc, #96]	; (8004064 <xQueueSemaphoreTake+0x20c>)
 8004002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	f3bf 8f4f 	dsb	sy
 800400c:	f3bf 8f6f 	isb	sy
 8004010:	e75f      	b.n	8003ed2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004012:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004014:	f000 f94c 	bl	80042b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004018:	f000 ff44 	bl	8004ea4 <xTaskResumeAll>
 800401c:	e759      	b.n	8003ed2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800401e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004020:	f000 f946 	bl	80042b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004024:	f000 ff3e 	bl	8004ea4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004028:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800402a:	f000 f993 	bl	8004354 <prvIsQueueEmpty>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	f43f af4e 	beq.w	8003ed2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00d      	beq.n	8004058 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800403c:	f7ff fb5c 	bl	80036f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004040:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004042:	f000 f88e 	bl	8004162 <prvGetDisinheritPriorityAfterTimeout>
 8004046:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800404e:	4618      	mov	r0, r3
 8004050:	f001 fc14 	bl	800587c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004054:	f7ff fb7e 	bl	8003754 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004058:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800405a:	4618      	mov	r0, r3
 800405c:	3738      	adds	r7, #56	; 0x38
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	e000ed04 	.word	0xe000ed04

08004068 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08e      	sub	sp, #56	; 0x38
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407a:	2b00      	cmp	r3, #0
 800407c:	d109      	bne.n	8004092 <xQueueReceiveFromISR+0x2a>
 800407e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	623b      	str	r3, [r7, #32]
 8004090:	e7fe      	b.n	8004090 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d103      	bne.n	80040a0 <xQueueReceiveFromISR+0x38>
 8004098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <xQueueReceiveFromISR+0x3c>
 80040a0:	2301      	movs	r3, #1
 80040a2:	e000      	b.n	80040a6 <xQueueReceiveFromISR+0x3e>
 80040a4:	2300      	movs	r3, #0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d109      	bne.n	80040be <xQueueReceiveFromISR+0x56>
 80040aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ae:	f383 8811 	msr	BASEPRI, r3
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	61fb      	str	r3, [r7, #28]
 80040bc:	e7fe      	b.n	80040bc <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040be:	f7ff fbd5 	bl	800386c <vPortValidateInterruptPriority>
	__asm volatile
 80040c2:	f3ef 8211 	mrs	r2, BASEPRI
 80040c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ca:	f383 8811 	msr	BASEPRI, r3
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	61ba      	str	r2, [r7, #24]
 80040d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80040da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80040dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d02f      	beq.n	800414a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80040f4:	68b9      	ldr	r1, [r7, #8]
 80040f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040f8:	f000 f8b4 	bl	8004264 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	1e5a      	subs	r2, r3, #1
 8004100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004102:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004104:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410c:	d112      	bne.n	8004134 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800410e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d016      	beq.n	8004144 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	3310      	adds	r3, #16
 800411a:	4618      	mov	r0, r3
 800411c:	f001 f898 	bl	8005250 <xTaskRemoveFromEventList>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00e      	beq.n	8004144 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00b      	beq.n	8004144 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	e007      	b.n	8004144 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004138:	3301      	adds	r3, #1
 800413a:	b2db      	uxtb	r3, r3
 800413c:	b25a      	sxtb	r2, r3
 800413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004144:	2301      	movs	r3, #1
 8004146:	637b      	str	r3, [r7, #52]	; 0x34
 8004148:	e001      	b.n	800414e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800414a:	2300      	movs	r3, #0
 800414c:	637b      	str	r3, [r7, #52]	; 0x34
 800414e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004150:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800415a:	4618      	mov	r0, r3
 800415c:	3738      	adds	r7, #56	; 0x38
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004162:	b480      	push	{r7}
 8004164:	b085      	sub	sp, #20
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	2b00      	cmp	r3, #0
 8004170:	d006      	beq.n	8004180 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f1c3 0307 	rsb	r3, r3, #7
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	e001      	b.n	8004184 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004180:	2300      	movs	r3, #0
 8004182:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004184:	68fb      	ldr	r3, [r7, #12]
	}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr

08004190 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800419c:	2300      	movs	r3, #0
 800419e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10d      	bne.n	80041ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d14d      	bne.n	8004252 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f001 fada 	bl	8005774 <xTaskPriorityDisinherit>
 80041c0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	605a      	str	r2, [r3, #4]
 80041c8:	e043      	b.n	8004252 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d119      	bne.n	8004204 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6898      	ldr	r0, [r3, #8]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	461a      	mov	r2, r3
 80041da:	68b9      	ldr	r1, [r7, #8]
 80041dc:	f001 fdaa 	bl	8005d34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e8:	441a      	add	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d32b      	bcc.n	8004252 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	609a      	str	r2, [r3, #8]
 8004202:	e026      	b.n	8004252 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	68d8      	ldr	r0, [r3, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	461a      	mov	r2, r3
 800420e:	68b9      	ldr	r1, [r7, #8]
 8004210:	f001 fd90 	bl	8005d34 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	425b      	negs	r3, r3
 800421e:	441a      	add	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d207      	bcs.n	8004240 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	425b      	negs	r3, r3
 800423a:	441a      	add	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b02      	cmp	r3, #2
 8004244:	d105      	bne.n	8004252 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	3b01      	subs	r3, #1
 8004250:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800425a:	697b      	ldr	r3, [r7, #20]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	2b00      	cmp	r3, #0
 8004274:	d018      	beq.n	80042a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	441a      	add	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68da      	ldr	r2, [r3, #12]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	429a      	cmp	r2, r3
 800428e:	d303      	bcc.n	8004298 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68d9      	ldr	r1, [r3, #12]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	461a      	mov	r2, r3
 80042a2:	6838      	ldr	r0, [r7, #0]
 80042a4:	f001 fd46 	bl	8005d34 <memcpy>
	}
}
 80042a8:	bf00      	nop
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80042b8:	f7ff fa1e 	bl	80036f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042c4:	e011      	b.n	80042ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d012      	beq.n	80042f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3324      	adds	r3, #36	; 0x24
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 ffbc 	bl	8005250 <xTaskRemoveFromEventList>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80042de:	f001 f8b5 	bl	800544c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	dce9      	bgt.n	80042c6 <prvUnlockQueue+0x16>
 80042f2:	e000      	b.n	80042f6 <prvUnlockQueue+0x46>
					break;
 80042f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	22ff      	movs	r2, #255	; 0xff
 80042fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80042fe:	f7ff fa29 	bl	8003754 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004302:	f7ff f9f9 	bl	80036f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800430c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800430e:	e011      	b.n	8004334 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d012      	beq.n	800433e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3310      	adds	r3, #16
 800431c:	4618      	mov	r0, r3
 800431e:	f000 ff97 	bl	8005250 <xTaskRemoveFromEventList>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004328:	f001 f890 	bl	800544c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800432c:	7bbb      	ldrb	r3, [r7, #14]
 800432e:	3b01      	subs	r3, #1
 8004330:	b2db      	uxtb	r3, r3
 8004332:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004334:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004338:	2b00      	cmp	r3, #0
 800433a:	dce9      	bgt.n	8004310 <prvUnlockQueue+0x60>
 800433c:	e000      	b.n	8004340 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800433e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	22ff      	movs	r2, #255	; 0xff
 8004344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004348:	f7ff fa04 	bl	8003754 <vPortExitCritical>
}
 800434c:	bf00      	nop
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800435c:	f7ff f9cc 	bl	80036f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004364:	2b00      	cmp	r3, #0
 8004366:	d102      	bne.n	800436e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004368:	2301      	movs	r3, #1
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	e001      	b.n	8004372 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004372:	f7ff f9ef 	bl	8003754 <vPortExitCritical>

	return xReturn;
 8004376:	68fb      	ldr	r3, [r7, #12]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004388:	f7ff f9b6 	bl	80036f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004394:	429a      	cmp	r2, r3
 8004396:	d102      	bne.n	800439e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004398:	2301      	movs	r3, #1
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	e001      	b.n	80043a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800439e:	2300      	movs	r3, #0
 80043a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80043a2:	f7ff f9d7 	bl	8003754 <vPortExitCritical>

	return xReturn;
 80043a6:	68fb      	ldr	r3, [r7, #12]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08a      	sub	sp, #40	; 0x28
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d809      	bhi.n	80043d6 <xStreamBufferGenericCreate+0x26>
	__asm volatile
 80043c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	61bb      	str	r3, [r7, #24]
 80043d4:	e7fe      	b.n	80043d4 <xStreamBufferGenericCreate+0x24>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d909      	bls.n	80043f2 <xStreamBufferGenericCreate+0x42>
 80043de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	e7fe      	b.n	80043f0 <xStreamBufferGenericCreate+0x40>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <xStreamBufferGenericCreate+0x4c>
		{
			xTriggerLevelBytes = ( size_t ) 1; /*lint !e9044 Parameter modified to ensure it doesn't have a dangerous value. */
 80043f8:	2301      	movs	r3, #1
 80043fa:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	3301      	adds	r3, #1
 8004400:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	3320      	adds	r3, #32
 8004406:	4618      	mov	r0, r3
 8004408:	f7fe fe08 	bl	800301c <pvPortMalloc>
 800440c:	61f8      	str	r0, [r7, #28]

		if( pucAllocatedMemory != NULL )
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d009      	beq.n	8004428 <xStreamBufferGenericCreate+0x78>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	f103 0120 	add.w	r1, r3, #32
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	69f8      	ldr	r0, [r7, #28]
 8004424:	f000 fadf 	bl	80049e6 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t * ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8004428:	69fb      	ldr	r3, [r7, #28]
	}
 800442a:	4618      	mov	r0, r3
 800442c:	3720      	adds	r7, #32
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8004432:	b480      	push	{r7}
 8004434:	b087      	sub	sp, #28
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d109      	bne.n	8004458 <xStreamBufferSpacesAvailable+0x26>
 8004444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004448:	f383 8811 	msr	BASEPRI, r3
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	e7fe      	b.n	8004456 <xStreamBufferSpacesAvailable+0x24>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4413      	add	r3, r2
 8004462:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	3b01      	subs	r3, #1
 8004472:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	429a      	cmp	r2, r3
 800447c:	d304      	bcc.n	8004488 <xStreamBufferSpacesAvailable+0x56>
	{
		xSpace -= pxStreamBuffer->xLength;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8004488:	697b      	ldr	r3, [r7, #20]
}
 800448a:	4618      	mov	r0, r3
 800448c:	371c      	adds	r7, #28
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr

08004494 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b090      	sub	sp, #64	; 0x40
 8004498:	af02      	add	r7, sp, #8
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 80044a6:	2300      	movs	r3, #0
 80044a8:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d109      	bne.n	80044c8 <xStreamBufferSend+0x34>
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
 80044c6:	e7fe      	b.n	80044c6 <xStreamBufferSend+0x32>
	configASSERT( pxStreamBuffer );
 80044c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d109      	bne.n	80044e2 <xStreamBufferSend+0x4e>
 80044ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	623b      	str	r3, [r7, #32]
 80044e0:	e7fe      	b.n	80044e0 <xStreamBufferSend+0x4c>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80044e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e4:	7f1b      	ldrb	r3, [r3, #28]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <xStreamBufferSend+0x60>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80044ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f0:	3304      	adds	r3, #4
 80044f2:	633b      	str	r3, [r7, #48]	; 0x30
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d03e      	beq.n	8004578 <xStreamBufferSend+0xe4>
	{
		vTaskSetTimeOutState( &xTimeOut );
 80044fa:	f107 0314 	add.w	r3, r7, #20
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 ff08 	bl	8005314 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8004504:	f7ff f8f8 	bl	80036f8 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8004508:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800450a:	f7ff ff92 	bl	8004432 <xStreamBufferSpacesAvailable>
 800450e:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 8004510:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004514:	429a      	cmp	r2, r3
 8004516:	d216      	bcs.n	8004546 <xStreamBufferSend+0xb2>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8004518:	2000      	movs	r0, #0
 800451a:	f001 fb5b 	bl	8005bd4 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 800451e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d009      	beq.n	800453a <xStreamBufferSend+0xa6>
 8004526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	61fb      	str	r3, [r7, #28]
 8004538:	e7fe      	b.n	8004538 <xStreamBufferSend+0xa4>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 800453a:	f001 f869 	bl	8005610 <xTaskGetCurrentTaskHandle>
 800453e:	4602      	mov	r2, r0
 8004540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004542:	615a      	str	r2, [r3, #20]
 8004544:	e002      	b.n	800454c <xStreamBufferSend+0xb8>
				}
				else
				{
					taskEXIT_CRITICAL();
 8004546:	f7ff f905 	bl	8003754 <vPortExitCritical>
					break;
 800454a:	e015      	b.n	8004578 <xStreamBufferSend+0xe4>
				}
			}
			taskEXIT_CRITICAL();
 800454c:	f7ff f902 	bl	8003754 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, UINT32_MAX, NULL, xTicksToWait );
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	2200      	movs	r2, #0
 8004554:	f04f 31ff 	mov.w	r1, #4294967295
 8004558:	2000      	movs	r0, #0
 800455a:	f001 fa41 	bl	80059e0 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 800455e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004560:	2200      	movs	r2, #0
 8004562:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8004564:	463a      	mov	r2, r7
 8004566:	f107 0314 	add.w	r3, r7, #20
 800456a:	4611      	mov	r1, r2
 800456c:	4618      	mov	r0, r3
 800456e:	f000 ff0d 	bl	800538c <xTaskCheckForTimeOut>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0c5      	beq.n	8004504 <xStreamBufferSend+0x70>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8004578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800457a:	2b00      	cmp	r3, #0
 800457c:	d103      	bne.n	8004586 <xStreamBufferSend+0xf2>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800457e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004580:	f7ff ff57 	bl	8004432 <xStreamBufferSpacesAvailable>
 8004584:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8004586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	68b9      	ldr	r1, [r7, #8]
 8004590:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004592:	f000 f823 	bl	80045dc <prvWriteMessageToBuffer>
 8004596:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8004598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459a:	2b00      	cmp	r3, #0
 800459c:	d019      	beq.n	80045d2 <xStreamBufferSend+0x13e>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 800459e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80045a0:	f000 fa02 	bl	80049a8 <prvBytesInBuffer>
 80045a4:	4602      	mov	r2, r0
 80045a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d311      	bcc.n	80045d2 <xStreamBufferSend+0x13e>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 80045ae:	f000 fc6b 	bl	8004e88 <vTaskSuspendAll>
 80045b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d009      	beq.n	80045ce <xStreamBufferSend+0x13a>
 80045ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045bc:	6918      	ldr	r0, [r3, #16]
 80045be:	2300      	movs	r3, #0
 80045c0:	2200      	movs	r2, #0
 80045c2:	2100      	movs	r1, #0
 80045c4:	f001 fa66 	bl	8005a94 <xTaskGenericNotify>
 80045c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ca:	2200      	movs	r2, #0
 80045cc:	611a      	str	r2, [r3, #16]
 80045ce:	f000 fc69 	bl	8004ea4 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 80045d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3738      	adds	r7, #56	; 0x38
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
 80045e8:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d102      	bne.n	80045f6 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 80045f0:	2300      	movs	r3, #0
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	e01d      	b.n	8004632 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	7f1b      	ldrb	r3, [r3, #28]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d108      	bne.n	8004614 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8004602:	2301      	movs	r3, #1
 8004604:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace ); /*lint !e9044 Function parameter modified to ensure it is capped to available space. */
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	4293      	cmp	r3, r2
 800460c:	bf28      	it	cs
 800460e:	4613      	movcs	r3, r2
 8004610:	607b      	str	r3, [r7, #4]
 8004612:	e00e      	b.n	8004632 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	429a      	cmp	r2, r3
 800461a:	d308      	bcc.n	800462e <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 800461c:	2301      	movs	r3, #1
 800461e:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8004620:	1d3b      	adds	r3, r7, #4
 8004622:	2204      	movs	r2, #4
 8004624:	4619      	mov	r1, r3
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 f8d8 	bl	80047dc <prvWriteBytesToBuffer>
 800462c:	e001      	b.n	8004632 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 800462e:	2300      	movs	r3, #0
 8004630:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d007      	beq.n	8004648 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	461a      	mov	r2, r3
 800463c:	68b9      	ldr	r1, [r7, #8]
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 f8cc 	bl	80047dc <prvWriteBytesToBuffer>
 8004644:	6138      	str	r0, [r7, #16]
 8004646:	e001      	b.n	800464c <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8004648:	2300      	movs	r3, #0
 800464a:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 800464c:	693b      	ldr	r3, [r7, #16]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b08e      	sub	sp, #56	; 0x38
 800465a:	af02      	add	r7, sp, #8
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	607a      	str	r2, [r7, #4]
 8004662:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8004668:	2300      	movs	r3, #0
 800466a:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d109      	bne.n	8004686 <xStreamBufferReceive+0x30>
 8004672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004676:	f383 8811 	msr	BASEPRI, r3
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	61fb      	str	r3, [r7, #28]
 8004684:	e7fe      	b.n	8004684 <xStreamBufferReceive+0x2e>
	configASSERT( pxStreamBuffer );
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d109      	bne.n	80046a0 <xStreamBufferReceive+0x4a>
 800468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	61bb      	str	r3, [r7, #24]
 800469e:	e7fe      	b.n	800469e <xStreamBufferReceive+0x48>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	7f1b      	ldrb	r3, [r3, #28]
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <xStreamBufferReceive+0x5c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80046ac:	2304      	movs	r3, #4
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
 80046b0:	e001      	b.n	80046b6 <xStreamBufferReceive+0x60>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 80046b2:	2300      	movs	r3, #0
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d034      	beq.n	8004726 <xStreamBufferReceive+0xd0>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 80046bc:	f7ff f81c 	bl	80036f8 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80046c0:	6a38      	ldr	r0, [r7, #32]
 80046c2:	f000 f971 	bl	80049a8 <prvBytesInBuffer>
 80046c6:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 80046c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d815      	bhi.n	80046fc <xStreamBufferReceive+0xa6>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 80046d0:	2000      	movs	r0, #0
 80046d2:	f001 fa7f 	bl	8005bd4 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d009      	beq.n	80046f2 <xStreamBufferReceive+0x9c>
 80046de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	e7fe      	b.n	80046f0 <xStreamBufferReceive+0x9a>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 80046f2:	f000 ff8d 	bl	8005610 <xTaskGetCurrentTaskHandle>
 80046f6:	4602      	mov	r2, r0
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80046fc:	f7ff f82a 	bl	8003754 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8004700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	429a      	cmp	r2, r3
 8004706:	d812      	bhi.n	800472e <xStreamBufferReceive+0xd8>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, UINT32_MAX, NULL, xTicksToWait );
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2200      	movs	r2, #0
 800470c:	f04f 31ff 	mov.w	r1, #4294967295
 8004710:	2000      	movs	r0, #0
 8004712:	f001 f965 	bl	80059e0 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	2200      	movs	r2, #0
 800471a:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800471c:	6a38      	ldr	r0, [r7, #32]
 800471e:	f000 f943 	bl	80049a8 <prvBytesInBuffer>
 8004722:	62b8      	str	r0, [r7, #40]	; 0x28
 8004724:	e003      	b.n	800472e <xStreamBufferReceive+0xd8>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8004726:	6a38      	ldr	r0, [r7, #32]
 8004728:	f000 f93e 	bl	80049a8 <prvBytesInBuffer>
 800472c:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800472e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	429a      	cmp	r2, r3
 8004734:	d91d      	bls.n	8004772 <xStreamBufferReceive+0x11c>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	68b9      	ldr	r1, [r7, #8]
 8004740:	6a38      	ldr	r0, [r7, #32]
 8004742:	f000 f81b 	bl	800477c <prvReadMessageFromBuffer>
 8004746:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8004748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474a:	2b00      	cmp	r3, #0
 800474c:	d011      	beq.n	8004772 <xStreamBufferReceive+0x11c>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800474e:	f000 fb9b 	bl	8004e88 <vTaskSuspendAll>
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d009      	beq.n	800476e <xStreamBufferReceive+0x118>
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	6958      	ldr	r0, [r3, #20]
 800475e:	2300      	movs	r3, #0
 8004760:	2200      	movs	r2, #0
 8004762:	2100      	movs	r1, #0
 8004764:	f001 f996 	bl	8005a94 <xTaskGenericNotify>
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	2200      	movs	r2, #0
 800476c:	615a      	str	r2, [r3, #20]
 800476e:	f000 fb99 	bl	8004ea4 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8004772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004774:	4618      	mov	r0, r3
 8004776:	3730      	adds	r7, #48	; 0x30
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800478a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478c:	2b00      	cmp	r3, #0
 800478e:	d017      	beq.n	80047c0 <prvReadMessageFromBuffer+0x44>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	61fb      	str	r3, [r7, #28]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8004796:	f107 0114 	add.w	r1, r7, #20
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 f88b 	bl	80048ba <prvReadBytesFromBuffer>

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d207      	bcs.n	80047c4 <prvReadMessageFromBuffer+0x48>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	69fa      	ldr	r2, [r7, #28]
 80047b8:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 80047ba:	2300      	movs	r3, #0
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	e001      	b.n	80047c4 <prvReadMessageFromBuffer+0x48>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	617b      	str	r3, [r7, #20]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 f875 	bl	80048ba <prvReadBytesFromBuffer>
 80047d0:	61b8      	str	r0, [r7, #24]

	return xReceivedLength;
 80047d2:	69bb      	ldr	r3, [r7, #24]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3720      	adds	r7, #32
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08a      	sub	sp, #40	; 0x28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d109      	bne.n	8004802 <prvWriteBytesToBuffer+0x26>
 80047ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	61fb      	str	r3, [r7, #28]
 8004800:	e7fe      	b.n	8004800 <prvWriteBytesToBuffer+0x24>

	xNextHead = pxStreamBuffer->xHead;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	4293      	cmp	r3, r2
 8004814:	bf28      	it	cs
 8004816:	4613      	movcs	r3, r2
 8004818:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800481a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	441a      	add	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	429a      	cmp	r2, r3
 8004826:	d909      	bls.n	800483c <prvWriteBytesToBuffer+0x60>
 8004828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482c:	f383 8811 	msr	BASEPRI, r3
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	e7fe      	b.n	800483a <prvWriteBytesToBuffer+0x5e>
	memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	699a      	ldr	r2, [r3, #24]
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	4413      	add	r3, r2
 8004844:	6a3a      	ldr	r2, [r7, #32]
 8004846:	68b9      	ldr	r1, [r7, #8]
 8004848:	4618      	mov	r0, r3
 800484a:	f001 fa73 	bl	8005d34 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	429a      	cmp	r2, r3
 8004854:	d91b      	bls.n	800488e <prvWriteBytesToBuffer+0xb2>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	1ad2      	subs	r2, r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	429a      	cmp	r2, r3
 8004862:	d909      	bls.n	8004878 <prvWriteBytesToBuffer+0x9c>
 8004864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	e7fe      	b.n	8004876 <prvWriteBytesToBuffer+0x9a>
		memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6998      	ldr	r0, [r3, #24]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	18d1      	adds	r1, r2, r3
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	461a      	mov	r2, r3
 800488a:	f001 fa53 	bl	8005d34 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 800488e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4413      	add	r3, r2
 8004894:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489c:	429a      	cmp	r2, r3
 800489e:	d304      	bcc.n	80048aa <prvWriteBytesToBuffer+0xce>
	{
		xNextHead -= pxStreamBuffer->xLength;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ae:	605a      	str	r2, [r3, #4]

	return xCount;
 80048b0:	687b      	ldr	r3, [r7, #4]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3728      	adds	r7, #40	; 0x28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b08a      	sub	sp, #40	; 0x28
 80048be:	af00      	add	r7, sp, #0
 80048c0:	60f8      	str	r0, [r7, #12]
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	607a      	str	r2, [r7, #4]
 80048c6:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	4293      	cmp	r3, r2
 80048ce:	bf28      	it	cs
 80048d0:	4613      	movcs	r3, r2
 80048d2:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d061      	beq.n	800499e <prvReadBytesFromBuffer+0xe4>
	{
		xNextTail = pxStreamBuffer->xTail;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	6a3a      	ldr	r2, [r7, #32]
 80048ea:	4293      	cmp	r3, r2
 80048ec:	bf28      	it	cs
 80048ee:	4613      	movcs	r3, r2
 80048f0:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 80048f2:	69fa      	ldr	r2, [r7, #28]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d909      	bls.n	800490e <prvReadBytesFromBuffer+0x54>
 80048fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	61bb      	str	r3, [r7, #24]
 800490c:	e7fe      	b.n	800490c <prvReadBytesFromBuffer+0x52>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800490e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	441a      	add	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	429a      	cmp	r2, r3
 800491a:	d909      	bls.n	8004930 <prvReadBytesFromBuffer+0x76>
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	617b      	str	r3, [r7, #20]
 800492e:	e7fe      	b.n	800492e <prvReadBytesFromBuffer+0x74>
		memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	699a      	ldr	r2, [r3, #24]
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	4413      	add	r3, r2
 8004938:	69fa      	ldr	r2, [r7, #28]
 800493a:	4619      	mov	r1, r3
 800493c:	68b8      	ldr	r0, [r7, #8]
 800493e:	f001 f9f9 	bl	8005d34 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8004942:	6a3a      	ldr	r2, [r7, #32]
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	429a      	cmp	r2, r3
 8004948:	d918      	bls.n	800497c <prvReadBytesFromBuffer+0xc2>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 800494a:	6a3a      	ldr	r2, [r7, #32]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	429a      	cmp	r2, r3
 8004950:	d909      	bls.n	8004966 <prvReadBytesFromBuffer+0xac>
 8004952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	613b      	str	r3, [r7, #16]
 8004964:	e7fe      	b.n	8004964 <prvReadBytesFromBuffer+0xaa>
			memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	18d0      	adds	r0, r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6999      	ldr	r1, [r3, #24]
 8004970:	6a3a      	ldr	r2, [r7, #32]
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	461a      	mov	r2, r3
 8004978:	f001 f9dc 	bl	8005d34 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800497c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	4413      	add	r3, r2
 8004982:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800498a:	429a      	cmp	r2, r3
 800498c:	d304      	bcc.n	8004998 <prvReadBytesFromBuffer+0xde>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800499c:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800499e:	6a3b      	ldr	r3, [r7, #32]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3728      	adds	r7, #40	; 0x28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	4413      	add	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d304      	bcc.n	80049da <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80049da:	68fb      	ldr	r3, [r7, #12]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bc80      	pop	{r7}
 80049e4:	4770      	bx	lr

080049e6 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  BaseType_t xIsMessageBuffer )
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b086      	sub	sp, #24
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	60f8      	str	r0, [r7, #12]
 80049ee:	60b9      	str	r1, [r7, #8]
 80049f0:	607a      	str	r2, [r7, #4]
 80049f2:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 80049f4:	2355      	movs	r3, #85	; 0x55
 80049f6:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6979      	ldr	r1, [r7, #20]
 80049fc:	68b8      	ldr	r0, [r7, #8]
 80049fe:	f001 f9a4 	bl	8005d4a <memset>
 8004a02:	4602      	mov	r2, r0
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d009      	beq.n	8004a1e <prvInitialiseNewStreamBuffer+0x38>
 8004a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0e:	f383 8811 	msr	BASEPRI, r3
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	613b      	str	r3, [r7, #16]
 8004a1c:	e7fe      	b.n	8004a1c <prvInitialiseNewStreamBuffer+0x36>
	}
	#endif

	memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8004a1e:	2220      	movs	r2, #32
 8004a20:	2100      	movs	r1, #0
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f001 f991 	bl	8005d4a <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	60da      	str	r2, [r3, #12]

	if( xIsMessageBuffer != pdFALSE )
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d006      	beq.n	8004a4e <prvInitialiseNewStreamBuffer+0x68>
	{
		pxStreamBuffer->ucFlags |= sbFLAGS_IS_MESSAGE_BUFFER;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	7f1b      	ldrb	r3, [r3, #28]
 8004a44:	f043 0301 	orr.w	r3, r3, #1
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	771a      	strb	r2, [r3, #28]
	}
}
 8004a4e:	bf00      	nop
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b08e      	sub	sp, #56	; 0x38
 8004a5a:	af04      	add	r7, sp, #16
 8004a5c:	60f8      	str	r0, [r7, #12]
 8004a5e:	60b9      	str	r1, [r7, #8]
 8004a60:	607a      	str	r2, [r7, #4]
 8004a62:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d109      	bne.n	8004a7e <xTaskCreateStatic+0x28>
 8004a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	623b      	str	r3, [r7, #32]
 8004a7c:	e7fe      	b.n	8004a7c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d109      	bne.n	8004a98 <xTaskCreateStatic+0x42>
 8004a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	61fb      	str	r3, [r7, #28]
 8004a96:	e7fe      	b.n	8004a96 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a98:	2354      	movs	r3, #84	; 0x54
 8004a9a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	2b54      	cmp	r3, #84	; 0x54
 8004aa0:	d009      	beq.n	8004ab6 <xTaskCreateStatic+0x60>
 8004aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	61bb      	str	r3, [r7, #24]
 8004ab4:	e7fe      	b.n	8004ab4 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d01e      	beq.n	8004afa <xTaskCreateStatic+0xa4>
 8004abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d01b      	beq.n	8004afa <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	9303      	str	r3, [sp, #12]
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	9302      	str	r3, [sp, #8]
 8004adc:	f107 0314 	add.w	r3, r7, #20
 8004ae0:	9301      	str	r3, [sp, #4]
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	68b9      	ldr	r1, [r7, #8]
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 f850 	bl	8004b92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004af2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004af4:	f000 f8cc 	bl	8004c90 <prvAddNewTaskToReadyList>
 8004af8:	e001      	b.n	8004afe <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004afe:	697b      	ldr	r3, [r7, #20]
	}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3728      	adds	r7, #40	; 0x28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08c      	sub	sp, #48	; 0x30
 8004b0c:	af04      	add	r7, sp, #16
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	603b      	str	r3, [r7, #0]
 8004b14:	4613      	mov	r3, r2
 8004b16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b18:	88fb      	ldrh	r3, [r7, #6]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7fe fa7d 	bl	800301c <pvPortMalloc>
 8004b22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00e      	beq.n	8004b48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004b2a:	2054      	movs	r0, #84	; 0x54
 8004b2c:	f7fe fa76 	bl	800301c <pvPortMalloc>
 8004b30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	631a      	str	r2, [r3, #48]	; 0x30
 8004b3e:	e005      	b.n	8004b4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b40:	6978      	ldr	r0, [r7, #20]
 8004b42:	f7fe fb2d 	bl	80031a0 <vPortFree>
 8004b46:	e001      	b.n	8004b4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d017      	beq.n	8004b82 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b5a:	88fa      	ldrh	r2, [r7, #6]
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	9303      	str	r3, [sp, #12]
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	9302      	str	r3, [sp, #8]
 8004b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b66:	9301      	str	r3, [sp, #4]
 8004b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 f80e 	bl	8004b92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b76:	69f8      	ldr	r0, [r7, #28]
 8004b78:	f000 f88a 	bl	8004c90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	61bb      	str	r3, [r7, #24]
 8004b80:	e002      	b.n	8004b88 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b82:	f04f 33ff 	mov.w	r3, #4294967295
 8004b86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b88:	69bb      	ldr	r3, [r7, #24]
	}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3720      	adds	r7, #32
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b088      	sub	sp, #32
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	60f8      	str	r0, [r7, #12]
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	607a      	str	r2, [r7, #4]
 8004b9e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004baa:	3b01      	subs	r3, #1
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4413      	add	r3, r2
 8004bb0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	f023 0307 	bic.w	r3, r3, #7
 8004bb8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d009      	beq.n	8004bd8 <prvInitialiseNewTask+0x46>
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	e7fe      	b.n	8004bd6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bd8:	2300      	movs	r3, #0
 8004bda:	61fb      	str	r3, [r7, #28]
 8004bdc:	e012      	b.n	8004c04 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	4413      	add	r3, r2
 8004be4:	7819      	ldrb	r1, [r3, #0]
 8004be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	4413      	add	r3, r2
 8004bec:	3334      	adds	r3, #52	; 0x34
 8004bee:	460a      	mov	r2, r1
 8004bf0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d006      	beq.n	8004c0c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	3301      	adds	r3, #1
 8004c02:	61fb      	str	r3, [r7, #28]
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	2b0f      	cmp	r3, #15
 8004c08:	d9e9      	bls.n	8004bde <prvInitialiseNewTask+0x4c>
 8004c0a:	e000      	b.n	8004c0e <prvInitialiseNewTask+0x7c>
		{
			break;
 8004c0c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c18:	2b06      	cmp	r3, #6
 8004c1a:	d901      	bls.n	8004c20 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c1c:	2306      	movs	r3, #6
 8004c1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c2a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2e:	2200      	movs	r2, #0
 8004c30:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c34:	3304      	adds	r3, #4
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fe fbe3 	bl	8003402 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	3318      	adds	r3, #24
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fe fbde 	bl	8003402 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4e:	f1c3 0207 	rsb	r2, r3, #7
 8004c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5e:	2200      	movs	r2, #0
 8004c60:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	68f9      	ldr	r1, [r7, #12]
 8004c6e:	69b8      	ldr	r0, [r7, #24]
 8004c70:	f7fe fc58 	bl	8003524 <pxPortInitialiseStack>
 8004c74:	4602      	mov	r2, r0
 8004c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c78:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d002      	beq.n	8004c86 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c86:	bf00      	nop
 8004c88:	3720      	adds	r7, #32
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c98:	f7fe fd2e 	bl	80036f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c9c:	4b2a      	ldr	r3, [pc, #168]	; (8004d48 <prvAddNewTaskToReadyList+0xb8>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	4a29      	ldr	r2, [pc, #164]	; (8004d48 <prvAddNewTaskToReadyList+0xb8>)
 8004ca4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ca6:	4b29      	ldr	r3, [pc, #164]	; (8004d4c <prvAddNewTaskToReadyList+0xbc>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d109      	bne.n	8004cc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004cae:	4a27      	ldr	r2, [pc, #156]	; (8004d4c <prvAddNewTaskToReadyList+0xbc>)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004cb4:	4b24      	ldr	r3, [pc, #144]	; (8004d48 <prvAddNewTaskToReadyList+0xb8>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d110      	bne.n	8004cde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004cbc:	f000 fbea 	bl	8005494 <prvInitialiseTaskLists>
 8004cc0:	e00d      	b.n	8004cde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004cc2:	4b23      	ldr	r3, [pc, #140]	; (8004d50 <prvAddNewTaskToReadyList+0xc0>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d109      	bne.n	8004cde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004cca:	4b20      	ldr	r3, [pc, #128]	; (8004d4c <prvAddNewTaskToReadyList+0xbc>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d802      	bhi.n	8004cde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004cd8:	4a1c      	ldr	r2, [pc, #112]	; (8004d4c <prvAddNewTaskToReadyList+0xbc>)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004cde:	4b1d      	ldr	r3, [pc, #116]	; (8004d54 <prvAddNewTaskToReadyList+0xc4>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	4a1b      	ldr	r2, [pc, #108]	; (8004d54 <prvAddNewTaskToReadyList+0xc4>)
 8004ce6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	2201      	movs	r2, #1
 8004cee:	409a      	lsls	r2, r3
 8004cf0:	4b19      	ldr	r3, [pc, #100]	; (8004d58 <prvAddNewTaskToReadyList+0xc8>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	4a18      	ldr	r2, [pc, #96]	; (8004d58 <prvAddNewTaskToReadyList+0xc8>)
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfe:	4613      	mov	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4a15      	ldr	r2, [pc, #84]	; (8004d5c <prvAddNewTaskToReadyList+0xcc>)
 8004d08:	441a      	add	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4610      	mov	r0, r2
 8004d12:	f7fe fb82 	bl	800341a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d16:	f7fe fd1d 	bl	8003754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d1a:	4b0d      	ldr	r3, [pc, #52]	; (8004d50 <prvAddNewTaskToReadyList+0xc0>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00e      	beq.n	8004d40 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d22:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <prvAddNewTaskToReadyList+0xbc>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d207      	bcs.n	8004d40 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d30:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <prvAddNewTaskToReadyList+0xd0>)
 8004d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d40:	bf00      	nop
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	20000fc4 	.word	0x20000fc4
 8004d4c:	20000ec4 	.word	0x20000ec4
 8004d50:	20000fd0 	.word	0x20000fd0
 8004d54:	20000fe0 	.word	0x20000fe0
 8004d58:	20000fcc 	.word	0x20000fcc
 8004d5c:	20000ec8 	.word	0x20000ec8
 8004d60:	e000ed04 	.word	0xe000ed04

08004d64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d016      	beq.n	8004da4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d76:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <vTaskDelay+0x60>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d009      	beq.n	8004d92 <vTaskDelay+0x2e>
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	60bb      	str	r3, [r7, #8]
 8004d90:	e7fe      	b.n	8004d90 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004d92:	f000 f879 	bl	8004e88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d96:	2100      	movs	r1, #0
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 ff41 	bl	8005c20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d9e:	f000 f881 	bl	8004ea4 <xTaskResumeAll>
 8004da2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d107      	bne.n	8004dba <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004daa:	4b07      	ldr	r3, [pc, #28]	; (8004dc8 <vTaskDelay+0x64>)
 8004dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	f3bf 8f4f 	dsb	sy
 8004db6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004dba:	bf00      	nop
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	20000fec 	.word	0x20000fec
 8004dc8:	e000ed04 	.word	0xe000ed04

08004dcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08a      	sub	sp, #40	; 0x28
 8004dd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004dda:	463a      	mov	r2, r7
 8004ddc:	1d39      	adds	r1, r7, #4
 8004dde:	f107 0308 	add.w	r3, r7, #8
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fb f9b4 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004de8:	6839      	ldr	r1, [r7, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	9202      	str	r2, [sp, #8]
 8004df0:	9301      	str	r3, [sp, #4]
 8004df2:	2300      	movs	r3, #0
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	2300      	movs	r3, #0
 8004df8:	460a      	mov	r2, r1
 8004dfa:	491d      	ldr	r1, [pc, #116]	; (8004e70 <vTaskStartScheduler+0xa4>)
 8004dfc:	481d      	ldr	r0, [pc, #116]	; (8004e74 <vTaskStartScheduler+0xa8>)
 8004dfe:	f7ff fe2a 	bl	8004a56 <xTaskCreateStatic>
 8004e02:	4602      	mov	r2, r0
 8004e04:	4b1c      	ldr	r3, [pc, #112]	; (8004e78 <vTaskStartScheduler+0xac>)
 8004e06:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e08:	4b1b      	ldr	r3, [pc, #108]	; (8004e78 <vTaskStartScheduler+0xac>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e10:	2301      	movs	r3, #1
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	e001      	b.n	8004e1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e16:	2300      	movs	r3, #0
 8004e18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d115      	bne.n	8004e4c <vTaskStartScheduler+0x80>
 8004e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e32:	4b12      	ldr	r3, [pc, #72]	; (8004e7c <vTaskStartScheduler+0xb0>)
 8004e34:	f04f 32ff 	mov.w	r2, #4294967295
 8004e38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e3a:	4b11      	ldr	r3, [pc, #68]	; (8004e80 <vTaskStartScheduler+0xb4>)
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004e40:	4b10      	ldr	r3, [pc, #64]	; (8004e84 <vTaskStartScheduler+0xb8>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e46:	f7fe fbe7 	bl	8003618 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e4a:	e00d      	b.n	8004e68 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e52:	d109      	bne.n	8004e68 <vTaskStartScheduler+0x9c>
 8004e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	e7fe      	b.n	8004e66 <vTaskStartScheduler+0x9a>
}
 8004e68:	bf00      	nop
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	08005df0 	.word	0x08005df0
 8004e74:	08005465 	.word	0x08005465
 8004e78:	20000fe8 	.word	0x20000fe8
 8004e7c:	20000fe4 	.word	0x20000fe4
 8004e80:	20000fd0 	.word	0x20000fd0
 8004e84:	20000fc8 	.word	0x20000fc8

08004e88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e88:	b480      	push	{r7}
 8004e8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004e8c:	4b04      	ldr	r3, [pc, #16]	; (8004ea0 <vTaskSuspendAll+0x18>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3301      	adds	r3, #1
 8004e92:	4a03      	ldr	r2, [pc, #12]	; (8004ea0 <vTaskSuspendAll+0x18>)
 8004e94:	6013      	str	r3, [r2, #0]
}
 8004e96:	bf00      	nop
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bc80      	pop	{r7}
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	20000fec 	.word	0x20000fec

08004ea4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004eb2:	4b41      	ldr	r3, [pc, #260]	; (8004fb8 <xTaskResumeAll+0x114>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d109      	bne.n	8004ece <xTaskResumeAll+0x2a>
 8004eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	e7fe      	b.n	8004ecc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ece:	f7fe fc13 	bl	80036f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ed2:	4b39      	ldr	r3, [pc, #228]	; (8004fb8 <xTaskResumeAll+0x114>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	4a37      	ldr	r2, [pc, #220]	; (8004fb8 <xTaskResumeAll+0x114>)
 8004eda:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004edc:	4b36      	ldr	r3, [pc, #216]	; (8004fb8 <xTaskResumeAll+0x114>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d161      	bne.n	8004fa8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ee4:	4b35      	ldr	r3, [pc, #212]	; (8004fbc <xTaskResumeAll+0x118>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d05d      	beq.n	8004fa8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004eec:	e02e      	b.n	8004f4c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004eee:	4b34      	ldr	r3, [pc, #208]	; (8004fc0 <xTaskResumeAll+0x11c>)
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	3318      	adds	r3, #24
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fe fae8 	bl	80034d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	3304      	adds	r3, #4
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7fe fae3 	bl	80034d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0e:	2201      	movs	r2, #1
 8004f10:	409a      	lsls	r2, r3
 8004f12:	4b2c      	ldr	r3, [pc, #176]	; (8004fc4 <xTaskResumeAll+0x120>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	4a2a      	ldr	r2, [pc, #168]	; (8004fc4 <xTaskResumeAll+0x120>)
 8004f1a:	6013      	str	r3, [r2, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f20:	4613      	mov	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4a27      	ldr	r2, [pc, #156]	; (8004fc8 <xTaskResumeAll+0x124>)
 8004f2a:	441a      	add	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	3304      	adds	r3, #4
 8004f30:	4619      	mov	r1, r3
 8004f32:	4610      	mov	r0, r2
 8004f34:	f7fe fa71 	bl	800341a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f3c:	4b23      	ldr	r3, [pc, #140]	; (8004fcc <xTaskResumeAll+0x128>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d302      	bcc.n	8004f4c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004f46:	4b22      	ldr	r3, [pc, #136]	; (8004fd0 <xTaskResumeAll+0x12c>)
 8004f48:	2201      	movs	r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f4c:	4b1c      	ldr	r3, [pc, #112]	; (8004fc0 <xTaskResumeAll+0x11c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1cc      	bne.n	8004eee <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f5a:	f000 fb35 	bl	80055c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004f5e:	4b1d      	ldr	r3, [pc, #116]	; (8004fd4 <xTaskResumeAll+0x130>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d010      	beq.n	8004f8c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f6a:	f000 f837 	bl	8004fdc <xTaskIncrementTick>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004f74:	4b16      	ldr	r3, [pc, #88]	; (8004fd0 <xTaskResumeAll+0x12c>)
 8004f76:	2201      	movs	r2, #1
 8004f78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1f1      	bne.n	8004f6a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004f86:	4b13      	ldr	r3, [pc, #76]	; (8004fd4 <xTaskResumeAll+0x130>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f8c:	4b10      	ldr	r3, [pc, #64]	; (8004fd0 <xTaskResumeAll+0x12c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d009      	beq.n	8004fa8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f94:	2301      	movs	r3, #1
 8004f96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f98:	4b0f      	ldr	r3, [pc, #60]	; (8004fd8 <xTaskResumeAll+0x134>)
 8004f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fa8:	f7fe fbd4 	bl	8003754 <vPortExitCritical>

	return xAlreadyYielded;
 8004fac:	68bb      	ldr	r3, [r7, #8]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20000fec 	.word	0x20000fec
 8004fbc:	20000fc4 	.word	0x20000fc4
 8004fc0:	20000f84 	.word	0x20000f84
 8004fc4:	20000fcc 	.word	0x20000fcc
 8004fc8:	20000ec8 	.word	0x20000ec8
 8004fcc:	20000ec4 	.word	0x20000ec4
 8004fd0:	20000fd8 	.word	0x20000fd8
 8004fd4:	20000fd4 	.word	0x20000fd4
 8004fd8:	e000ed04 	.word	0xe000ed04

08004fdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fe6:	4b50      	ldr	r3, [pc, #320]	; (8005128 <xTaskIncrementTick+0x14c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f040 808c 	bne.w	8005108 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ff0:	4b4e      	ldr	r3, [pc, #312]	; (800512c <xTaskIncrementTick+0x150>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ff8:	4a4c      	ldr	r2, [pc, #304]	; (800512c <xTaskIncrementTick+0x150>)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d11f      	bne.n	8005044 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005004:	4b4a      	ldr	r3, [pc, #296]	; (8005130 <xTaskIncrementTick+0x154>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d009      	beq.n	8005022 <xTaskIncrementTick+0x46>
 800500e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	603b      	str	r3, [r7, #0]
 8005020:	e7fe      	b.n	8005020 <xTaskIncrementTick+0x44>
 8005022:	4b43      	ldr	r3, [pc, #268]	; (8005130 <xTaskIncrementTick+0x154>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	4b42      	ldr	r3, [pc, #264]	; (8005134 <xTaskIncrementTick+0x158>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a40      	ldr	r2, [pc, #256]	; (8005130 <xTaskIncrementTick+0x154>)
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	4a40      	ldr	r2, [pc, #256]	; (8005134 <xTaskIncrementTick+0x158>)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	4b40      	ldr	r3, [pc, #256]	; (8005138 <xTaskIncrementTick+0x15c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3301      	adds	r3, #1
 800503c:	4a3e      	ldr	r2, [pc, #248]	; (8005138 <xTaskIncrementTick+0x15c>)
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	f000 fac2 	bl	80055c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005044:	4b3d      	ldr	r3, [pc, #244]	; (800513c <xTaskIncrementTick+0x160>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	429a      	cmp	r2, r3
 800504c:	d34d      	bcc.n	80050ea <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800504e:	4b38      	ldr	r3, [pc, #224]	; (8005130 <xTaskIncrementTick+0x154>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <xTaskIncrementTick+0x80>
 8005058:	2301      	movs	r3, #1
 800505a:	e000      	b.n	800505e <xTaskIncrementTick+0x82>
 800505c:	2300      	movs	r3, #0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d004      	beq.n	800506c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005062:	4b36      	ldr	r3, [pc, #216]	; (800513c <xTaskIncrementTick+0x160>)
 8005064:	f04f 32ff 	mov.w	r2, #4294967295
 8005068:	601a      	str	r2, [r3, #0]
					break;
 800506a:	e03e      	b.n	80050ea <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800506c:	4b30      	ldr	r3, [pc, #192]	; (8005130 <xTaskIncrementTick+0x154>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	429a      	cmp	r2, r3
 8005082:	d203      	bcs.n	800508c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005084:	4a2d      	ldr	r2, [pc, #180]	; (800513c <xTaskIncrementTick+0x160>)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6013      	str	r3, [r2, #0]
						break;
 800508a:	e02e      	b.n	80050ea <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	3304      	adds	r3, #4
 8005090:	4618      	mov	r0, r3
 8005092:	f7fe fa1d 	bl	80034d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509a:	2b00      	cmp	r3, #0
 800509c:	d004      	beq.n	80050a8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	3318      	adds	r3, #24
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fe fa14 	bl	80034d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ac:	2201      	movs	r2, #1
 80050ae:	409a      	lsls	r2, r3
 80050b0:	4b23      	ldr	r3, [pc, #140]	; (8005140 <xTaskIncrementTick+0x164>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	4a22      	ldr	r2, [pc, #136]	; (8005140 <xTaskIncrementTick+0x164>)
 80050b8:	6013      	str	r3, [r2, #0]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4a1f      	ldr	r2, [pc, #124]	; (8005144 <xTaskIncrementTick+0x168>)
 80050c8:	441a      	add	r2, r3
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	3304      	adds	r3, #4
 80050ce:	4619      	mov	r1, r3
 80050d0:	4610      	mov	r0, r2
 80050d2:	f7fe f9a2 	bl	800341a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050da:	4b1b      	ldr	r3, [pc, #108]	; (8005148 <xTaskIncrementTick+0x16c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d3b4      	bcc.n	800504e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80050e4:	2301      	movs	r3, #1
 80050e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050e8:	e7b1      	b.n	800504e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050ea:	4b17      	ldr	r3, [pc, #92]	; (8005148 <xTaskIncrementTick+0x16c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f0:	4914      	ldr	r1, [pc, #80]	; (8005144 <xTaskIncrementTick+0x168>)
 80050f2:	4613      	mov	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	440b      	add	r3, r1
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d907      	bls.n	8005112 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8005102:	2301      	movs	r3, #1
 8005104:	617b      	str	r3, [r7, #20]
 8005106:	e004      	b.n	8005112 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005108:	4b10      	ldr	r3, [pc, #64]	; (800514c <xTaskIncrementTick+0x170>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3301      	adds	r3, #1
 800510e:	4a0f      	ldr	r2, [pc, #60]	; (800514c <xTaskIncrementTick+0x170>)
 8005110:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005112:	4b0f      	ldr	r3, [pc, #60]	; (8005150 <xTaskIncrementTick+0x174>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800511a:	2301      	movs	r3, #1
 800511c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800511e:	697b      	ldr	r3, [r7, #20]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	20000fec 	.word	0x20000fec
 800512c:	20000fc8 	.word	0x20000fc8
 8005130:	20000f7c 	.word	0x20000f7c
 8005134:	20000f80 	.word	0x20000f80
 8005138:	20000fdc 	.word	0x20000fdc
 800513c:	20000fe4 	.word	0x20000fe4
 8005140:	20000fcc 	.word	0x20000fcc
 8005144:	20000ec8 	.word	0x20000ec8
 8005148:	20000ec4 	.word	0x20000ec4
 800514c:	20000fd4 	.word	0x20000fd4
 8005150:	20000fd8 	.word	0x20000fd8

08005154 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800515a:	4b26      	ldr	r3, [pc, #152]	; (80051f4 <vTaskSwitchContext+0xa0>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005162:	4b25      	ldr	r3, [pc, #148]	; (80051f8 <vTaskSwitchContext+0xa4>)
 8005164:	2201      	movs	r2, #1
 8005166:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005168:	e03e      	b.n	80051e8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800516a:	4b23      	ldr	r3, [pc, #140]	; (80051f8 <vTaskSwitchContext+0xa4>)
 800516c:	2200      	movs	r2, #0
 800516e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005170:	4b22      	ldr	r3, [pc, #136]	; (80051fc <vTaskSwitchContext+0xa8>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	fab3 f383 	clz	r3, r3
 800517c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800517e:	7afb      	ldrb	r3, [r7, #11]
 8005180:	f1c3 031f 	rsb	r3, r3, #31
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	491e      	ldr	r1, [pc, #120]	; (8005200 <vTaskSwitchContext+0xac>)
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	4613      	mov	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4413      	add	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	440b      	add	r3, r1
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d109      	bne.n	80051ae <vTaskSwitchContext+0x5a>
	__asm volatile
 800519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	607b      	str	r3, [r7, #4]
 80051ac:	e7fe      	b.n	80051ac <vTaskSwitchContext+0x58>
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	4613      	mov	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4a11      	ldr	r2, [pc, #68]	; (8005200 <vTaskSwitchContext+0xac>)
 80051ba:	4413      	add	r3, r2
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	605a      	str	r2, [r3, #4]
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	3308      	adds	r3, #8
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d104      	bne.n	80051de <vTaskSwitchContext+0x8a>
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	605a      	str	r2, [r3, #4]
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	4a07      	ldr	r2, [pc, #28]	; (8005204 <vTaskSwitchContext+0xb0>)
 80051e6:	6013      	str	r3, [r2, #0]
}
 80051e8:	bf00      	nop
 80051ea:	371c      	adds	r7, #28
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bc80      	pop	{r7}
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	20000fec 	.word	0x20000fec
 80051f8:	20000fd8 	.word	0x20000fd8
 80051fc:	20000fcc 	.word	0x20000fcc
 8005200:	20000ec8 	.word	0x20000ec8
 8005204:	20000ec4 	.word	0x20000ec4

08005208 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d109      	bne.n	800522c <vTaskPlaceOnEventList+0x24>
 8005218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521c:	f383 8811 	msr	BASEPRI, r3
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	60fb      	str	r3, [r7, #12]
 800522a:	e7fe      	b.n	800522a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800522c:	4b07      	ldr	r3, [pc, #28]	; (800524c <vTaskPlaceOnEventList+0x44>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3318      	adds	r3, #24
 8005232:	4619      	mov	r1, r3
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7fe f913 	bl	8003460 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800523a:	2101      	movs	r1, #1
 800523c:	6838      	ldr	r0, [r7, #0]
 800523e:	f000 fcef 	bl	8005c20 <prvAddCurrentTaskToDelayedList>
}
 8005242:	bf00      	nop
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	20000ec4 	.word	0x20000ec4

08005250 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d109      	bne.n	800527a <xTaskRemoveFromEventList+0x2a>
 8005266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526a:	f383 8811 	msr	BASEPRI, r3
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	e7fe      	b.n	8005278 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	3318      	adds	r3, #24
 800527e:	4618      	mov	r0, r3
 8005280:	f7fe f926 	bl	80034d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005284:	4b1d      	ldr	r3, [pc, #116]	; (80052fc <xTaskRemoveFromEventList+0xac>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d11c      	bne.n	80052c6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	3304      	adds	r3, #4
 8005290:	4618      	mov	r0, r3
 8005292:	f7fe f91d 	bl	80034d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529a:	2201      	movs	r2, #1
 800529c:	409a      	lsls	r2, r3
 800529e:	4b18      	ldr	r3, [pc, #96]	; (8005300 <xTaskRemoveFromEventList+0xb0>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	4a16      	ldr	r2, [pc, #88]	; (8005300 <xTaskRemoveFromEventList+0xb0>)
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ac:	4613      	mov	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4a13      	ldr	r2, [pc, #76]	; (8005304 <xTaskRemoveFromEventList+0xb4>)
 80052b6:	441a      	add	r2, r3
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	3304      	adds	r3, #4
 80052bc:	4619      	mov	r1, r3
 80052be:	4610      	mov	r0, r2
 80052c0:	f7fe f8ab 	bl	800341a <vListInsertEnd>
 80052c4:	e005      	b.n	80052d2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	3318      	adds	r3, #24
 80052ca:	4619      	mov	r1, r3
 80052cc:	480e      	ldr	r0, [pc, #56]	; (8005308 <xTaskRemoveFromEventList+0xb8>)
 80052ce:	f7fe f8a4 	bl	800341a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d6:	4b0d      	ldr	r3, [pc, #52]	; (800530c <xTaskRemoveFromEventList+0xbc>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052dc:	429a      	cmp	r2, r3
 80052de:	d905      	bls.n	80052ec <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80052e0:	2301      	movs	r3, #1
 80052e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80052e4:	4b0a      	ldr	r3, [pc, #40]	; (8005310 <xTaskRemoveFromEventList+0xc0>)
 80052e6:	2201      	movs	r2, #1
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	e001      	b.n	80052f0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80052ec:	2300      	movs	r3, #0
 80052ee:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80052f0:	697b      	ldr	r3, [r7, #20]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	20000fec 	.word	0x20000fec
 8005300:	20000fcc 	.word	0x20000fcc
 8005304:	20000ec8 	.word	0x20000ec8
 8005308:	20000f84 	.word	0x20000f84
 800530c:	20000ec4 	.word	0x20000ec4
 8005310:	20000fd8 	.word	0x20000fd8

08005314 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d109      	bne.n	8005336 <vTaskSetTimeOutState+0x22>
 8005322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	60fb      	str	r3, [r7, #12]
 8005334:	e7fe      	b.n	8005334 <vTaskSetTimeOutState+0x20>
	taskENTER_CRITICAL();
 8005336:	f7fe f9df 	bl	80036f8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800533a:	4b07      	ldr	r3, [pc, #28]	; (8005358 <vTaskSetTimeOutState+0x44>)
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8005342:	4b06      	ldr	r3, [pc, #24]	; (800535c <vTaskSetTimeOutState+0x48>)
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800534a:	f7fe fa03 	bl	8003754 <vPortExitCritical>
}
 800534e:	bf00      	nop
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	20000fdc 	.word	0x20000fdc
 800535c:	20000fc8 	.word	0x20000fc8

08005360 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005368:	4b06      	ldr	r3, [pc, #24]	; (8005384 <vTaskInternalSetTimeOutState+0x24>)
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005370:	4b05      	ldr	r3, [pc, #20]	; (8005388 <vTaskInternalSetTimeOutState+0x28>)
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	605a      	str	r2, [r3, #4]
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	bc80      	pop	{r7}
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	20000fdc 	.word	0x20000fdc
 8005388:	20000fc8 	.word	0x20000fc8

0800538c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d109      	bne.n	80053b0 <xTaskCheckForTimeOut+0x24>
 800539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	613b      	str	r3, [r7, #16]
 80053ae:	e7fe      	b.n	80053ae <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d109      	bne.n	80053ca <xTaskCheckForTimeOut+0x3e>
 80053b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ba:	f383 8811 	msr	BASEPRI, r3
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	e7fe      	b.n	80053c8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80053ca:	f7fe f995 	bl	80036f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80053ce:	4b1d      	ldr	r3, [pc, #116]	; (8005444 <xTaskCheckForTimeOut+0xb8>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e6:	d102      	bne.n	80053ee <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80053e8:	2300      	movs	r3, #0
 80053ea:	61fb      	str	r3, [r7, #28]
 80053ec:	e023      	b.n	8005436 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	4b15      	ldr	r3, [pc, #84]	; (8005448 <xTaskCheckForTimeOut+0xbc>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d007      	beq.n	800540a <xTaskCheckForTimeOut+0x7e>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	429a      	cmp	r2, r3
 8005402:	d302      	bcc.n	800540a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005404:	2301      	movs	r3, #1
 8005406:	61fb      	str	r3, [r7, #28]
 8005408:	e015      	b.n	8005436 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	429a      	cmp	r2, r3
 8005412:	d20b      	bcs.n	800542c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	1ad2      	subs	r2, r2, r3
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7ff ff9d 	bl	8005360 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005426:	2300      	movs	r3, #0
 8005428:	61fb      	str	r3, [r7, #28]
 800542a:	e004      	b.n	8005436 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	2200      	movs	r2, #0
 8005430:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005432:	2301      	movs	r3, #1
 8005434:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005436:	f7fe f98d 	bl	8003754 <vPortExitCritical>

	return xReturn;
 800543a:	69fb      	ldr	r3, [r7, #28]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3720      	adds	r7, #32
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	20000fc8 	.word	0x20000fc8
 8005448:	20000fdc 	.word	0x20000fdc

0800544c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005450:	4b03      	ldr	r3, [pc, #12]	; (8005460 <vTaskMissedYield+0x14>)
 8005452:	2201      	movs	r2, #1
 8005454:	601a      	str	r2, [r3, #0]
}
 8005456:	bf00      	nop
 8005458:	46bd      	mov	sp, r7
 800545a:	bc80      	pop	{r7}
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	20000fd8 	.word	0x20000fd8

08005464 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800546c:	f000 f852 	bl	8005514 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005470:	4b06      	ldr	r3, [pc, #24]	; (800548c <prvIdleTask+0x28>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d9f9      	bls.n	800546c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005478:	4b05      	ldr	r3, [pc, #20]	; (8005490 <prvIdleTask+0x2c>)
 800547a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005488:	e7f0      	b.n	800546c <prvIdleTask+0x8>
 800548a:	bf00      	nop
 800548c:	20000ec8 	.word	0x20000ec8
 8005490:	e000ed04 	.word	0xe000ed04

08005494 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800549a:	2300      	movs	r3, #0
 800549c:	607b      	str	r3, [r7, #4]
 800549e:	e00c      	b.n	80054ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	4613      	mov	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4a12      	ldr	r2, [pc, #72]	; (80054f4 <prvInitialiseTaskLists+0x60>)
 80054ac:	4413      	add	r3, r2
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7fd ff88 	bl	80033c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3301      	adds	r3, #1
 80054b8:	607b      	str	r3, [r7, #4]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b06      	cmp	r3, #6
 80054be:	d9ef      	bls.n	80054a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80054c0:	480d      	ldr	r0, [pc, #52]	; (80054f8 <prvInitialiseTaskLists+0x64>)
 80054c2:	f7fd ff7f 	bl	80033c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80054c6:	480d      	ldr	r0, [pc, #52]	; (80054fc <prvInitialiseTaskLists+0x68>)
 80054c8:	f7fd ff7c 	bl	80033c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80054cc:	480c      	ldr	r0, [pc, #48]	; (8005500 <prvInitialiseTaskLists+0x6c>)
 80054ce:	f7fd ff79 	bl	80033c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80054d2:	480c      	ldr	r0, [pc, #48]	; (8005504 <prvInitialiseTaskLists+0x70>)
 80054d4:	f7fd ff76 	bl	80033c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80054d8:	480b      	ldr	r0, [pc, #44]	; (8005508 <prvInitialiseTaskLists+0x74>)
 80054da:	f7fd ff73 	bl	80033c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80054de:	4b0b      	ldr	r3, [pc, #44]	; (800550c <prvInitialiseTaskLists+0x78>)
 80054e0:	4a05      	ldr	r2, [pc, #20]	; (80054f8 <prvInitialiseTaskLists+0x64>)
 80054e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80054e4:	4b0a      	ldr	r3, [pc, #40]	; (8005510 <prvInitialiseTaskLists+0x7c>)
 80054e6:	4a05      	ldr	r2, [pc, #20]	; (80054fc <prvInitialiseTaskLists+0x68>)
 80054e8:	601a      	str	r2, [r3, #0]
}
 80054ea:	bf00      	nop
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	20000ec8 	.word	0x20000ec8
 80054f8:	20000f54 	.word	0x20000f54
 80054fc:	20000f68 	.word	0x20000f68
 8005500:	20000f84 	.word	0x20000f84
 8005504:	20000f98 	.word	0x20000f98
 8005508:	20000fb0 	.word	0x20000fb0
 800550c:	20000f7c 	.word	0x20000f7c
 8005510:	20000f80 	.word	0x20000f80

08005514 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800551a:	e019      	b.n	8005550 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800551c:	f7fe f8ec 	bl	80036f8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005520:	4b0f      	ldr	r3, [pc, #60]	; (8005560 <prvCheckTasksWaitingTermination+0x4c>)
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3304      	adds	r3, #4
 800552c:	4618      	mov	r0, r3
 800552e:	f7fd ffcf 	bl	80034d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005532:	4b0c      	ldr	r3, [pc, #48]	; (8005564 <prvCheckTasksWaitingTermination+0x50>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3b01      	subs	r3, #1
 8005538:	4a0a      	ldr	r2, [pc, #40]	; (8005564 <prvCheckTasksWaitingTermination+0x50>)
 800553a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800553c:	4b0a      	ldr	r3, [pc, #40]	; (8005568 <prvCheckTasksWaitingTermination+0x54>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	3b01      	subs	r3, #1
 8005542:	4a09      	ldr	r2, [pc, #36]	; (8005568 <prvCheckTasksWaitingTermination+0x54>)
 8005544:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005546:	f7fe f905 	bl	8003754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f80e 	bl	800556c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005550:	4b05      	ldr	r3, [pc, #20]	; (8005568 <prvCheckTasksWaitingTermination+0x54>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1e1      	bne.n	800551c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005558:	bf00      	nop
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	20000f98 	.word	0x20000f98
 8005564:	20000fc4 	.word	0x20000fc4
 8005568:	20000fac 	.word	0x20000fac

0800556c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800557a:	2b00      	cmp	r3, #0
 800557c:	d108      	bne.n	8005590 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005582:	4618      	mov	r0, r3
 8005584:	f7fd fe0c 	bl	80031a0 <vPortFree>
				vPortFree( pxTCB );
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7fd fe09 	bl	80031a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800558e:	e017      	b.n	80055c0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005596:	2b01      	cmp	r3, #1
 8005598:	d103      	bne.n	80055a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7fd fe00 	bl	80031a0 <vPortFree>
	}
 80055a0:	e00e      	b.n	80055c0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d009      	beq.n	80055c0 <prvDeleteTCB+0x54>
 80055ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	60fb      	str	r3, [r7, #12]
 80055be:	e7fe      	b.n	80055be <prvDeleteTCB+0x52>
	}
 80055c0:	bf00      	nop
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055ce:	4b0e      	ldr	r3, [pc, #56]	; (8005608 <prvResetNextTaskUnblockTime+0x40>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <prvResetNextTaskUnblockTime+0x14>
 80055d8:	2301      	movs	r3, #1
 80055da:	e000      	b.n	80055de <prvResetNextTaskUnblockTime+0x16>
 80055dc:	2300      	movs	r3, #0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d004      	beq.n	80055ec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80055e2:	4b0a      	ldr	r3, [pc, #40]	; (800560c <prvResetNextTaskUnblockTime+0x44>)
 80055e4:	f04f 32ff 	mov.w	r2, #4294967295
 80055e8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80055ea:	e008      	b.n	80055fe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80055ec:	4b06      	ldr	r3, [pc, #24]	; (8005608 <prvResetNextTaskUnblockTime+0x40>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	4a04      	ldr	r2, [pc, #16]	; (800560c <prvResetNextTaskUnblockTime+0x44>)
 80055fc:	6013      	str	r3, [r2, #0]
}
 80055fe:	bf00      	nop
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	bc80      	pop	{r7}
 8005606:	4770      	bx	lr
 8005608:	20000f7c 	.word	0x20000f7c
 800560c:	20000fe4 	.word	0x20000fe4

08005610 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005616:	4b04      	ldr	r3, [pc, #16]	; (8005628 <xTaskGetCurrentTaskHandle+0x18>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800561c:	687b      	ldr	r3, [r7, #4]
	}
 800561e:	4618      	mov	r0, r3
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr
 8005628:	20000ec4 	.word	0x20000ec4

0800562c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005632:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <xTaskGetSchedulerState+0x34>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d102      	bne.n	8005640 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800563a:	2301      	movs	r3, #1
 800563c:	607b      	str	r3, [r7, #4]
 800563e:	e008      	b.n	8005652 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005640:	4b08      	ldr	r3, [pc, #32]	; (8005664 <xTaskGetSchedulerState+0x38>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d102      	bne.n	800564e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005648:	2302      	movs	r3, #2
 800564a:	607b      	str	r3, [r7, #4]
 800564c:	e001      	b.n	8005652 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800564e:	2300      	movs	r3, #0
 8005650:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005652:	687b      	ldr	r3, [r7, #4]
	}
 8005654:	4618      	mov	r0, r3
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	bc80      	pop	{r7}
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	20000fd0 	.word	0x20000fd0
 8005664:	20000fec 	.word	0x20000fec

08005668 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005674:	2300      	movs	r3, #0
 8005676:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d06e      	beq.n	800575c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005682:	4b39      	ldr	r3, [pc, #228]	; (8005768 <xTaskPriorityInherit+0x100>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005688:	429a      	cmp	r2, r3
 800568a:	d25e      	bcs.n	800574a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	2b00      	cmp	r3, #0
 8005692:	db06      	blt.n	80056a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005694:	4b34      	ldr	r3, [pc, #208]	; (8005768 <xTaskPriorityInherit+0x100>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569a:	f1c3 0207 	rsb	r2, r3, #7
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	6959      	ldr	r1, [r3, #20]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056aa:	4613      	mov	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4a2e      	ldr	r2, [pc, #184]	; (800576c <xTaskPriorityInherit+0x104>)
 80056b4:	4413      	add	r3, r2
 80056b6:	4299      	cmp	r1, r3
 80056b8:	d101      	bne.n	80056be <xTaskPriorityInherit+0x56>
 80056ba:	2301      	movs	r3, #1
 80056bc:	e000      	b.n	80056c0 <xTaskPriorityInherit+0x58>
 80056be:	2300      	movs	r3, #0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d03a      	beq.n	800573a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	3304      	adds	r3, #4
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7fd ff01 	bl	80034d0 <uxListRemove>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d115      	bne.n	8005700 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d8:	4924      	ldr	r1, [pc, #144]	; (800576c <xTaskPriorityInherit+0x104>)
 80056da:	4613      	mov	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	440b      	add	r3, r1
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10a      	bne.n	8005700 <xTaskPriorityInherit+0x98>
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ee:	2201      	movs	r2, #1
 80056f0:	fa02 f303 	lsl.w	r3, r2, r3
 80056f4:	43da      	mvns	r2, r3
 80056f6:	4b1e      	ldr	r3, [pc, #120]	; (8005770 <xTaskPriorityInherit+0x108>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4013      	ands	r3, r2
 80056fc:	4a1c      	ldr	r2, [pc, #112]	; (8005770 <xTaskPriorityInherit+0x108>)
 80056fe:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005700:	4b19      	ldr	r3, [pc, #100]	; (8005768 <xTaskPriorityInherit+0x100>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570e:	2201      	movs	r2, #1
 8005710:	409a      	lsls	r2, r3
 8005712:	4b17      	ldr	r3, [pc, #92]	; (8005770 <xTaskPriorityInherit+0x108>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4313      	orrs	r3, r2
 8005718:	4a15      	ldr	r2, [pc, #84]	; (8005770 <xTaskPriorityInherit+0x108>)
 800571a:	6013      	str	r3, [r2, #0]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005720:	4613      	mov	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4a10      	ldr	r2, [pc, #64]	; (800576c <xTaskPriorityInherit+0x104>)
 800572a:	441a      	add	r2, r3
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	3304      	adds	r3, #4
 8005730:	4619      	mov	r1, r3
 8005732:	4610      	mov	r0, r2
 8005734:	f7fd fe71 	bl	800341a <vListInsertEnd>
 8005738:	e004      	b.n	8005744 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800573a:	4b0b      	ldr	r3, [pc, #44]	; (8005768 <xTaskPriorityInherit+0x100>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005744:	2301      	movs	r3, #1
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	e008      	b.n	800575c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800574e:	4b06      	ldr	r3, [pc, #24]	; (8005768 <xTaskPriorityInherit+0x100>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005754:	429a      	cmp	r2, r3
 8005756:	d201      	bcs.n	800575c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005758:	2301      	movs	r3, #1
 800575a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800575c:	68fb      	ldr	r3, [r7, #12]
	}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	20000ec4 	.word	0x20000ec4
 800576c:	20000ec8 	.word	0x20000ec8
 8005770:	20000fcc 	.word	0x20000fcc

08005774 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005780:	2300      	movs	r3, #0
 8005782:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d06c      	beq.n	8005864 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800578a:	4b39      	ldr	r3, [pc, #228]	; (8005870 <xTaskPriorityDisinherit+0xfc>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	429a      	cmp	r2, r3
 8005792:	d009      	beq.n	80057a8 <xTaskPriorityDisinherit+0x34>
 8005794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	e7fe      	b.n	80057a6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d109      	bne.n	80057c4 <xTaskPriorityDisinherit+0x50>
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	60bb      	str	r3, [r7, #8]
 80057c2:	e7fe      	b.n	80057c2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057c8:	1e5a      	subs	r2, r3, #1
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d044      	beq.n	8005864 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d140      	bne.n	8005864 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	3304      	adds	r3, #4
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fd fe72 	bl	80034d0 <uxListRemove>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d115      	bne.n	800581e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f6:	491f      	ldr	r1, [pc, #124]	; (8005874 <xTaskPriorityDisinherit+0x100>)
 80057f8:	4613      	mov	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	440b      	add	r3, r1
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10a      	bne.n	800581e <xTaskPriorityDisinherit+0xaa>
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580c:	2201      	movs	r2, #1
 800580e:	fa02 f303 	lsl.w	r3, r2, r3
 8005812:	43da      	mvns	r2, r3
 8005814:	4b18      	ldr	r3, [pc, #96]	; (8005878 <xTaskPriorityDisinherit+0x104>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4013      	ands	r3, r2
 800581a:	4a17      	ldr	r2, [pc, #92]	; (8005878 <xTaskPriorityDisinherit+0x104>)
 800581c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582a:	f1c3 0207 	rsb	r2, r3, #7
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005836:	2201      	movs	r2, #1
 8005838:	409a      	lsls	r2, r3
 800583a:	4b0f      	ldr	r3, [pc, #60]	; (8005878 <xTaskPriorityDisinherit+0x104>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4313      	orrs	r3, r2
 8005840:	4a0d      	ldr	r2, [pc, #52]	; (8005878 <xTaskPriorityDisinherit+0x104>)
 8005842:	6013      	str	r3, [r2, #0]
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005848:	4613      	mov	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4a08      	ldr	r2, [pc, #32]	; (8005874 <xTaskPriorityDisinherit+0x100>)
 8005852:	441a      	add	r2, r3
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	3304      	adds	r3, #4
 8005858:	4619      	mov	r1, r3
 800585a:	4610      	mov	r0, r2
 800585c:	f7fd fddd 	bl	800341a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005860:	2301      	movs	r3, #1
 8005862:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005864:	697b      	ldr	r3, [r7, #20]
	}
 8005866:	4618      	mov	r0, r3
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20000ec4 	.word	0x20000ec4
 8005874:	20000ec8 	.word	0x20000ec8
 8005878:	20000fcc 	.word	0x20000fcc

0800587c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800587c:	b580      	push	{r7, lr}
 800587e:	b088      	sub	sp, #32
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800588a:	2301      	movs	r3, #1
 800588c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	f000 8086 	beq.w	80059a2 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800589a:	2b00      	cmp	r3, #0
 800589c:	d109      	bne.n	80058b2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800589e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	e7fe      	b.n	80058b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d902      	bls.n	80058c2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	61fb      	str	r3, [r7, #28]
 80058c0:	e002      	b.n	80058c8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058cc:	69fa      	ldr	r2, [r7, #28]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d067      	beq.n	80059a2 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d162      	bne.n	80059a2 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80058dc:	4b33      	ldr	r3, [pc, #204]	; (80059ac <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d109      	bne.n	80058fa <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80058e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ea:	f383 8811 	msr	BASEPRI, r3
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	60bb      	str	r3, [r7, #8]
 80058f8:	e7fe      	b.n	80058f8 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fe:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	69fa      	ldr	r2, [r7, #28]
 8005904:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	2b00      	cmp	r3, #0
 800590c:	db04      	blt.n	8005918 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	f1c3 0207 	rsb	r2, r3, #7
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	6959      	ldr	r1, [r3, #20]
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	4613      	mov	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4a22      	ldr	r2, [pc, #136]	; (80059b0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005928:	4413      	add	r3, r2
 800592a:	4299      	cmp	r1, r3
 800592c:	d101      	bne.n	8005932 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800592e:	2301      	movs	r3, #1
 8005930:	e000      	b.n	8005934 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8005932:	2300      	movs	r3, #0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d034      	beq.n	80059a2 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	3304      	adds	r3, #4
 800593c:	4618      	mov	r0, r3
 800593e:	f7fd fdc7 	bl	80034d0 <uxListRemove>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d115      	bne.n	8005974 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800594c:	4918      	ldr	r1, [pc, #96]	; (80059b0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800594e:	4613      	mov	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	440b      	add	r3, r1
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10a      	bne.n	8005974 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005962:	2201      	movs	r2, #1
 8005964:	fa02 f303 	lsl.w	r3, r2, r3
 8005968:	43da      	mvns	r2, r3
 800596a:	4b12      	ldr	r3, [pc, #72]	; (80059b4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4013      	ands	r3, r2
 8005970:	4a10      	ldr	r2, [pc, #64]	; (80059b4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005972:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005978:	2201      	movs	r2, #1
 800597a:	409a      	lsls	r2, r3
 800597c:	4b0d      	ldr	r3, [pc, #52]	; (80059b4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4313      	orrs	r3, r2
 8005982:	4a0c      	ldr	r2, [pc, #48]	; (80059b4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800598a:	4613      	mov	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4a07      	ldr	r2, [pc, #28]	; (80059b0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005994:	441a      	add	r2, r3
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	3304      	adds	r3, #4
 800599a:	4619      	mov	r1, r3
 800599c:	4610      	mov	r0, r2
 800599e:	f7fd fd3c 	bl	800341a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059a2:	bf00      	nop
 80059a4:	3720      	adds	r7, #32
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	20000ec4 	.word	0x20000ec4
 80059b0:	20000ec8 	.word	0x20000ec8
 80059b4:	20000fcc 	.word	0x20000fcc

080059b8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80059b8:	b480      	push	{r7}
 80059ba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80059bc:	4b07      	ldr	r3, [pc, #28]	; (80059dc <pvTaskIncrementMutexHeldCount+0x24>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d004      	beq.n	80059ce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80059c4:	4b05      	ldr	r3, [pc, #20]	; (80059dc <pvTaskIncrementMutexHeldCount+0x24>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059ca:	3201      	adds	r2, #1
 80059cc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80059ce:	4b03      	ldr	r3, [pc, #12]	; (80059dc <pvTaskIncrementMutexHeldCount+0x24>)
 80059d0:	681b      	ldr	r3, [r3, #0]
	}
 80059d2:	4618      	mov	r0, r3
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bc80      	pop	{r7}
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	20000ec4 	.word	0x20000ec4

080059e0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
 80059ec:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80059ee:	f7fd fe83 	bl	80036f8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80059f2:	4b26      	ldr	r3, [pc, #152]	; (8005a8c <xTaskNotifyWait+0xac>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d01a      	beq.n	8005a36 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005a00:	4b22      	ldr	r3, [pc, #136]	; (8005a8c <xTaskNotifyWait+0xac>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	43d2      	mvns	r2, r2
 8005a0a:	400a      	ands	r2, r1
 8005a0c:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005a0e:	4b1f      	ldr	r3, [pc, #124]	; (8005a8c <xTaskNotifyWait+0xac>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00b      	beq.n	8005a36 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a1e:	2101      	movs	r1, #1
 8005a20:	6838      	ldr	r0, [r7, #0]
 8005a22:	f000 f8fd 	bl	8005c20 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005a26:	4b1a      	ldr	r3, [pc, #104]	; (8005a90 <xTaskNotifyWait+0xb0>)
 8005a28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a2c:	601a      	str	r2, [r3, #0]
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005a36:	f7fd fe8d 	bl	8003754 <vPortExitCritical>

		taskENTER_CRITICAL();
 8005a3a:	f7fd fe5d 	bl	80036f8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d004      	beq.n	8005a4e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005a44:	4b11      	ldr	r3, [pc, #68]	; (8005a8c <xTaskNotifyWait+0xac>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005a4e:	4b0f      	ldr	r3, [pc, #60]	; (8005a8c <xTaskNotifyWait+0xac>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d002      	beq.n	8005a62 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	e008      	b.n	8005a74 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005a62:	4b0a      	ldr	r3, [pc, #40]	; (8005a8c <xTaskNotifyWait+0xac>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	43d2      	mvns	r2, r2
 8005a6c:	400a      	ands	r2, r1
 8005a6e:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8005a70:	2301      	movs	r3, #1
 8005a72:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a74:	4b05      	ldr	r3, [pc, #20]	; (8005a8c <xTaskNotifyWait+0xac>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8005a7e:	f7fd fe69 	bl	8003754 <vPortExitCritical>

		return xReturn;
 8005a82:	697b      	ldr	r3, [r7, #20]
	}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	20000ec4 	.word	0x20000ec4
 8005a90:	e000ed04 	.word	0xe000ed04

08005a94 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b08a      	sub	sp, #40	; 0x28
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	603b      	str	r3, [r7, #0]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d109      	bne.n	8005ac2 <xTaskGenericNotify+0x2e>
 8005aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	61bb      	str	r3, [r7, #24]
 8005ac0:	e7fe      	b.n	8005ac0 <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005ac6:	f7fd fe17 	bl	80036f8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d003      	beq.n	8005ad8 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ade:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8005ae8:	79fb      	ldrb	r3, [r7, #7]
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	d827      	bhi.n	8005b3e <xTaskGenericNotify+0xaa>
 8005aee:	a201      	add	r2, pc, #4	; (adr r2, 8005af4 <xTaskGenericNotify+0x60>)
 8005af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af4:	08005b3f 	.word	0x08005b3f
 8005af8:	08005b09 	.word	0x08005b09
 8005afc:	08005b17 	.word	0x08005b17
 8005b00:	08005b23 	.word	0x08005b23
 8005b04:	08005b2b 	.word	0x08005b2b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005b14:	e013      	b.n	8005b3e <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b1a:	1c5a      	adds	r2, r3, #1
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005b20:	e00d      	b.n	8005b3e <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005b28:	e009      	b.n	8005b3e <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005b2a:	7ffb      	ldrb	r3, [r7, #31]
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d003      	beq.n	8005b38 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005b36:	e001      	b.n	8005b3c <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8005b3c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005b3e:	7ffb      	ldrb	r3, [r7, #31]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d138      	bne.n	8005bb6 <xTaskGenericNotify+0x122>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	3304      	adds	r3, #4
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7fd fcc1 	bl	80034d0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b52:	2201      	movs	r2, #1
 8005b54:	409a      	lsls	r2, r3
 8005b56:	4b1b      	ldr	r3, [pc, #108]	; (8005bc4 <xTaskGenericNotify+0x130>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	4a19      	ldr	r2, [pc, #100]	; (8005bc4 <xTaskGenericNotify+0x130>)
 8005b5e:	6013      	str	r3, [r2, #0]
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b64:	4613      	mov	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4a16      	ldr	r2, [pc, #88]	; (8005bc8 <xTaskGenericNotify+0x134>)
 8005b6e:	441a      	add	r2, r3
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	3304      	adds	r3, #4
 8005b74:	4619      	mov	r1, r3
 8005b76:	4610      	mov	r0, r2
 8005b78:	f7fd fc4f 	bl	800341a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d009      	beq.n	8005b98 <xTaskGenericNotify+0x104>
 8005b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b88:	f383 8811 	msr	BASEPRI, r3
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	617b      	str	r3, [r7, #20]
 8005b96:	e7fe      	b.n	8005b96 <xTaskGenericNotify+0x102>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b9c:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <xTaskGenericNotify+0x138>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d907      	bls.n	8005bb6 <xTaskGenericNotify+0x122>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005ba6:	4b0a      	ldr	r3, [pc, #40]	; (8005bd0 <xTaskGenericNotify+0x13c>)
 8005ba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bac:	601a      	str	r2, [r3, #0]
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005bb6:	f7fd fdcd 	bl	8003754 <vPortExitCritical>

		return xReturn;
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3728      	adds	r7, #40	; 0x28
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	20000fcc 	.word	0x20000fcc
 8005bc8:	20000ec8 	.word	0x20000ec8
 8005bcc:	20000ec4 	.word	0x20000ec4
 8005bd0:	e000ed04 	.word	0xe000ed04

08005bd4 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d102      	bne.n	8005be8 <xTaskNotifyStateClear+0x14>
 8005be2:	4b0e      	ldr	r3, [pc, #56]	; (8005c1c <xTaskNotifyStateClear+0x48>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	e000      	b.n	8005bea <xTaskNotifyStateClear+0x16>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8005bec:	f7fd fd84 	bl	80036f8 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d106      	bne.n	8005c0a <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				xReturn = pdPASS;
 8005c04:	2301      	movs	r3, #1
 8005c06:	60fb      	str	r3, [r7, #12]
 8005c08:	e001      	b.n	8005c0e <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8005c0e:	f7fd fda1 	bl	8003754 <vPortExitCritical>

		return xReturn;
 8005c12:	68fb      	ldr	r3, [r7, #12]
	}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	20000ec4 	.word	0x20000ec4

08005c20 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c2a:	4b29      	ldr	r3, [pc, #164]	; (8005cd0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c30:	4b28      	ldr	r3, [pc, #160]	; (8005cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3304      	adds	r3, #4
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fd fc4a 	bl	80034d0 <uxListRemove>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10b      	bne.n	8005c5a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005c42:	4b24      	ldr	r3, [pc, #144]	; (8005cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	2201      	movs	r2, #1
 8005c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4e:	43da      	mvns	r2, r3
 8005c50:	4b21      	ldr	r3, [pc, #132]	; (8005cd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4013      	ands	r3, r2
 8005c56:	4a20      	ldr	r2, [pc, #128]	; (8005cd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c58:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c60:	d10a      	bne.n	8005c78 <prvAddCurrentTaskToDelayedList+0x58>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d007      	beq.n	8005c78 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c68:	4b1a      	ldr	r3, [pc, #104]	; (8005cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3304      	adds	r3, #4
 8005c6e:	4619      	mov	r1, r3
 8005c70:	481a      	ldr	r0, [pc, #104]	; (8005cdc <prvAddCurrentTaskToDelayedList+0xbc>)
 8005c72:	f7fd fbd2 	bl	800341a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c76:	e026      	b.n	8005cc6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c80:	4b14      	ldr	r3, [pc, #80]	; (8005cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d209      	bcs.n	8005ca4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c90:	4b13      	ldr	r3, [pc, #76]	; (8005ce0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	4b0f      	ldr	r3, [pc, #60]	; (8005cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3304      	adds	r3, #4
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	4610      	mov	r0, r2
 8005c9e:	f7fd fbdf 	bl	8003460 <vListInsert>
}
 8005ca2:	e010      	b.n	8005cc6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ca4:	4b0f      	ldr	r3, [pc, #60]	; (8005ce4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	4b0a      	ldr	r3, [pc, #40]	; (8005cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3304      	adds	r3, #4
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	f7fd fbd5 	bl	8003460 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005cb6:	4b0c      	ldr	r3, [pc, #48]	; (8005ce8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d202      	bcs.n	8005cc6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005cc0:	4a09      	ldr	r2, [pc, #36]	; (8005ce8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	6013      	str	r3, [r2, #0]
}
 8005cc6:	bf00      	nop
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	20000fc8 	.word	0x20000fc8
 8005cd4:	20000ec4 	.word	0x20000ec4
 8005cd8:	20000fcc 	.word	0x20000fcc
 8005cdc:	20000fb0 	.word	0x20000fb0
 8005ce0:	20000f80 	.word	0x20000f80
 8005ce4:	20000f7c 	.word	0x20000f7c
 8005ce8:	20000fe4 	.word	0x20000fe4

08005cec <__libc_init_array>:
 8005cec:	b570      	push	{r4, r5, r6, lr}
 8005cee:	2500      	movs	r5, #0
 8005cf0:	4e0c      	ldr	r6, [pc, #48]	; (8005d24 <__libc_init_array+0x38>)
 8005cf2:	4c0d      	ldr	r4, [pc, #52]	; (8005d28 <__libc_init_array+0x3c>)
 8005cf4:	1ba4      	subs	r4, r4, r6
 8005cf6:	10a4      	asrs	r4, r4, #2
 8005cf8:	42a5      	cmp	r5, r4
 8005cfa:	d109      	bne.n	8005d10 <__libc_init_array+0x24>
 8005cfc:	f000 f82e 	bl	8005d5c <_init>
 8005d00:	2500      	movs	r5, #0
 8005d02:	4e0a      	ldr	r6, [pc, #40]	; (8005d2c <__libc_init_array+0x40>)
 8005d04:	4c0a      	ldr	r4, [pc, #40]	; (8005d30 <__libc_init_array+0x44>)
 8005d06:	1ba4      	subs	r4, r4, r6
 8005d08:	10a4      	asrs	r4, r4, #2
 8005d0a:	42a5      	cmp	r5, r4
 8005d0c:	d105      	bne.n	8005d1a <__libc_init_array+0x2e>
 8005d0e:	bd70      	pop	{r4, r5, r6, pc}
 8005d10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d14:	4798      	blx	r3
 8005d16:	3501      	adds	r5, #1
 8005d18:	e7ee      	b.n	8005cf8 <__libc_init_array+0xc>
 8005d1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d1e:	4798      	blx	r3
 8005d20:	3501      	adds	r5, #1
 8005d22:	e7f2      	b.n	8005d0a <__libc_init_array+0x1e>
 8005d24:	08005e10 	.word	0x08005e10
 8005d28:	08005e10 	.word	0x08005e10
 8005d2c:	08005e10 	.word	0x08005e10
 8005d30:	08005e14 	.word	0x08005e14

08005d34 <memcpy>:
 8005d34:	b510      	push	{r4, lr}
 8005d36:	1e43      	subs	r3, r0, #1
 8005d38:	440a      	add	r2, r1
 8005d3a:	4291      	cmp	r1, r2
 8005d3c:	d100      	bne.n	8005d40 <memcpy+0xc>
 8005d3e:	bd10      	pop	{r4, pc}
 8005d40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d48:	e7f7      	b.n	8005d3a <memcpy+0x6>

08005d4a <memset>:
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	4402      	add	r2, r0
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d100      	bne.n	8005d54 <memset+0xa>
 8005d52:	4770      	bx	lr
 8005d54:	f803 1b01 	strb.w	r1, [r3], #1
 8005d58:	e7f9      	b.n	8005d4e <memset+0x4>
	...

08005d5c <_init>:
 8005d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5e:	bf00      	nop
 8005d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d62:	bc08      	pop	{r3}
 8005d64:	469e      	mov	lr, r3
 8005d66:	4770      	bx	lr

08005d68 <_fini>:
 8005d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6a:	bf00      	nop
 8005d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d6e:	bc08      	pop	{r3}
 8005d70:	469e      	mov	lr, r3
 8005d72:	4770      	bx	lr
