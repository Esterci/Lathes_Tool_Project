
ad7606_ADCT_3buf_allAD_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061b4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080062c4  080062c4  000162c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800637c  0800637c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800637c  0800637c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800637c  0800637c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800637c  0800637c  0001637c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006380  08006380  00016380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026cc  20000010  08006394  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200026dc  08006394  000226dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a40b  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003722  00000000  00000000  0003a444  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001620  00000000  00000000  0003db68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001488  00000000  00000000  0003f188  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001634c  00000000  00000000  00040610  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000115f1  00000000  00000000  0005695c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d687  00000000  00000000  00067f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e55d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ba4  00000000  00000000  000e5650  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080062ac 	.word	0x080062ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080062ac 	.word	0x080062ac

08000150 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0

}
 8000154:	bf00      	nop
 8000156:	46bd      	mov	sp, r7
 8000158:	bc80      	pop	{r7}
 800015a:	4770      	bx	lr

0800015c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
return 0;
 8000160:	2300      	movs	r3, #0
}
 8000162:	4618      	mov	r0, r3
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr
	...

0800016c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800016c:	b580      	push	{r7, lr}
 800016e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000170:	f000 fd40 	bl	8000bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000174:	f000 f83a 	bl	80001ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000178:	f000 f95a 	bl	8000430 <MX_GPIO_Init>
  MX_DMA_Init();
 800017c:	f000 f932 	bl	80003e4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000180:	f000 f8ac 	bl	80002dc <MX_SPI1_Init>
  MX_RTC_Init();
 8000184:	f000 f890 	bl	80002a8 <MX_RTC_Init>
  MX_TIM1_Init();
 8000188:	f000 f8dc 	bl	8000344 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 800018c:	480f      	ldr	r0, [pc, #60]	; (80001cc <main+0x60>)
 800018e:	f002 fa1b 	bl	80025c8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000192:	f002 fd6d 	bl	8002c70 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of habAQ */
  habAQHandle = osSemaphoreNew(1, 1, &habAQ_attributes);
 8000196:	4a0e      	ldr	r2, [pc, #56]	; (80001d0 <main+0x64>)
 8000198:	2101      	movs	r1, #1
 800019a:	2001      	movs	r0, #1
 800019c:	f002 fea6 	bl	8002eec <osSemaphoreNew>
 80001a0:	4602      	mov	r2, r0
 80001a2:	4b0c      	ldr	r3, [pc, #48]	; (80001d4 <main+0x68>)
 80001a4:	601a      	str	r2, [r3, #0]

  /* creation of habENV */
  habENVHandle = osSemaphoreNew(1, 1, &habENV_attributes);
 80001a6:	4a0c      	ldr	r2, [pc, #48]	; (80001d8 <main+0x6c>)
 80001a8:	2101      	movs	r1, #1
 80001aa:	2001      	movs	r0, #1
 80001ac:	f002 fe9e 	bl	8002eec <osSemaphoreNew>
 80001b0:	4602      	mov	r2, r0
 80001b2:	4b0a      	ldr	r3, [pc, #40]	; (80001dc <main+0x70>)
 80001b4:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of enviaTask */
  enviaTaskHandle = osThreadNew(StartEnviaTask, NULL, &enviaTask_attributes);
 80001b6:	4a0a      	ldr	r2, [pc, #40]	; (80001e0 <main+0x74>)
 80001b8:	2100      	movs	r1, #0
 80001ba:	480a      	ldr	r0, [pc, #40]	; (80001e4 <main+0x78>)
 80001bc:	f002 fdbe 	bl	8002d3c <osThreadNew>
 80001c0:	4602      	mov	r2, r0
 80001c2:	4b09      	ldr	r3, [pc, #36]	; (80001e8 <main+0x7c>)
 80001c4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001c6:	f002 fd85 	bl	8002cd4 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ca:	e7fe      	b.n	80001ca <main+0x5e>
 80001cc:	20002534 	.word	0x20002534
 80001d0:	08006344 	.word	0x08006344
 80001d4:	200025cc 	.word	0x200025cc
 80001d8:	08006354 	.word	0x08006354
 80001dc:	2000251c 	.word	0x2000251c
 80001e0:	08006320 	.word	0x08006320
 80001e4:	080006ed 	.word	0x080006ed
 80001e8:	20002518 	.word	0x20002518

080001ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b094      	sub	sp, #80	; 0x50
 80001f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001f6:	2228      	movs	r2, #40	; 0x28
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f006 f84d 	bl	800629a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000200:	f107 0314 	add.w	r3, r7, #20
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
 8000208:	605a      	str	r2, [r3, #4]
 800020a:	609a      	str	r2, [r3, #8]
 800020c:	60da      	str	r2, [r3, #12]
 800020e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800021c:	2305      	movs	r3, #5
 800021e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000220:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000224:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800022a:	2301      	movs	r3, #1
 800022c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022e:	2301      	movs	r3, #1
 8000230:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000232:	2302      	movs	r3, #2
 8000234:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000236:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800023a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800023c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000240:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000242:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000246:	4618      	mov	r0, r3
 8000248:	f001 f95c 	bl	8001504 <HAL_RCC_OscConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000252:	f000 fa81 	bl	8000758 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000256:	230f      	movs	r3, #15
 8000258:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800025a:	2302      	movs	r3, #2
 800025c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000266:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800026c:	f107 0314 	add.w	r3, r7, #20
 8000270:	2102      	movs	r1, #2
 8000272:	4618      	mov	r0, r3
 8000274:	f001 fbc6 	bl	8001a04 <HAL_RCC_ClockConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800027e:	f000 fa6b 	bl	8000758 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000282:	2301      	movs	r3, #1
 8000284:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000286:	f44f 7380 	mov.w	r3, #256	; 0x100
 800028a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	4618      	mov	r0, r3
 8000290:	f001 fd84 	bl	8001d9c <HAL_RCCEx_PeriphCLKConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800029a:	f000 fa5d 	bl	8000758 <Error_Handler>
  }
}
 800029e:	bf00      	nop
 80002a0:	3750      	adds	r7, #80	; 0x50
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
	...

080002a8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80002ac:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <MX_RTC_Init+0x2c>)
 80002ae:	4a0a      	ldr	r2, [pc, #40]	; (80002d8 <MX_RTC_Init+0x30>)
 80002b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = 127;
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <MX_RTC_Init+0x2c>)
 80002b4:	227f      	movs	r2, #127	; 0x7f
 80002b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_SECOND;
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <MX_RTC_Init+0x2c>)
 80002ba:	f44f 7240 	mov.w	r2, #768	; 0x300
 80002be:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80002c0:	4804      	ldr	r0, [pc, #16]	; (80002d4 <MX_RTC_Init+0x2c>)
 80002c2:	f001 fedd 	bl	8002080 <HAL_RTC_Init>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <MX_RTC_Init+0x28>
  {
    Error_Handler();
 80002cc:	f000 fa44 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20002520 	.word	0x20002520
 80002d8:	40002800 	.word	0x40002800

080002dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002e0:	4b16      	ldr	r3, [pc, #88]	; (800033c <MX_SPI1_Init+0x60>)
 80002e2:	4a17      	ldr	r2, [pc, #92]	; (8000340 <MX_SPI1_Init+0x64>)
 80002e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80002e6:	4b15      	ldr	r3, [pc, #84]	; (800033c <MX_SPI1_Init+0x60>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002ec:	4b13      	ldr	r3, [pc, #76]	; (800033c <MX_SPI1_Init+0x60>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002f2:	4b12      	ldr	r3, [pc, #72]	; (800033c <MX_SPI1_Init+0x60>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002f8:	4b10      	ldr	r3, [pc, #64]	; (800033c <MX_SPI1_Init+0x60>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002fe:	4b0f      	ldr	r3, [pc, #60]	; (800033c <MX_SPI1_Init+0x60>)
 8000300:	2200      	movs	r2, #0
 8000302:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000304:	4b0d      	ldr	r3, [pc, #52]	; (800033c <MX_SPI1_Init+0x60>)
 8000306:	2200      	movs	r2, #0
 8000308:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800030a:	4b0c      	ldr	r3, [pc, #48]	; (800033c <MX_SPI1_Init+0x60>)
 800030c:	2208      	movs	r2, #8
 800030e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000310:	4b0a      	ldr	r3, [pc, #40]	; (800033c <MX_SPI1_Init+0x60>)
 8000312:	2200      	movs	r2, #0
 8000314:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000316:	4b09      	ldr	r3, [pc, #36]	; (800033c <MX_SPI1_Init+0x60>)
 8000318:	2200      	movs	r2, #0
 800031a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800031c:	4b07      	ldr	r3, [pc, #28]	; (800033c <MX_SPI1_Init+0x60>)
 800031e:	2200      	movs	r2, #0
 8000320:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000322:	4b06      	ldr	r3, [pc, #24]	; (800033c <MX_SPI1_Init+0x60>)
 8000324:	220a      	movs	r2, #10
 8000326:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000328:	4804      	ldr	r0, [pc, #16]	; (800033c <MX_SPI1_Init+0x60>)
 800032a:	f001 ffbc 	bl	80022a6 <HAL_SPI_Init>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_SPI1_Init+0x5c>
  {
    Error_Handler();
 8000334:	f000 fa10 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}
 800033c:	20002574 	.word	0x20002574
 8000340:	40013000 	.word	0x40013000

08000344 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b086      	sub	sp, #24
 8000348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800034a:	f107 0308 	add.w	r3, r7, #8
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000358:	463b      	mov	r3, r7
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <MX_TIM1_Init+0x98>)
 8000362:	4a1f      	ldr	r2, [pc, #124]	; (80003e0 <MX_TIM1_Init+0x9c>)
 8000364:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <MX_TIM1_Init+0x98>)
 8000368:	2223      	movs	r2, #35	; 0x23
 800036a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <MX_TIM1_Init+0x98>)
 800036e:	2200      	movs	r2, #0
 8000370:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 333;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <MX_TIM1_Init+0x98>)
 8000374:	f240 124d 	movw	r2, #333	; 0x14d
 8000378:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800037a:	4b18      	ldr	r3, [pc, #96]	; (80003dc <MX_TIM1_Init+0x98>)
 800037c:	2200      	movs	r2, #0
 800037e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000380:	4b16      	ldr	r3, [pc, #88]	; (80003dc <MX_TIM1_Init+0x98>)
 8000382:	2200      	movs	r2, #0
 8000384:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000386:	4b15      	ldr	r3, [pc, #84]	; (80003dc <MX_TIM1_Init+0x98>)
 8000388:	2280      	movs	r2, #128	; 0x80
 800038a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800038c:	4813      	ldr	r0, [pc, #76]	; (80003dc <MX_TIM1_Init+0x98>)
 800038e:	f002 f8f0 	bl	8002572 <HAL_TIM_Base_Init>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000398:	f000 f9de 	bl	8000758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800039c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003a2:	f107 0308 	add.w	r3, r7, #8
 80003a6:	4619      	mov	r1, r3
 80003a8:	480c      	ldr	r0, [pc, #48]	; (80003dc <MX_TIM1_Init+0x98>)
 80003aa:	f002 fa38 	bl	800281e <HAL_TIM_ConfigClockSource>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80003b4:	f000 f9d0 	bl	8000758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003b8:	2300      	movs	r3, #0
 80003ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003bc:	2300      	movs	r3, #0
 80003be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003c0:	463b      	mov	r3, r7
 80003c2:	4619      	mov	r1, r3
 80003c4:	4805      	ldr	r0, [pc, #20]	; (80003dc <MX_TIM1_Init+0x98>)
 80003c6:	f002 fbfd 	bl	8002bc4 <HAL_TIMEx_MasterConfigSynchronization>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80003d0:	f000 f9c2 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80003d4:	bf00      	nop
 80003d6:	3718      	adds	r7, #24
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	20002534 	.word	0x20002534
 80003e0:	40012c00 	.word	0x40012c00

080003e4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003ea:	4b10      	ldr	r3, [pc, #64]	; (800042c <MX_DMA_Init+0x48>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	4a0f      	ldr	r2, [pc, #60]	; (800042c <MX_DMA_Init+0x48>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	6153      	str	r3, [r2, #20]
 80003f6:	4b0d      	ldr	r3, [pc, #52]	; (800042c <MX_DMA_Init+0x48>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8000402:	2200      	movs	r2, #0
 8000404:	2105      	movs	r1, #5
 8000406:	200c      	movs	r0, #12
 8000408:	f000 fcdb 	bl	8000dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800040c:	200c      	movs	r0, #12
 800040e:	f000 fcf4 	bl	8000dfa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8000412:	2200      	movs	r2, #0
 8000414:	2105      	movs	r1, #5
 8000416:	200d      	movs	r0, #13
 8000418:	f000 fcd3 	bl	8000dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800041c:	200d      	movs	r0, #13
 800041e:	f000 fcec 	bl	8000dfa <HAL_NVIC_EnableIRQ>

}
 8000422:	bf00      	nop
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40021000 	.word	0x40021000

08000430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b088      	sub	sp, #32
 8000434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000436:	f107 0310 	add.w	r3, r7, #16
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000444:	4b59      	ldr	r3, [pc, #356]	; (80005ac <MX_GPIO_Init+0x17c>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a58      	ldr	r2, [pc, #352]	; (80005ac <MX_GPIO_Init+0x17c>)
 800044a:	f043 0310 	orr.w	r3, r3, #16
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b56      	ldr	r3, [pc, #344]	; (80005ac <MX_GPIO_Init+0x17c>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0310 	and.w	r3, r3, #16
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800045c:	4b53      	ldr	r3, [pc, #332]	; (80005ac <MX_GPIO_Init+0x17c>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a52      	ldr	r2, [pc, #328]	; (80005ac <MX_GPIO_Init+0x17c>)
 8000462:	f043 0320 	orr.w	r3, r3, #32
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b50      	ldr	r3, [pc, #320]	; (80005ac <MX_GPIO_Init+0x17c>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0320 	and.w	r3, r3, #32
 8000470:	60bb      	str	r3, [r7, #8]
 8000472:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000474:	4b4d      	ldr	r3, [pc, #308]	; (80005ac <MX_GPIO_Init+0x17c>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a4c      	ldr	r2, [pc, #304]	; (80005ac <MX_GPIO_Init+0x17c>)
 800047a:	f043 0304 	orr.w	r3, r3, #4
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b4a      	ldr	r3, [pc, #296]	; (80005ac <MX_GPIO_Init+0x17c>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0304 	and.w	r3, r3, #4
 8000488:	607b      	str	r3, [r7, #4]
 800048a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048c:	4b47      	ldr	r3, [pc, #284]	; (80005ac <MX_GPIO_Init+0x17c>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a46      	ldr	r2, [pc, #280]	; (80005ac <MX_GPIO_Init+0x17c>)
 8000492:	f043 0308 	orr.w	r3, r3, #8
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b44      	ldr	r3, [pc, #272]	; (80005ac <MX_GPIO_Init+0x17c>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0308 	and.w	r3, r3, #8
 80004a0:	603b      	str	r3, [r7, #0]
 80004a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004aa:	4841      	ldr	r0, [pc, #260]	; (80005b0 <MX_GPIO_Init+0x180>)
 80004ac:	f000 ffe4 	bl	8001478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Cvrst_Pin|Cs_Pin, GPIO_PIN_SET);
 80004b0:	2201      	movs	r2, #1
 80004b2:	f44f 7182 	mov.w	r1, #260	; 0x104
 80004b6:	483f      	ldr	r0, [pc, #252]	; (80005b4 <MX_GPIO_Init+0x184>)
 80004b8:	f000 ffde 	bl	8001478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Os0_Pin|rst_Pin|ce_Pin|Os1_Pin 
 80004bc:	2200      	movs	r2, #0
 80004be:	f44f 411e 	mov.w	r1, #40448	; 0x9e00
 80004c2:	483c      	ldr	r0, [pc, #240]	; (80005b4 <MX_GPIO_Init+0x184>)
 80004c4:	f000 ffd8 	bl	8001478 <HAL_GPIO_WritePin>
                          |Os2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ce:	2301      	movs	r3, #1
 80004d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d6:	2302      	movs	r3, #2
 80004d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004da:	f107 0310 	add.w	r3, r7, #16
 80004de:	4619      	mov	r1, r3
 80004e0:	4833      	ldr	r0, [pc, #204]	; (80005b0 <MX_GPIO_Init+0x180>)
 80004e2:	f000 fe6f 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ext_nss_Pin */
  GPIO_InitStruct.Pin = ext_nss_Pin;
 80004e6:	2301      	movs	r3, #1
 80004e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004ea:	4b33      	ldr	r3, [pc, #204]	; (80005b8 <MX_GPIO_Init+0x188>)
 80004ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	2300      	movs	r3, #0
 80004f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ext_nss_GPIO_Port, &GPIO_InitStruct);
 80004f2:	f107 0310 	add.w	r3, r7, #16
 80004f6:	4619      	mov	r1, r3
 80004f8:	482e      	ldr	r0, [pc, #184]	; (80005b4 <MX_GPIO_Init+0x184>)
 80004fa:	f000 fe63 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Frsdt_Pin */
  GPIO_InitStruct.Pin = Frsdt_Pin;
 80004fe:	2302      	movs	r3, #2
 8000500:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000502:	2300      	movs	r3, #0
 8000504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Frsdt_GPIO_Port, &GPIO_InitStruct);
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	4619      	mov	r1, r3
 8000510:	4828      	ldr	r0, [pc, #160]	; (80005b4 <MX_GPIO_Init+0x184>)
 8000512:	f000 fe57 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Cvrst_Pin Cs_Pin ce_Pin */
  GPIO_InitStruct.Pin = Cvrst_Pin|Cs_Pin|ce_Pin;
 8000516:	f640 1304 	movw	r3, #2308	; 0x904
 800051a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051c:	2301      	movs	r3, #1
 800051e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000524:	2303      	movs	r3, #3
 8000526:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000528:	f107 0310 	add.w	r3, r7, #16
 800052c:	4619      	mov	r1, r3
 800052e:	4821      	ldr	r0, [pc, #132]	; (80005b4 <MX_GPIO_Init+0x184>)
 8000530:	f000 fe48 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Busy_Pin */
  GPIO_InitStruct.Pin = Busy_Pin;
 8000534:	2308      	movs	r3, #8
 8000536:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000538:	4b20      	ldr	r3, [pc, #128]	; (80005bc <MX_GPIO_Init+0x18c>)
 800053a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	2300      	movs	r3, #0
 800053e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Busy_GPIO_Port, &GPIO_InitStruct);
 8000540:	f107 0310 	add.w	r3, r7, #16
 8000544:	4619      	mov	r1, r3
 8000546:	481b      	ldr	r0, [pc, #108]	; (80005b4 <MX_GPIO_Init+0x184>)
 8000548:	f000 fe3c 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : db0_Pin db1_Pin db2_Pin db10_Pin 
                           db11_Pin db12_Pin db13_Pin db14_Pin 
                           db15_Pin db3_Pin db4_Pin db5_Pin 
                           db6_Pin db7_Pin db8_Pin db9_Pin */
  GPIO_InitStruct.Pin = db0_Pin|db1_Pin|db2_Pin|db10_Pin 
 800054c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000550:	613b      	str	r3, [r7, #16]
                          |db11_Pin|db12_Pin|db13_Pin|db14_Pin 
                          |db15_Pin|db3_Pin|db4_Pin|db5_Pin 
                          |db6_Pin|db7_Pin|db8_Pin|db9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2300      	movs	r3, #0
 8000558:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800055a:	f107 0310 	add.w	r3, r7, #16
 800055e:	4619      	mov	r1, r3
 8000560:	4817      	ldr	r0, [pc, #92]	; (80005c0 <MX_GPIO_Init+0x190>)
 8000562:	f000 fe2f 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Os0_Pin rst_Pin Os1_Pin Os2_Pin */
  GPIO_InitStruct.Pin = Os0_Pin|rst_Pin|Os1_Pin|Os2_Pin;
 8000566:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800056a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056c:	2301      	movs	r3, #1
 800056e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000574:	2302      	movs	r3, #2
 8000576:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000578:	f107 0310 	add.w	r3, r7, #16
 800057c:	4619      	mov	r1, r3
 800057e:	480d      	ldr	r0, [pc, #52]	; (80005b4 <MX_GPIO_Init+0x184>)
 8000580:	f000 fe20 	bl	80011c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000584:	2200      	movs	r2, #0
 8000586:	2105      	movs	r1, #5
 8000588:	2006      	movs	r0, #6
 800058a:	f000 fc1a 	bl	8000dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800058e:	2006      	movs	r0, #6
 8000590:	f000 fc33 	bl	8000dfa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000594:	2200      	movs	r2, #0
 8000596:	2105      	movs	r1, #5
 8000598:	2009      	movs	r0, #9
 800059a:	f000 fc12 	bl	8000dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800059e:	2009      	movs	r0, #9
 80005a0:	f000 fc2b 	bl	8000dfa <HAL_NVIC_EnableIRQ>

}
 80005a4:	bf00      	nop
 80005a6:	3720      	adds	r7, #32
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40011000 	.word	0x40011000
 80005b4:	40010800 	.word	0x40010800
 80005b8:	10110000 	.word	0x10110000
 80005bc:	10210000 	.word	0x10210000
 80005c0:	40010c00 	.word	0x40010c00

080005c4 <Reset>:

/* USER CODE BEGIN 4 */
void Reset(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, rst_Pin, 1);
 80005c8:	2201      	movs	r2, #1
 80005ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <Reset+0x20>)
 80005d0:	f000 ff52 	bl	8001478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, rst_Pin, 0);
 80005d4:	2200      	movs	r2, #0
 80005d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005da:	4802      	ldr	r0, [pc, #8]	; (80005e4 <Reset+0x20>)
 80005dc:	f000 ff4c 	bl	8001478 <HAL_GPIO_WritePin>

}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40010800 	.word	0x40010800

080005e8 <Converst>:
void Converst(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOA, Cvrst_Pin, 0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2104      	movs	r1, #4
 80005f0:	4804      	ldr	r0, [pc, #16]	; (8000604 <Converst+0x1c>)
 80005f2:	f000 ff41 	bl	8001478 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA, Cvrst_Pin, 1);
 80005f6:	2201      	movs	r2, #1
 80005f8:	2104      	movs	r1, #4
 80005fa:	4802      	ldr	r0, [pc, #8]	; (8000604 <Converst+0x1c>)
 80005fc:	f000 ff3c 	bl	8001478 <HAL_GPIO_WritePin>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40010800 	.word	0x40010800

08000608 <Read>:

 void Read(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
	//BaseType_t xHigherPriorityTaskWoken = pdFALSE;
	uint16_t valor;
	static unsigned char valor2;
	static unsigned char valor3;
	static unsigned char canais[16];
	j=j+1;
 800060e:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <Read+0x98>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	3301      	adds	r3, #1
 8000614:	4a22      	ldr	r2, [pc, #136]	; (80006a0 <Read+0x98>)
 8000616:	6013      	str	r3, [r2, #0]
	//if(j==1)
	//{
		//__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_BREAK);
	//}

		for (i=0; i<16;)
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	e034      	b.n	8000688 <Read+0x80>
			{
				HAL_GPIO_WritePin(GPIOA, Cs_Pin, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000624:	481f      	ldr	r0, [pc, #124]	; (80006a4 <Read+0x9c>)
 8000626:	f000 ff27 	bl	8001478 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, ce_Pin, 1);
 800062a:	2201      	movs	r2, #1
 800062c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000630:	481c      	ldr	r0, [pc, #112]	; (80006a4 <Read+0x9c>)
 8000632:	f000 ff21 	bl	8001478 <HAL_GPIO_WritePin>

				valor = GPIOB->IDR;
 8000636:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <Read+0xa0>)
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	807b      	strh	r3, [r7, #2]
				valor2 = (valor & 255);
 800063c:	887b      	ldrh	r3, [r7, #2]
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <Read+0xa4>)
 8000642:	701a      	strb	r2, [r3, #0]
				valor3 = ((valor>>8) & 255);
 8000644:	887b      	ldrh	r3, [r7, #2]
 8000646:	0a1b      	lsrs	r3, r3, #8
 8000648:	b29b      	uxth	r3, r3
 800064a:	b2da      	uxtb	r2, r3
 800064c:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <Read+0xa8>)
 800064e:	701a      	strb	r2, [r3, #0]
				canais[i]= valor3;
 8000650:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <Read+0xa8>)
 8000652:	7819      	ldrb	r1, [r3, #0]
 8000654:	4a17      	ldr	r2, [pc, #92]	; (80006b4 <Read+0xac>)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4413      	add	r3, r2
 800065a:	460a      	mov	r2, r1
 800065c:	701a      	strb	r2, [r3, #0]
				canais[i+1]= valor2;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	3301      	adds	r3, #1
 8000662:	4a12      	ldr	r2, [pc, #72]	; (80006ac <Read+0xa4>)
 8000664:	7811      	ldrb	r1, [r2, #0]
 8000666:	4a13      	ldr	r2, [pc, #76]	; (80006b4 <Read+0xac>)
 8000668:	54d1      	strb	r1, [r2, r3]
			////{
				//i=0;
			//}


				i=i+2;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	3302      	adds	r3, #2
 800066e:	607b      	str	r3, [r7, #4]
				HAL_GPIO_WritePin(GPIOA, Cs_Pin, 1);
 8000670:	2201      	movs	r2, #1
 8000672:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000676:	480b      	ldr	r0, [pc, #44]	; (80006a4 <Read+0x9c>)
 8000678:	f000 fefe 	bl	8001478 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, ce_Pin, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000682:	4808      	ldr	r0, [pc, #32]	; (80006a4 <Read+0x9c>)
 8000684:	f000 fef8 	bl	8001478 <HAL_GPIO_WritePin>
		for (i=0; i<16;)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b0f      	cmp	r3, #15
 800068c:	ddc7      	ble.n	800061e <Read+0x16>
	///xBytesSent = xStreamBufferSendFromISR (xStreamBuffer, (void *) canais, 16, & xHigherPriorityTaskWoken);
	//if(xBytesSent==16)
	//{
		//if(j==2)
		//{
			osSemaphoreRelease (habENVHandle);
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <Read+0xb0>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4618      	mov	r0, r3
 8000694:	f002 fd2e 	bl	80030f4 <osSemaphoreRelease>
			//j=0;
		//}
	//}
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	2000002c 	.word	0x2000002c
 80006a4:	40010800 	.word	0x40010800
 80006a8:	40010c00 	.word	0x40010c00
 80006ac:	20000030 	.word	0x20000030
 80006b0:	20000031 	.word	0x20000031
 80006b4:	20000034 	.word	0x20000034
 80006b8:	2000251c 	.word	0x2000251c

080006bc <vAFunction>:

/* USER CODE BEGIN 4 */


void vAFunction( void )
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
	//StreamBufferHandle_t xStreamBuffers;
	const size_t xStreamBufferSizeBytes = 4000, xTriggerLevel = 4000;
 80006c2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80006cc:	603b      	str	r3, [r7, #0]

    /* Create a stream buffer that can hold 100 bytes.  The memory used to hold
    both the stream buffer structure and the data in the stream buffer is
    allocated dynamically. */
    xStreamBuffer = xStreamBufferCreate( xStreamBufferSizeBytes, xTriggerLevel );
 80006ce:	2200      	movs	r2, #0
 80006d0:	6839      	ldr	r1, [r7, #0]
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f003 fe2e 	bl	8004334 <xStreamBufferGenericCreate>
 80006d8:	4602      	mov	r2, r0
 80006da:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <vAFunction+0x2c>)
 80006dc:	601a      	str	r2, [r3, #0]
   // }
   // else
    //{
        /* The stream buffer was created successfully and can now be used. */
   // }
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20002514 	.word	0x20002514

080006ec <StartEnviaTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartEnviaTask */
void StartEnviaTask(void *argument)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	vAFunction();
 80006f4:	f7ff ffe2 	bl	80006bc <vAFunction>
	//size_t xReceivedBytes;
	//const TickType_t xBlockTime = pdMS_TO_TICKS( 20 );
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire (habENVHandle, osWaitForever);
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <StartEnviaTask+0x30>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000700:	4618      	mov	r0, r3
 8000702:	f002 fc91 	bl	8003028 <osSemaphoreAcquire>
	  //xReceivedBytes = xStreamBufferReceive( xStreamBuffer, (void *)ucRxData, 4000, xBlockTime );
	  	//if( xReceivedBytes == sizeof( ucRxData ) )
	  	//{
	  	  //HAL_SPI_Transmit_DMA(&hspi1, ucRxData, 4000);
	  	//}
	  Reset();
 8000706:	f7ff ff5d 	bl	80005c4 <Reset>
	  osDelay(0);
 800070a:	2000      	movs	r0, #0
 800070c:	f002 fbc0 	bl	8002e90 <osDelay>
	  xStreamBufferReset(xStreamBuffer);
 8000710:	4b03      	ldr	r3, [pc, #12]	; (8000720 <StartEnviaTask+0x34>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4618      	mov	r0, r3
 8000716:	f003 fe4e 	bl	80043b6 <xStreamBufferReset>
	  osSemaphoreAcquire (habENVHandle, osWaitForever);
 800071a:	e7ed      	b.n	80006f8 <StartEnviaTask+0xc>
 800071c:	2000251c 	.word	0x2000251c
 8000720:	20002514 	.word	0x20002514

08000724 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000734:	d101      	bne.n	800073a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000736:	f000 fa73 	bl	8000c20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM1) {
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a05      	ldr	r2, [pc, #20]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d103      	bne.n	800074c <HAL_TIM_PeriodElapsedCallback+0x28>

      Converst();
 8000744:	f7ff ff50 	bl	80005e8 <Converst>
      Read();
 8000748:	f7ff ff5e 	bl	8000608 <Read>


    }
  /* USER CODE END Callback 1 */
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40012c00 	.word	0x40012c00

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <HAL_MspInit+0x68>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	4a17      	ldr	r2, [pc, #92]	; (80007cc <HAL_MspInit+0x68>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6193      	str	r3, [r2, #24]
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <HAL_MspInit+0x68>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <HAL_MspInit+0x68>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	4a11      	ldr	r2, [pc, #68]	; (80007cc <HAL_MspInit+0x68>)
 8000788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078c:	61d3      	str	r3, [r2, #28]
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <HAL_MspInit+0x68>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	210f      	movs	r1, #15
 800079e:	f06f 0001 	mvn.w	r0, #1
 80007a2:	f000 fb0e 	bl	8000dc2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <HAL_MspInit+0x6c>)
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <HAL_MspInit+0x6c>)
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40021000 	.word	0x40021000
 80007d0:	40010000 	.word	0x40010000

080007d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a0b      	ldr	r2, [pc, #44]	; (8000810 <HAL_RTC_MspInit+0x3c>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d110      	bne.n	8000808 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80007e6:	f000 fe81 	bl	80014ec <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80007ea:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <HAL_RTC_MspInit+0x40>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	4a09      	ldr	r2, [pc, #36]	; (8000814 <HAL_RTC_MspInit+0x40>)
 80007f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80007f4:	61d3      	str	r3, [r2, #28]
 80007f6:	4b07      	ldr	r3, [pc, #28]	; (8000814 <HAL_RTC_MspInit+0x40>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <HAL_RTC_MspInit+0x44>)
 8000804:	2201      	movs	r2, #1
 8000806:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40002800 	.word	0x40002800
 8000814:	40021000 	.word	0x40021000
 8000818:	4242043c 	.word	0x4242043c

0800081c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a47      	ldr	r2, [pc, #284]	; (8000954 <HAL_SPI_MspInit+0x138>)
 8000838:	4293      	cmp	r3, r2
 800083a:	f040 8086 	bne.w	800094a <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800083e:	4b46      	ldr	r3, [pc, #280]	; (8000958 <HAL_SPI_MspInit+0x13c>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	4a45      	ldr	r2, [pc, #276]	; (8000958 <HAL_SPI_MspInit+0x13c>)
 8000844:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000848:	6193      	str	r3, [r2, #24]
 800084a:	4b43      	ldr	r3, [pc, #268]	; (8000958 <HAL_SPI_MspInit+0x13c>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b40      	ldr	r3, [pc, #256]	; (8000958 <HAL_SPI_MspInit+0x13c>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	4a3f      	ldr	r2, [pc, #252]	; (8000958 <HAL_SPI_MspInit+0x13c>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6193      	str	r3, [r2, #24]
 8000862:	4b3d      	ldr	r3, [pc, #244]	; (8000958 <HAL_SPI_MspInit+0x13c>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800086e:	23b0      	movs	r3, #176	; 0xb0
 8000870:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 0310 	add.w	r3, r7, #16
 800087e:	4619      	mov	r1, r3
 8000880:	4836      	ldr	r0, [pc, #216]	; (800095c <HAL_SPI_MspInit+0x140>)
 8000882:	f000 fc9f 	bl	80011c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000886:	2340      	movs	r3, #64	; 0x40
 8000888:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800088e:	2303      	movs	r3, #3
 8000890:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000892:	f107 0310 	add.w	r3, r7, #16
 8000896:	4619      	mov	r1, r3
 8000898:	4830      	ldr	r0, [pc, #192]	; (800095c <HAL_SPI_MspInit+0x140>)
 800089a:	f000 fc93 	bl	80011c4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800089e:	4b30      	ldr	r3, [pc, #192]	; (8000960 <HAL_SPI_MspInit+0x144>)
 80008a0:	4a30      	ldr	r2, [pc, #192]	; (8000964 <HAL_SPI_MspInit+0x148>)
 80008a2:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008a4:	4b2e      	ldr	r3, [pc, #184]	; (8000960 <HAL_SPI_MspInit+0x144>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008aa:	4b2d      	ldr	r3, [pc, #180]	; (8000960 <HAL_SPI_MspInit+0x144>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008b0:	4b2b      	ldr	r3, [pc, #172]	; (8000960 <HAL_SPI_MspInit+0x144>)
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008b6:	4b2a      	ldr	r3, [pc, #168]	; (8000960 <HAL_SPI_MspInit+0x144>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008bc:	4b28      	ldr	r3, [pc, #160]	; (8000960 <HAL_SPI_MspInit+0x144>)
 80008be:	2200      	movs	r2, #0
 80008c0:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80008c2:	4b27      	ldr	r3, [pc, #156]	; (8000960 <HAL_SPI_MspInit+0x144>)
 80008c4:	2220      	movs	r2, #32
 80008c6:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80008c8:	4b25      	ldr	r3, [pc, #148]	; (8000960 <HAL_SPI_MspInit+0x144>)
 80008ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80008d0:	4823      	ldr	r0, [pc, #140]	; (8000960 <HAL_SPI_MspInit+0x144>)
 80008d2:	f000 faa1 	bl	8000e18 <HAL_DMA_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 80008dc:	f7ff ff3c 	bl	8000758 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a1f      	ldr	r2, [pc, #124]	; (8000960 <HAL_SPI_MspInit+0x144>)
 80008e4:	64da      	str	r2, [r3, #76]	; 0x4c
 80008e6:	4a1e      	ldr	r2, [pc, #120]	; (8000960 <HAL_SPI_MspInit+0x144>)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80008ec:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <HAL_SPI_MspInit+0x14c>)
 80008ee:	4a1f      	ldr	r2, [pc, #124]	; (800096c <HAL_SPI_MspInit+0x150>)
 80008f0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008f2:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <HAL_SPI_MspInit+0x14c>)
 80008f4:	2210      	movs	r2, #16
 80008f6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <HAL_SPI_MspInit+0x14c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <HAL_SPI_MspInit+0x14c>)
 8000900:	2280      	movs	r2, #128	; 0x80
 8000902:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <HAL_SPI_MspInit+0x14c>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <HAL_SPI_MspInit+0x14c>)
 800090c:	2200      	movs	r2, #0
 800090e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <HAL_SPI_MspInit+0x14c>)
 8000912:	2220      	movs	r2, #32
 8000914:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <HAL_SPI_MspInit+0x14c>)
 8000918:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800091c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800091e:	4812      	ldr	r0, [pc, #72]	; (8000968 <HAL_SPI_MspInit+0x14c>)
 8000920:	f000 fa7a 	bl	8000e18 <HAL_DMA_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 800092a:	f7ff ff15 	bl	8000758 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <HAL_SPI_MspInit+0x14c>)
 8000932:	649a      	str	r2, [r3, #72]	; 0x48
 8000934:	4a0c      	ldr	r2, [pc, #48]	; (8000968 <HAL_SPI_MspInit+0x14c>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2105      	movs	r1, #5
 800093e:	2023      	movs	r0, #35	; 0x23
 8000940:	f000 fa3f 	bl	8000dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000944:	2023      	movs	r0, #35	; 0x23
 8000946:	f000 fa58 	bl	8000dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800094a:	bf00      	nop
 800094c:	3720      	adds	r7, #32
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40013000 	.word	0x40013000
 8000958:	40021000 	.word	0x40021000
 800095c:	40010800 	.word	0x40010800
 8000960:	200025d0 	.word	0x200025d0
 8000964:	4002001c 	.word	0x4002001c
 8000968:	20002614 	.word	0x20002614
 800096c:	40020030 	.word	0x40020030

08000970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a11      	ldr	r2, [pc, #68]	; (80009c4 <HAL_TIM_Base_MspInit+0x54>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d11b      	bne.n	80009ba <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <HAL_TIM_Base_MspInit+0x58>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	4a10      	ldr	r2, [pc, #64]	; (80009c8 <HAL_TIM_Base_MspInit+0x58>)
 8000988:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800098c:	6193      	str	r3, [r2, #24]
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <HAL_TIM_Base_MspInit+0x58>)
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2105      	movs	r1, #5
 800099e:	2018      	movs	r0, #24
 80009a0:	f000 fa0f 	bl	8000dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80009a4:	2018      	movs	r0, #24
 80009a6:	f000 fa28 	bl	8000dfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2105      	movs	r1, #5
 80009ae:	2019      	movs	r0, #25
 80009b0:	f000 fa07 	bl	8000dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80009b4:	2019      	movs	r0, #25
 80009b6:	f000 fa20 	bl	8000dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40012c00 	.word	0x40012c00
 80009c8:	40021000 	.word	0x40021000

080009cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08c      	sub	sp, #48	; 0x30
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 80009dc:	2200      	movs	r2, #0
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	201c      	movs	r0, #28
 80009e2:	f000 f9ee 	bl	8000dc2 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 80009e6:	201c      	movs	r0, #28
 80009e8:	f000 fa07 	bl	8000dfa <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80009ec:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <HAL_InitTick+0xa4>)
 80009ee:	69db      	ldr	r3, [r3, #28]
 80009f0:	4a1f      	ldr	r2, [pc, #124]	; (8000a70 <HAL_InitTick+0xa4>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	61d3      	str	r3, [r2, #28]
 80009f8:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <HAL_InitTick+0xa4>)
 80009fa:	69db      	ldr	r3, [r3, #28]
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a04:	f107 0210 	add.w	r2, r7, #16
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f001 f976 	bl	8001d00 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a14:	f001 f94c 	bl	8001cb0 <HAL_RCC_GetPCLK1Freq>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a20:	4a14      	ldr	r2, [pc, #80]	; (8000a74 <HAL_InitTick+0xa8>)
 8000a22:	fba2 2303 	umull	r2, r3, r2, r3
 8000a26:	0c9b      	lsrs	r3, r3, #18
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_InitTick+0xac>)
 8000a2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a32:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8000a34:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <HAL_InitTick+0xac>)
 8000a36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a3a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000a3c:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <HAL_InitTick+0xac>)
 8000a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a40:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <HAL_InitTick+0xac>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a48:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <HAL_InitTick+0xac>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000a4e:	480a      	ldr	r0, [pc, #40]	; (8000a78 <HAL_InitTick+0xac>)
 8000a50:	f001 fd8f 	bl	8002572 <HAL_TIM_Base_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d104      	bne.n	8000a64 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000a5a:	4807      	ldr	r0, [pc, #28]	; (8000a78 <HAL_InitTick+0xac>)
 8000a5c:	f001 fdb4 	bl	80025c8 <HAL_TIM_Base_Start_IT>
 8000a60:	4603      	mov	r3, r0
 8000a62:	e000      	b.n	8000a66 <HAL_InitTick+0x9a>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000a64:	2301      	movs	r3, #1
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3730      	adds	r7, #48	; 0x30
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40021000 	.word	0x40021000
 8000a74:	431bde83 	.word	0x431bde83
 8000a78:	20002658 	.word	0x20002658

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <HardFault_Handler+0x4>

08000a8e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <MemManage_Handler+0x4>

08000a94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <BusFault_Handler+0x4>

08000a9a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <UsageFault_Handler+0x4>

08000aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f000 fcf9 	bl	80014a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000abe:	2008      	movs	r0, #8
 8000ac0:	f000 fcf2 	bl	80014a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000acc:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <DMA1_Channel2_IRQHandler+0x10>)
 8000ace:	f000 fa73 	bl	8000fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200025d0 	.word	0x200025d0

08000adc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <DMA1_Channel3_IRQHandler+0x10>)
 8000ae2:	f000 fa69 	bl	8000fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20002614 	.word	0x20002614

08000af0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <TIM1_BRK_IRQHandler+0x10>)
 8000af6:	f001 fd8a 	bl	800260e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20002534 	.word	0x20002534

08000b04 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <TIM1_UP_IRQHandler+0x10>)
 8000b0a:	f001 fd80 	bl	800260e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20002534 	.word	0x20002534

08000b18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b1c:	4802      	ldr	r0, [pc, #8]	; (8000b28 <TIM2_IRQHandler+0x10>)
 8000b1e:	f001 fd76 	bl	800260e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20002658 	.word	0x20002658

08000b2c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <SPI1_IRQHandler+0x10>)
 8000b32:	f001 fc19 	bl	8002368 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20002574 	.word	0x20002574

08000b40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000b44:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <SystemInit+0x5c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <SystemInit+0x5c>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <SystemInit+0x5c>)
 8000b52:	685a      	ldr	r2, [r3, #4]
 8000b54:	4911      	ldr	r1, [pc, #68]	; (8000b9c <SystemInit+0x5c>)
 8000b56:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <SystemInit+0x60>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <SystemInit+0x5c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0e      	ldr	r2, [pc, #56]	; (8000b9c <SystemInit+0x5c>)
 8000b62:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b6a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <SystemInit+0x5c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <SystemInit+0x5c>)
 8000b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b76:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <SystemInit+0x5c>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <SystemInit+0x5c>)
 8000b7e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000b82:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <SystemInit+0x5c>)
 8000b86:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000b8a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <SystemInit+0x64>)
 8000b8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b92:	609a      	str	r2, [r3, #8]
#endif 
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	f8ff0000 	.word	0xf8ff0000
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ba8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000baa:	e003      	b.n	8000bb4 <LoopCopyDataInit>

08000bac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000bac:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000bae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000bb0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000bb2:	3104      	adds	r1, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000bb4:	480a      	ldr	r0, [pc, #40]	; (8000be0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000bb8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000bba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000bbc:	d3f6      	bcc.n	8000bac <CopyDataInit>
  ldr r2, =_sbss
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000bc0:	e002      	b.n	8000bc8 <LoopFillZerobss>

08000bc2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000bc4:	f842 3b04 	str.w	r3, [r2], #4

08000bc8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000bca:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000bcc:	d3f9      	bcc.n	8000bc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bce:	f7ff ffb7 	bl	8000b40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bd2:	f005 fb33 	bl	800623c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bd6:	f7ff fac9 	bl	800016c <main>
  bx lr
 8000bda:	4770      	bx	lr
  ldr r3, =_sidata
 8000bdc:	08006384 	.word	0x08006384
  ldr r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000be4:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000be8:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000bec:	200026dc 	.word	0x200026dc

08000bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC1_2_IRQHandler>
	...

08000bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <HAL_Init+0x28>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <HAL_Init+0x28>)
 8000bfe:	f043 0310 	orr.w	r3, r3, #16
 8000c02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c04:	2003      	movs	r0, #3
 8000c06:	f000 f8d1 	bl	8000dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f7ff fede 	bl	80009cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c10:	f7ff fda8 	bl	8000764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40022000 	.word	0x40022000

08000c20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <HAL_IncTick+0x1c>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <HAL_IncTick+0x20>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a03      	ldr	r2, [pc, #12]	; (8000c40 <HAL_IncTick+0x20>)
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	20000008 	.word	0x20000008
 8000c40:	20002698 	.word	0x20002698

08000c44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return uwTick;
 8000c48:	4b02      	ldr	r3, [pc, #8]	; (8000c54 <HAL_GetTick+0x10>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	20002698 	.word	0x20002698

08000c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c74:	4013      	ands	r3, r2
 8000c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8a:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	60d3      	str	r3, [r2, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	f003 0307 	and.w	r3, r3, #7
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db0b      	blt.n	8000ce6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	f003 021f 	and.w	r2, r3, #31
 8000cd4:	4906      	ldr	r1, [pc, #24]	; (8000cf0 <__NVIC_EnableIRQ+0x34>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	095b      	lsrs	r3, r3, #5
 8000cdc:	2001      	movs	r0, #1
 8000cde:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	e000e100 	.word	0xe000e100

08000cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	db0a      	blt.n	8000d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	490c      	ldr	r1, [pc, #48]	; (8000d40 <__NVIC_SetPriority+0x4c>)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	0112      	lsls	r2, r2, #4
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	440b      	add	r3, r1
 8000d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d1c:	e00a      	b.n	8000d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4908      	ldr	r1, [pc, #32]	; (8000d44 <__NVIC_SetPriority+0x50>)
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	f003 030f 	and.w	r3, r3, #15
 8000d2a:	3b04      	subs	r3, #4
 8000d2c:	0112      	lsls	r2, r2, #4
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	440b      	add	r3, r1
 8000d32:	761a      	strb	r2, [r3, #24]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000e100 	.word	0xe000e100
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	; 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f1c3 0307 	rsb	r3, r3, #7
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	bf28      	it	cs
 8000d66:	2304      	movcs	r3, #4
 8000d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	2b06      	cmp	r3, #6
 8000d70:	d902      	bls.n	8000d78 <NVIC_EncodePriority+0x30>
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3b03      	subs	r3, #3
 8000d76:	e000      	b.n	8000d7a <NVIC_EncodePriority+0x32>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43da      	mvns	r2, r3
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d90:	f04f 31ff 	mov.w	r1, #4294967295
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	43d9      	mvns	r1, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	4313      	orrs	r3, r2
         );
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3724      	adds	r7, #36	; 0x24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr

08000dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff ff4f 	bl	8000c58 <__NVIC_SetPriorityGrouping>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
 8000dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd4:	f7ff ff64 	bl	8000ca0 <__NVIC_GetPriorityGrouping>
 8000dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	68b9      	ldr	r1, [r7, #8]
 8000dde:	6978      	ldr	r0, [r7, #20]
 8000de0:	f7ff ffb2 	bl	8000d48 <NVIC_EncodePriority>
 8000de4:	4602      	mov	r2, r0
 8000de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff81 	bl	8000cf4 <__NVIC_SetPriority>
}
 8000df2:	bf00      	nop
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff57 	bl	8000cbc <__NVIC_EnableIRQ>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d101      	bne.n	8000e2e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e043      	b.n	8000eb6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <HAL_DMA_Init+0xa8>)
 8000e36:	4413      	add	r3, r2
 8000e38:	4a22      	ldr	r2, [pc, #136]	; (8000ec4 <HAL_DMA_Init+0xac>)
 8000e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3e:	091b      	lsrs	r3, r3, #4
 8000e40:	009a      	lsls	r2, r3, #2
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a1f      	ldr	r2, [pc, #124]	; (8000ec8 <HAL_DMA_Init+0xb0>)
 8000e4a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2202      	movs	r2, #2
 8000e50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000e62:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	bffdfff8 	.word	0xbffdfff8
 8000ec4:	cccccccd 	.word	0xcccccccd
 8000ec8:	40020000 	.word	0x40020000

08000ecc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d005      	beq.n	8000eee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	e051      	b.n	8000f92 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f022 020e 	bic.w	r2, r2, #14
 8000efc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f022 0201 	bic.w	r2, r2, #1
 8000f0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a22      	ldr	r2, [pc, #136]	; (8000f9c <HAL_DMA_Abort_IT+0xd0>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d029      	beq.n	8000f6c <HAL_DMA_Abort_IT+0xa0>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a20      	ldr	r2, [pc, #128]	; (8000fa0 <HAL_DMA_Abort_IT+0xd4>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d022      	beq.n	8000f68 <HAL_DMA_Abort_IT+0x9c>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a1f      	ldr	r2, [pc, #124]	; (8000fa4 <HAL_DMA_Abort_IT+0xd8>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d01a      	beq.n	8000f62 <HAL_DMA_Abort_IT+0x96>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a1d      	ldr	r2, [pc, #116]	; (8000fa8 <HAL_DMA_Abort_IT+0xdc>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d012      	beq.n	8000f5c <HAL_DMA_Abort_IT+0x90>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a1c      	ldr	r2, [pc, #112]	; (8000fac <HAL_DMA_Abort_IT+0xe0>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d00a      	beq.n	8000f56 <HAL_DMA_Abort_IT+0x8a>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a1a      	ldr	r2, [pc, #104]	; (8000fb0 <HAL_DMA_Abort_IT+0xe4>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d102      	bne.n	8000f50 <HAL_DMA_Abort_IT+0x84>
 8000f4a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f4e:	e00e      	b.n	8000f6e <HAL_DMA_Abort_IT+0xa2>
 8000f50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f54:	e00b      	b.n	8000f6e <HAL_DMA_Abort_IT+0xa2>
 8000f56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f5a:	e008      	b.n	8000f6e <HAL_DMA_Abort_IT+0xa2>
 8000f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f60:	e005      	b.n	8000f6e <HAL_DMA_Abort_IT+0xa2>
 8000f62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f66:	e002      	b.n	8000f6e <HAL_DMA_Abort_IT+0xa2>
 8000f68:	2310      	movs	r3, #16
 8000f6a:	e000      	b.n	8000f6e <HAL_DMA_Abort_IT+0xa2>
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <HAL_DMA_Abort_IT+0xe8>)
 8000f70:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2201      	movs	r2, #1
 8000f76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	4798      	blx	r3
    } 
  }
  return status;
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40020008 	.word	0x40020008
 8000fa0:	4002001c 	.word	0x4002001c
 8000fa4:	40020030 	.word	0x40020030
 8000fa8:	40020044 	.word	0x40020044
 8000fac:	40020058 	.word	0x40020058
 8000fb0:	4002006c 	.word	0x4002006c
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d04f      	beq.n	8001080 <HAL_DMA_IRQHandler+0xc8>
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d04a      	beq.n	8001080 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0320 	and.w	r3, r3, #32
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d107      	bne.n	8001008 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0204 	bic.w	r2, r2, #4
 8001006:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a66      	ldr	r2, [pc, #408]	; (80011a8 <HAL_DMA_IRQHandler+0x1f0>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d029      	beq.n	8001066 <HAL_DMA_IRQHandler+0xae>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a65      	ldr	r2, [pc, #404]	; (80011ac <HAL_DMA_IRQHandler+0x1f4>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d022      	beq.n	8001062 <HAL_DMA_IRQHandler+0xaa>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a63      	ldr	r2, [pc, #396]	; (80011b0 <HAL_DMA_IRQHandler+0x1f8>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d01a      	beq.n	800105c <HAL_DMA_IRQHandler+0xa4>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a62      	ldr	r2, [pc, #392]	; (80011b4 <HAL_DMA_IRQHandler+0x1fc>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d012      	beq.n	8001056 <HAL_DMA_IRQHandler+0x9e>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a60      	ldr	r2, [pc, #384]	; (80011b8 <HAL_DMA_IRQHandler+0x200>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d00a      	beq.n	8001050 <HAL_DMA_IRQHandler+0x98>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a5f      	ldr	r2, [pc, #380]	; (80011bc <HAL_DMA_IRQHandler+0x204>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d102      	bne.n	800104a <HAL_DMA_IRQHandler+0x92>
 8001044:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001048:	e00e      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 800104a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800104e:	e00b      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 8001050:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001054:	e008      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 8001056:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800105a:	e005      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 800105c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001060:	e002      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 8001062:	2340      	movs	r3, #64	; 0x40
 8001064:	e000      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 8001066:	2304      	movs	r3, #4
 8001068:	4a55      	ldr	r2, [pc, #340]	; (80011c0 <HAL_DMA_IRQHandler+0x208>)
 800106a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 8094 	beq.w	800119e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800107e:	e08e      	b.n	800119e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	2202      	movs	r2, #2
 8001086:	409a      	lsls	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4013      	ands	r3, r2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d056      	beq.n	800113e <HAL_DMA_IRQHandler+0x186>
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d051      	beq.n	800113e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0320 	and.w	r3, r3, #32
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d10b      	bne.n	80010c0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 020a 	bic.w	r2, r2, #10
 80010b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a38      	ldr	r2, [pc, #224]	; (80011a8 <HAL_DMA_IRQHandler+0x1f0>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d029      	beq.n	800111e <HAL_DMA_IRQHandler+0x166>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a37      	ldr	r2, [pc, #220]	; (80011ac <HAL_DMA_IRQHandler+0x1f4>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d022      	beq.n	800111a <HAL_DMA_IRQHandler+0x162>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a35      	ldr	r2, [pc, #212]	; (80011b0 <HAL_DMA_IRQHandler+0x1f8>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d01a      	beq.n	8001114 <HAL_DMA_IRQHandler+0x15c>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a34      	ldr	r2, [pc, #208]	; (80011b4 <HAL_DMA_IRQHandler+0x1fc>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d012      	beq.n	800110e <HAL_DMA_IRQHandler+0x156>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a32      	ldr	r2, [pc, #200]	; (80011b8 <HAL_DMA_IRQHandler+0x200>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d00a      	beq.n	8001108 <HAL_DMA_IRQHandler+0x150>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a31      	ldr	r2, [pc, #196]	; (80011bc <HAL_DMA_IRQHandler+0x204>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d102      	bne.n	8001102 <HAL_DMA_IRQHandler+0x14a>
 80010fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001100:	e00e      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 8001102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001106:	e00b      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 8001108:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800110c:	e008      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 800110e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001112:	e005      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 8001114:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001118:	e002      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 800111a:	2320      	movs	r3, #32
 800111c:	e000      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 800111e:	2302      	movs	r3, #2
 8001120:	4a27      	ldr	r2, [pc, #156]	; (80011c0 <HAL_DMA_IRQHandler+0x208>)
 8001122:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001130:	2b00      	cmp	r3, #0
 8001132:	d034      	beq.n	800119e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800113c:	e02f      	b.n	800119e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	2208      	movs	r2, #8
 8001144:	409a      	lsls	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4013      	ands	r3, r2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d028      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x1e8>
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	2b00      	cmp	r3, #0
 8001156:	d023      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f022 020e 	bic.w	r2, r2, #14
 8001166:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001170:	2101      	movs	r1, #1
 8001172:	fa01 f202 	lsl.w	r2, r1, r2
 8001176:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	2b00      	cmp	r3, #0
 8001194:	d004      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	4798      	blx	r3
    }
  }
  return;
 800119e:	bf00      	nop
 80011a0:	bf00      	nop
}
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40020008 	.word	0x40020008
 80011ac:	4002001c 	.word	0x4002001c
 80011b0:	40020030 	.word	0x40020030
 80011b4:	40020044 	.word	0x40020044
 80011b8:	40020058 	.word	0x40020058
 80011bc:	4002006c 	.word	0x4002006c
 80011c0:	40020000 	.word	0x40020000

080011c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b08b      	sub	sp, #44	; 0x2c
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ce:	2300      	movs	r3, #0
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011d2:	2300      	movs	r3, #0
 80011d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d6:	e127      	b.n	8001428 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011d8:	2201      	movs	r2, #1
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	69fa      	ldr	r2, [r7, #28]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	f040 8116 	bne.w	8001422 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b12      	cmp	r3, #18
 80011fc:	d034      	beq.n	8001268 <HAL_GPIO_Init+0xa4>
 80011fe:	2b12      	cmp	r3, #18
 8001200:	d80d      	bhi.n	800121e <HAL_GPIO_Init+0x5a>
 8001202:	2b02      	cmp	r3, #2
 8001204:	d02b      	beq.n	800125e <HAL_GPIO_Init+0x9a>
 8001206:	2b02      	cmp	r3, #2
 8001208:	d804      	bhi.n	8001214 <HAL_GPIO_Init+0x50>
 800120a:	2b00      	cmp	r3, #0
 800120c:	d031      	beq.n	8001272 <HAL_GPIO_Init+0xae>
 800120e:	2b01      	cmp	r3, #1
 8001210:	d01c      	beq.n	800124c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001212:	e048      	b.n	80012a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001214:	2b03      	cmp	r3, #3
 8001216:	d043      	beq.n	80012a0 <HAL_GPIO_Init+0xdc>
 8001218:	2b11      	cmp	r3, #17
 800121a:	d01b      	beq.n	8001254 <HAL_GPIO_Init+0x90>
          break;
 800121c:	e043      	b.n	80012a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800121e:	4a89      	ldr	r2, [pc, #548]	; (8001444 <HAL_GPIO_Init+0x280>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d026      	beq.n	8001272 <HAL_GPIO_Init+0xae>
 8001224:	4a87      	ldr	r2, [pc, #540]	; (8001444 <HAL_GPIO_Init+0x280>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d806      	bhi.n	8001238 <HAL_GPIO_Init+0x74>
 800122a:	4a87      	ldr	r2, [pc, #540]	; (8001448 <HAL_GPIO_Init+0x284>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d020      	beq.n	8001272 <HAL_GPIO_Init+0xae>
 8001230:	4a86      	ldr	r2, [pc, #536]	; (800144c <HAL_GPIO_Init+0x288>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d01d      	beq.n	8001272 <HAL_GPIO_Init+0xae>
          break;
 8001236:	e036      	b.n	80012a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001238:	4a85      	ldr	r2, [pc, #532]	; (8001450 <HAL_GPIO_Init+0x28c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d019      	beq.n	8001272 <HAL_GPIO_Init+0xae>
 800123e:	4a85      	ldr	r2, [pc, #532]	; (8001454 <HAL_GPIO_Init+0x290>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d016      	beq.n	8001272 <HAL_GPIO_Init+0xae>
 8001244:	4a84      	ldr	r2, [pc, #528]	; (8001458 <HAL_GPIO_Init+0x294>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d013      	beq.n	8001272 <HAL_GPIO_Init+0xae>
          break;
 800124a:	e02c      	b.n	80012a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	623b      	str	r3, [r7, #32]
          break;
 8001252:	e028      	b.n	80012a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	3304      	adds	r3, #4
 800125a:	623b      	str	r3, [r7, #32]
          break;
 800125c:	e023      	b.n	80012a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	3308      	adds	r3, #8
 8001264:	623b      	str	r3, [r7, #32]
          break;
 8001266:	e01e      	b.n	80012a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	330c      	adds	r3, #12
 800126e:	623b      	str	r3, [r7, #32]
          break;
 8001270:	e019      	b.n	80012a6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d102      	bne.n	8001280 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800127a:	2304      	movs	r3, #4
 800127c:	623b      	str	r3, [r7, #32]
          break;
 800127e:	e012      	b.n	80012a6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d105      	bne.n	8001294 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001288:	2308      	movs	r3, #8
 800128a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69fa      	ldr	r2, [r7, #28]
 8001290:	611a      	str	r2, [r3, #16]
          break;
 8001292:	e008      	b.n	80012a6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001294:	2308      	movs	r3, #8
 8001296:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	69fa      	ldr	r2, [r7, #28]
 800129c:	615a      	str	r2, [r3, #20]
          break;
 800129e:	e002      	b.n	80012a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012a0:	2300      	movs	r3, #0
 80012a2:	623b      	str	r3, [r7, #32]
          break;
 80012a4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	2bff      	cmp	r3, #255	; 0xff
 80012aa:	d801      	bhi.n	80012b0 <HAL_GPIO_Init+0xec>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	e001      	b.n	80012b4 <HAL_GPIO_Init+0xf0>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3304      	adds	r3, #4
 80012b4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2bff      	cmp	r3, #255	; 0xff
 80012ba:	d802      	bhi.n	80012c2 <HAL_GPIO_Init+0xfe>
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	e002      	b.n	80012c8 <HAL_GPIO_Init+0x104>
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	3b08      	subs	r3, #8
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	210f      	movs	r1, #15
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	401a      	ands	r2, r3
 80012da:	6a39      	ldr	r1, [r7, #32]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	431a      	orrs	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 8096 	beq.w	8001422 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012f6:	4b59      	ldr	r3, [pc, #356]	; (800145c <HAL_GPIO_Init+0x298>)
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	4a58      	ldr	r2, [pc, #352]	; (800145c <HAL_GPIO_Init+0x298>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6193      	str	r3, [r2, #24]
 8001302:	4b56      	ldr	r3, [pc, #344]	; (800145c <HAL_GPIO_Init+0x298>)
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800130e:	4a54      	ldr	r2, [pc, #336]	; (8001460 <HAL_GPIO_Init+0x29c>)
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	3302      	adds	r3, #2
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	220f      	movs	r2, #15
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	4013      	ands	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4b      	ldr	r2, [pc, #300]	; (8001464 <HAL_GPIO_Init+0x2a0>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d013      	beq.n	8001362 <HAL_GPIO_Init+0x19e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4a      	ldr	r2, [pc, #296]	; (8001468 <HAL_GPIO_Init+0x2a4>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d00d      	beq.n	800135e <HAL_GPIO_Init+0x19a>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a49      	ldr	r2, [pc, #292]	; (800146c <HAL_GPIO_Init+0x2a8>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d007      	beq.n	800135a <HAL_GPIO_Init+0x196>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a48      	ldr	r2, [pc, #288]	; (8001470 <HAL_GPIO_Init+0x2ac>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d101      	bne.n	8001356 <HAL_GPIO_Init+0x192>
 8001352:	2303      	movs	r3, #3
 8001354:	e006      	b.n	8001364 <HAL_GPIO_Init+0x1a0>
 8001356:	2304      	movs	r3, #4
 8001358:	e004      	b.n	8001364 <HAL_GPIO_Init+0x1a0>
 800135a:	2302      	movs	r3, #2
 800135c:	e002      	b.n	8001364 <HAL_GPIO_Init+0x1a0>
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <HAL_GPIO_Init+0x1a0>
 8001362:	2300      	movs	r3, #0
 8001364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001366:	f002 0203 	and.w	r2, r2, #3
 800136a:	0092      	lsls	r2, r2, #2
 800136c:	4093      	lsls	r3, r2
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	4313      	orrs	r3, r2
 8001372:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001374:	493a      	ldr	r1, [pc, #232]	; (8001460 <HAL_GPIO_Init+0x29c>)
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	3302      	adds	r3, #2
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d006      	beq.n	800139c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800138e:	4b39      	ldr	r3, [pc, #228]	; (8001474 <HAL_GPIO_Init+0x2b0>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	4938      	ldr	r1, [pc, #224]	; (8001474 <HAL_GPIO_Init+0x2b0>)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	600b      	str	r3, [r1, #0]
 800139a:	e006      	b.n	80013aa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800139c:	4b35      	ldr	r3, [pc, #212]	; (8001474 <HAL_GPIO_Init+0x2b0>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	4933      	ldr	r1, [pc, #204]	; (8001474 <HAL_GPIO_Init+0x2b0>)
 80013a6:	4013      	ands	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d006      	beq.n	80013c4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013b6:	4b2f      	ldr	r3, [pc, #188]	; (8001474 <HAL_GPIO_Init+0x2b0>)
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	492e      	ldr	r1, [pc, #184]	; (8001474 <HAL_GPIO_Init+0x2b0>)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	604b      	str	r3, [r1, #4]
 80013c2:	e006      	b.n	80013d2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013c4:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <HAL_GPIO_Init+0x2b0>)
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	4929      	ldr	r1, [pc, #164]	; (8001474 <HAL_GPIO_Init+0x2b0>)
 80013ce:	4013      	ands	r3, r2
 80013d0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d006      	beq.n	80013ec <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013de:	4b25      	ldr	r3, [pc, #148]	; (8001474 <HAL_GPIO_Init+0x2b0>)
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	4924      	ldr	r1, [pc, #144]	; (8001474 <HAL_GPIO_Init+0x2b0>)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	608b      	str	r3, [r1, #8]
 80013ea:	e006      	b.n	80013fa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013ec:	4b21      	ldr	r3, [pc, #132]	; (8001474 <HAL_GPIO_Init+0x2b0>)
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	491f      	ldr	r1, [pc, #124]	; (8001474 <HAL_GPIO_Init+0x2b0>)
 80013f6:	4013      	ands	r3, r2
 80013f8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d006      	beq.n	8001414 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001406:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <HAL_GPIO_Init+0x2b0>)
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	491a      	ldr	r1, [pc, #104]	; (8001474 <HAL_GPIO_Init+0x2b0>)
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	60cb      	str	r3, [r1, #12]
 8001412:	e006      	b.n	8001422 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <HAL_GPIO_Init+0x2b0>)
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	43db      	mvns	r3, r3
 800141c:	4915      	ldr	r1, [pc, #84]	; (8001474 <HAL_GPIO_Init+0x2b0>)
 800141e:	4013      	ands	r3, r2
 8001420:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	3301      	adds	r3, #1
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	fa22 f303 	lsr.w	r3, r2, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	f47f aed0 	bne.w	80011d8 <HAL_GPIO_Init+0x14>
  }
}
 8001438:	bf00      	nop
 800143a:	372c      	adds	r7, #44	; 0x2c
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	10210000 	.word	0x10210000
 8001448:	10110000 	.word	0x10110000
 800144c:	10120000 	.word	0x10120000
 8001450:	10310000 	.word	0x10310000
 8001454:	10320000 	.word	0x10320000
 8001458:	10220000 	.word	0x10220000
 800145c:	40021000 	.word	0x40021000
 8001460:	40010000 	.word	0x40010000
 8001464:	40010800 	.word	0x40010800
 8001468:	40010c00 	.word	0x40010c00
 800146c:	40011000 	.word	0x40011000
 8001470:	40011400 	.word	0x40011400
 8001474:	40010400 	.word	0x40010400

08001478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]
 8001484:	4613      	mov	r3, r2
 8001486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001488:	787b      	ldrb	r3, [r7, #1]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800148e:	887a      	ldrh	r2, [r7, #2]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001494:	e003      	b.n	800149e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001496:	887b      	ldrh	r3, [r7, #2]
 8001498:	041a      	lsls	r2, r3, #16
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	611a      	str	r2, [r3, #16]
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014b4:	695a      	ldr	r2, [r3, #20]
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	4013      	ands	r3, r2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d006      	beq.n	80014cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014be:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014c0:	88fb      	ldrh	r3, [r7, #6]
 80014c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f806 	bl	80014d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40010400 	.word	0x40010400

080014d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <HAL_PWR_EnableBkUpAccess+0x14>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	601a      	str	r2, [r3, #0]
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	420e0020 	.word	0x420e0020

08001504 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e26c      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 8087 	beq.w	8001632 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001524:	4b92      	ldr	r3, [pc, #584]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 030c 	and.w	r3, r3, #12
 800152c:	2b04      	cmp	r3, #4
 800152e:	d00c      	beq.n	800154a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001530:	4b8f      	ldr	r3, [pc, #572]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 030c 	and.w	r3, r3, #12
 8001538:	2b08      	cmp	r3, #8
 800153a:	d112      	bne.n	8001562 <HAL_RCC_OscConfig+0x5e>
 800153c:	4b8c      	ldr	r3, [pc, #560]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001548:	d10b      	bne.n	8001562 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154a:	4b89      	ldr	r3, [pc, #548]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d06c      	beq.n	8001630 <HAL_RCC_OscConfig+0x12c>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d168      	bne.n	8001630 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e246      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156a:	d106      	bne.n	800157a <HAL_RCC_OscConfig+0x76>
 800156c:	4b80      	ldr	r3, [pc, #512]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a7f      	ldr	r2, [pc, #508]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	e02e      	b.n	80015d8 <HAL_RCC_OscConfig+0xd4>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10c      	bne.n	800159c <HAL_RCC_OscConfig+0x98>
 8001582:	4b7b      	ldr	r3, [pc, #492]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a7a      	ldr	r2, [pc, #488]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	4b78      	ldr	r3, [pc, #480]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a77      	ldr	r2, [pc, #476]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001594:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e01d      	b.n	80015d8 <HAL_RCC_OscConfig+0xd4>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015a4:	d10c      	bne.n	80015c0 <HAL_RCC_OscConfig+0xbc>
 80015a6:	4b72      	ldr	r3, [pc, #456]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a71      	ldr	r2, [pc, #452]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	4b6f      	ldr	r3, [pc, #444]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a6e      	ldr	r2, [pc, #440]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	e00b      	b.n	80015d8 <HAL_RCC_OscConfig+0xd4>
 80015c0:	4b6b      	ldr	r3, [pc, #428]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a6a      	ldr	r2, [pc, #424]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	4b68      	ldr	r3, [pc, #416]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a67      	ldr	r2, [pc, #412]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d013      	beq.n	8001608 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e0:	f7ff fb30 	bl	8000c44 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e8:	f7ff fb2c 	bl	8000c44 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b64      	cmp	r3, #100	; 0x64
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e1fa      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fa:	4b5d      	ldr	r3, [pc, #372]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0f0      	beq.n	80015e8 <HAL_RCC_OscConfig+0xe4>
 8001606:	e014      	b.n	8001632 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001608:	f7ff fb1c 	bl	8000c44 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001610:	f7ff fb18 	bl	8000c44 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b64      	cmp	r3, #100	; 0x64
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e1e6      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001622:	4b53      	ldr	r3, [pc, #332]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x10c>
 800162e:	e000      	b.n	8001632 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d063      	beq.n	8001706 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800163e:	4b4c      	ldr	r3, [pc, #304]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 030c 	and.w	r3, r3, #12
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00b      	beq.n	8001662 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800164a:	4b49      	ldr	r3, [pc, #292]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	2b08      	cmp	r3, #8
 8001654:	d11c      	bne.n	8001690 <HAL_RCC_OscConfig+0x18c>
 8001656:	4b46      	ldr	r3, [pc, #280]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d116      	bne.n	8001690 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001662:	4b43      	ldr	r3, [pc, #268]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d005      	beq.n	800167a <HAL_RCC_OscConfig+0x176>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d001      	beq.n	800167a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e1ba      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167a:	4b3d      	ldr	r3, [pc, #244]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	4939      	ldr	r1, [pc, #228]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 800168a:	4313      	orrs	r3, r2
 800168c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168e:	e03a      	b.n	8001706 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d020      	beq.n	80016da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001698:	4b36      	ldr	r3, [pc, #216]	; (8001774 <HAL_RCC_OscConfig+0x270>)
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169e:	f7ff fad1 	bl	8000c44 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a6:	f7ff facd 	bl	8000c44 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e19b      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b8:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c4:	4b2a      	ldr	r3, [pc, #168]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	4927      	ldr	r1, [pc, #156]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	600b      	str	r3, [r1, #0]
 80016d8:	e015      	b.n	8001706 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016da:	4b26      	ldr	r3, [pc, #152]	; (8001774 <HAL_RCC_OscConfig+0x270>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fab0 	bl	8000c44 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e8:	f7ff faac 	bl	8000c44 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e17a      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fa:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	2b00      	cmp	r3, #0
 8001710:	d03a      	beq.n	8001788 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d019      	beq.n	800174e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <HAL_RCC_OscConfig+0x274>)
 800171c:	2201      	movs	r2, #1
 800171e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001720:	f7ff fa90 	bl	8000c44 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001728:	f7ff fa8c 	bl	8000c44 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e15a      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173a:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001746:	2001      	movs	r0, #1
 8001748:	f000 fb0a 	bl	8001d60 <RCC_Delay>
 800174c:	e01c      	b.n	8001788 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_RCC_OscConfig+0x274>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001754:	f7ff fa76 	bl	8000c44 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800175a:	e00f      	b.n	800177c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800175c:	f7ff fa72 	bl	8000c44 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d908      	bls.n	800177c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e140      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000
 8001774:	42420000 	.word	0x42420000
 8001778:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800177c:	4b9e      	ldr	r3, [pc, #632]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1e9      	bne.n	800175c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 80a6 	beq.w	80018e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001796:	2300      	movs	r3, #0
 8001798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800179a:	4b97      	ldr	r3, [pc, #604]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10d      	bne.n	80017c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a6:	4b94      	ldr	r3, [pc, #592]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	4a93      	ldr	r2, [pc, #588]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 80017ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b0:	61d3      	str	r3, [r2, #28]
 80017b2:	4b91      	ldr	r3, [pc, #580]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017be:	2301      	movs	r3, #1
 80017c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c2:	4b8e      	ldr	r3, [pc, #568]	; (80019fc <HAL_RCC_OscConfig+0x4f8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d118      	bne.n	8001800 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ce:	4b8b      	ldr	r3, [pc, #556]	; (80019fc <HAL_RCC_OscConfig+0x4f8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a8a      	ldr	r2, [pc, #552]	; (80019fc <HAL_RCC_OscConfig+0x4f8>)
 80017d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017da:	f7ff fa33 	bl	8000c44 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e2:	f7ff fa2f 	bl	8000c44 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b64      	cmp	r3, #100	; 0x64
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e0fd      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f4:	4b81      	ldr	r3, [pc, #516]	; (80019fc <HAL_RCC_OscConfig+0x4f8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0f0      	beq.n	80017e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d106      	bne.n	8001816 <HAL_RCC_OscConfig+0x312>
 8001808:	4b7b      	ldr	r3, [pc, #492]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	4a7a      	ldr	r2, [pc, #488]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6213      	str	r3, [r2, #32]
 8001814:	e02d      	b.n	8001872 <HAL_RCC_OscConfig+0x36e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10c      	bne.n	8001838 <HAL_RCC_OscConfig+0x334>
 800181e:	4b76      	ldr	r3, [pc, #472]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	4a75      	ldr	r2, [pc, #468]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 8001824:	f023 0301 	bic.w	r3, r3, #1
 8001828:	6213      	str	r3, [r2, #32]
 800182a:	4b73      	ldr	r3, [pc, #460]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	4a72      	ldr	r2, [pc, #456]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 8001830:	f023 0304 	bic.w	r3, r3, #4
 8001834:	6213      	str	r3, [r2, #32]
 8001836:	e01c      	b.n	8001872 <HAL_RCC_OscConfig+0x36e>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	2b05      	cmp	r3, #5
 800183e:	d10c      	bne.n	800185a <HAL_RCC_OscConfig+0x356>
 8001840:	4b6d      	ldr	r3, [pc, #436]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	4a6c      	ldr	r2, [pc, #432]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 8001846:	f043 0304 	orr.w	r3, r3, #4
 800184a:	6213      	str	r3, [r2, #32]
 800184c:	4b6a      	ldr	r3, [pc, #424]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	4a69      	ldr	r2, [pc, #420]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6213      	str	r3, [r2, #32]
 8001858:	e00b      	b.n	8001872 <HAL_RCC_OscConfig+0x36e>
 800185a:	4b67      	ldr	r3, [pc, #412]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	4a66      	ldr	r2, [pc, #408]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 8001860:	f023 0301 	bic.w	r3, r3, #1
 8001864:	6213      	str	r3, [r2, #32]
 8001866:	4b64      	ldr	r3, [pc, #400]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	4a63      	ldr	r2, [pc, #396]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 800186c:	f023 0304 	bic.w	r3, r3, #4
 8001870:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d015      	beq.n	80018a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187a:	f7ff f9e3 	bl	8000c44 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001880:	e00a      	b.n	8001898 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001882:	f7ff f9df 	bl	8000c44 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001890:	4293      	cmp	r3, r2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e0ab      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001898:	4b57      	ldr	r3, [pc, #348]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0ee      	beq.n	8001882 <HAL_RCC_OscConfig+0x37e>
 80018a4:	e014      	b.n	80018d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a6:	f7ff f9cd 	bl	8000c44 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ac:	e00a      	b.n	80018c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ae:	f7ff f9c9 	bl	8000c44 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018bc:	4293      	cmp	r3, r2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e095      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c4:	4b4c      	ldr	r3, [pc, #304]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1ee      	bne.n	80018ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018d0:	7dfb      	ldrb	r3, [r7, #23]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d105      	bne.n	80018e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d6:	4b48      	ldr	r3, [pc, #288]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	4a47      	ldr	r2, [pc, #284]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 80018dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 8081 	beq.w	80019ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ec:	4b42      	ldr	r3, [pc, #264]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 030c 	and.w	r3, r3, #12
 80018f4:	2b08      	cmp	r3, #8
 80018f6:	d061      	beq.n	80019bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d146      	bne.n	800198e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001900:	4b3f      	ldr	r3, [pc, #252]	; (8001a00 <HAL_RCC_OscConfig+0x4fc>)
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7ff f99d 	bl	8000c44 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190e:	f7ff f999 	bl	8000c44 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e067      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001920:	4b35      	ldr	r3, [pc, #212]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1f0      	bne.n	800190e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001934:	d108      	bne.n	8001948 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001936:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	492d      	ldr	r1, [pc, #180]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 8001944:	4313      	orrs	r3, r2
 8001946:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001948:	4b2b      	ldr	r3, [pc, #172]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a19      	ldr	r1, [r3, #32]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	430b      	orrs	r3, r1
 800195a:	4927      	ldr	r1, [pc, #156]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 800195c:	4313      	orrs	r3, r2
 800195e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001960:	4b27      	ldr	r3, [pc, #156]	; (8001a00 <HAL_RCC_OscConfig+0x4fc>)
 8001962:	2201      	movs	r2, #1
 8001964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001966:	f7ff f96d 	bl	8000c44 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196e:	f7ff f969 	bl	8000c44 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e037      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001980:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0f0      	beq.n	800196e <HAL_RCC_OscConfig+0x46a>
 800198c:	e02f      	b.n	80019ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198e:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <HAL_RCC_OscConfig+0x4fc>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7ff f956 	bl	8000c44 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff f952 	bl	8000c44 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e020      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ae:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x498>
 80019ba:	e018      	b.n	80019ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69db      	ldr	r3, [r3, #28]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d101      	bne.n	80019c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e013      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d106      	bne.n	80019ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d001      	beq.n	80019ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40007000 	.word	0x40007000
 8001a00:	42420060 	.word	0x42420060

08001a04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0d0      	b.n	8001bba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a18:	4b6a      	ldr	r3, [pc, #424]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d910      	bls.n	8001a48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a26:	4b67      	ldr	r3, [pc, #412]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 0207 	bic.w	r2, r3, #7
 8001a2e:	4965      	ldr	r1, [pc, #404]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a36:	4b63      	ldr	r3, [pc, #396]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d001      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e0b8      	b.n	8001bba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d020      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a60:	4b59      	ldr	r3, [pc, #356]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	4a58      	ldr	r2, [pc, #352]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a78:	4b53      	ldr	r3, [pc, #332]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	4a52      	ldr	r2, [pc, #328]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a84:	4b50      	ldr	r3, [pc, #320]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	494d      	ldr	r1, [pc, #308]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d040      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d107      	bne.n	8001aba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aaa:	4b47      	ldr	r3, [pc, #284]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d115      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e07f      	b.n	8001bba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d107      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac2:	4b41      	ldr	r3, [pc, #260]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d109      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e073      	b.n	8001bba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad2:	4b3d      	ldr	r3, [pc, #244]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e06b      	b.n	8001bba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ae2:	4b39      	ldr	r3, [pc, #228]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f023 0203 	bic.w	r2, r3, #3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	4936      	ldr	r1, [pc, #216]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001af4:	f7ff f8a6 	bl	8000c44 <HAL_GetTick>
 8001af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afa:	e00a      	b.n	8001b12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001afc:	f7ff f8a2 	bl	8000c44 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e053      	b.n	8001bba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b12:	4b2d      	ldr	r3, [pc, #180]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 020c 	and.w	r2, r3, #12
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d1eb      	bne.n	8001afc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b24:	4b27      	ldr	r3, [pc, #156]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d210      	bcs.n	8001b54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b32:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f023 0207 	bic.w	r2, r3, #7
 8001b3a:	4922      	ldr	r1, [pc, #136]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b42:	4b20      	ldr	r3, [pc, #128]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e032      	b.n	8001bba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d008      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b60:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	4916      	ldr	r1, [pc, #88]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d009      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	490e      	ldr	r1, [pc, #56]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b92:	f000 f821 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 8001b96:	4601      	mov	r1, r0
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <HAL_RCC_ClockConfig+0x1c8>)
 8001ba4:	5cd3      	ldrb	r3, [r2, r3]
 8001ba6:	fa21 f303 	lsr.w	r3, r1, r3
 8001baa:	4a09      	ldr	r2, [pc, #36]	; (8001bd0 <HAL_RCC_ClockConfig+0x1cc>)
 8001bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <HAL_RCC_ClockConfig+0x1d0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe ff0a 	bl	80009cc <HAL_InitTick>

  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40022000 	.word	0x40022000
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	08006364 	.word	0x08006364
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	20000004 	.word	0x20000004

08001bd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd8:	b490      	push	{r4, r7}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bde:	4b2a      	ldr	r3, [pc, #168]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001be0:	1d3c      	adds	r4, r7, #4
 8001be2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001be4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001be8:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61bb      	str	r3, [r7, #24]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c02:	4b23      	ldr	r3, [pc, #140]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	d002      	beq.n	8001c18 <HAL_RCC_GetSysClockFreq+0x40>
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d003      	beq.n	8001c1e <HAL_RCC_GetSysClockFreq+0x46>
 8001c16:	e02d      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c18:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c1a:	623b      	str	r3, [r7, #32]
      break;
 8001c1c:	e02d      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	0c9b      	lsrs	r3, r3, #18
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c2a:	4413      	add	r3, r2
 8001c2c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c30:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d013      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c3c:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	0c5b      	lsrs	r3, r3, #17
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c4a:	4413      	add	r3, r2
 8001c4c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c50:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	4a0f      	ldr	r2, [pc, #60]	; (8001c94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c56:	fb02 f203 	mul.w	r2, r2, r3
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
 8001c62:	e004      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	4a0c      	ldr	r2, [pc, #48]	; (8001c98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c68:	fb02 f303 	mul.w	r3, r2, r3
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	623b      	str	r3, [r7, #32]
      break;
 8001c72:	e002      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c74:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c76:	623b      	str	r3, [r7, #32]
      break;
 8001c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3728      	adds	r7, #40	; 0x28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc90      	pop	{r4, r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	080062e0 	.word	0x080062e0
 8001c8c:	080062f0 	.word	0x080062f0
 8001c90:	40021000 	.word	0x40021000
 8001c94:	007a1200 	.word	0x007a1200
 8001c98:	003d0900 	.word	0x003d0900

08001c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca0:	4b02      	ldr	r3, [pc, #8]	; (8001cac <HAL_RCC_GetHCLKFreq+0x10>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	20000000 	.word	0x20000000

08001cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cb4:	f7ff fff2 	bl	8001c9c <HAL_RCC_GetHCLKFreq>
 8001cb8:	4601      	mov	r1, r0
 8001cba:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	0a1b      	lsrs	r3, r3, #8
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	4a03      	ldr	r2, [pc, #12]	; (8001cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cc6:	5cd3      	ldrb	r3, [r2, r3]
 8001cc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	08006374 	.word	0x08006374

08001cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cdc:	f7ff ffde 	bl	8001c9c <HAL_RCC_GetHCLKFreq>
 8001ce0:	4601      	mov	r1, r0
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	0adb      	lsrs	r3, r3, #11
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	4a03      	ldr	r2, [pc, #12]	; (8001cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cee:	5cd3      	ldrb	r3, [r2, r3]
 8001cf0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	08006374 	.word	0x08006374

08001d00 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	220f      	movs	r2, #15
 8001d0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_RCC_GetClockConfig+0x58>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0203 	and.w	r2, r3, #3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <HAL_RCC_GetClockConfig+0x58>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_RCC_GetClockConfig+0x58>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d34:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <HAL_RCC_GetClockConfig+0x58>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	08db      	lsrs	r3, r3, #3
 8001d3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_RCC_GetClockConfig+0x5c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0207 	and.w	r2, r3, #7
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40022000 	.word	0x40022000

08001d60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d68:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <RCC_Delay+0x34>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <RCC_Delay+0x38>)
 8001d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d72:	0a5b      	lsrs	r3, r3, #9
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	fb02 f303 	mul.w	r3, r2, r3
 8001d7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d7c:	bf00      	nop
  }
  while (Delay --);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1e5a      	subs	r2, r3, #1
 8001d82:	60fa      	str	r2, [r7, #12]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1f9      	bne.n	8001d7c <RCC_Delay+0x1c>
}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20000000 	.word	0x20000000
 8001d98:	10624dd3 	.word	0x10624dd3

08001d9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d07d      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001db8:	2300      	movs	r3, #0
 8001dba:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dbc:	4b4f      	ldr	r3, [pc, #316]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10d      	bne.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc8:	4b4c      	ldr	r3, [pc, #304]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	4a4b      	ldr	r2, [pc, #300]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	61d3      	str	r3, [r2, #28]
 8001dd4:	4b49      	ldr	r3, [pc, #292]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001de0:	2301      	movs	r3, #1
 8001de2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de4:	4b46      	ldr	r3, [pc, #280]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d118      	bne.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001df0:	4b43      	ldr	r3, [pc, #268]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a42      	ldr	r2, [pc, #264]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dfc:	f7fe ff22 	bl	8000c44 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e02:	e008      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e04:	f7fe ff1e 	bl	8000c44 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b64      	cmp	r3, #100	; 0x64
 8001e10:	d901      	bls.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e06d      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e16:	4b3a      	ldr	r3, [pc, #232]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e22:	4b36      	ldr	r3, [pc, #216]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d02e      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d027      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e40:	4b2e      	ldr	r3, [pc, #184]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e4a:	4b2e      	ldr	r3, [pc, #184]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e50:	4b2c      	ldr	r3, [pc, #176]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e56:	4a29      	ldr	r2, [pc, #164]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d014      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7fe feed 	bl	8000c44 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6c:	e00a      	b.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6e:	f7fe fee9 	bl	8000c44 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e036      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e84:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0ee      	beq.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e90:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	4917      	ldr	r1, [pc, #92]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ea2:	7dfb      	ldrb	r3, [r7, #23]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d105      	bne.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea8:	4b14      	ldr	r3, [pc, #80]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	4a13      	ldr	r2, [pc, #76]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	490b      	ldr	r1, [pc, #44]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0310 	and.w	r3, r3, #16
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d008      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ede:	4b07      	ldr	r3, [pc, #28]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	4904      	ldr	r1, [pc, #16]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40007000 	.word	0x40007000
 8001f04:	42420440 	.word	0x42420440

08001f08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001f08:	b590      	push	{r4, r7, lr}
 8001f0a:	b08d      	sub	sp, #52	; 0x34
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f10:	4b55      	ldr	r3, [pc, #340]	; (8002068 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001f12:	f107 040c 	add.w	r4, r7, #12
 8001f16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f1c:	4b53      	ldr	r3, [pc, #332]	; (800206c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
 8001f26:	2300      	movs	r3, #0
 8001f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
 8001f32:	2300      	movs	r3, #0
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d07f      	beq.n	800203c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8001f3c:	2b10      	cmp	r3, #16
 8001f3e:	d002      	beq.n	8001f46 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d048      	beq.n	8001fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001f44:	e08b      	b.n	800205e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8001f46:	4b4a      	ldr	r3, [pc, #296]	; (8002070 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001f4c:	4b48      	ldr	r3, [pc, #288]	; (8002070 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d07f      	beq.n	8002058 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	0c9b      	lsrs	r3, r3, #18
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f64:	4413      	add	r3, r2
 8001f66:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f6a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d018      	beq.n	8001fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f76:	4b3e      	ldr	r3, [pc, #248]	; (8002070 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	0c5b      	lsrs	r3, r3, #17
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f84:	4413      	add	r3, r2
 8001f86:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00d      	beq.n	8001fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001f96:	4a37      	ldr	r2, [pc, #220]	; (8002074 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	fb02 f303 	mul.w	r3, r2, r3
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fa6:	e004      	b.n	8001fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fa8:	6a3b      	ldr	r3, [r7, #32]
 8001faa:	4a33      	ldr	r2, [pc, #204]	; (8002078 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001fac:	fb02 f303 	mul.w	r3, r2, r3
 8001fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001fb2:	4b2f      	ldr	r3, [pc, #188]	; (8002070 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fbe:	d102      	bne.n	8001fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8001fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001fc4:	e048      	b.n	8002058 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8001fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4a2c      	ldr	r2, [pc, #176]	; (800207c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd0:	085b      	lsrs	r3, r3, #1
 8001fd2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001fd4:	e040      	b.n	8002058 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8001fd6:	4b26      	ldr	r3, [pc, #152]	; (8002070 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fe6:	d108      	bne.n	8001ffa <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8001ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ff6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ff8:	e01f      	b.n	800203a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002004:	d109      	bne.n	800201a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8002006:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002012:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002016:	62bb      	str	r3, [r7, #40]	; 0x28
 8002018:	e00f      	b.n	800203a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002020:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002024:	d11a      	bne.n	800205c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002026:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d014      	beq.n	800205c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002032:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002038:	e010      	b.n	800205c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800203a:	e00f      	b.n	800205c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800203c:	f7ff fe4c 	bl	8001cd8 <HAL_RCC_GetPCLK2Freq>
 8002040:	4602      	mov	r2, r0
 8002042:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	0b9b      	lsrs	r3, r3, #14
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	3301      	adds	r3, #1
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	fbb2 f3f3 	udiv	r3, r2, r3
 8002054:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002056:	e002      	b.n	800205e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002058:	bf00      	nop
 800205a:	e000      	b.n	800205e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800205c:	bf00      	nop
    }
  }
  return (frequency);
 800205e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002060:	4618      	mov	r0, r3
 8002062:	3734      	adds	r7, #52	; 0x34
 8002064:	46bd      	mov	sp, r7
 8002066:	bd90      	pop	{r4, r7, pc}
 8002068:	080062f4 	.word	0x080062f4
 800206c:	08006304 	.word	0x08006304
 8002070:	40021000 	.word	0x40021000
 8002074:	007a1200 	.word	0x007a1200
 8002078:	003d0900 	.word	0x003d0900
 800207c:	aaaaaaab 	.word	0xaaaaaaab

08002080 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e084      	b.n	80021a0 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	7c5b      	ldrb	r3, [r3, #17]
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d105      	bne.n	80020ac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7fe fb94 	bl	80007d4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f87a 	bl	80021ac <HAL_RTC_WaitForSynchro>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d004      	beq.n	80020c8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2204      	movs	r2, #4
 80020c2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e06b      	b.n	80021a0 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f89c 	bl	8002206 <RTC_EnterInitMode>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d004      	beq.n	80020de <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2204      	movs	r2, #4
 80020d8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e060      	b.n	80021a0 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0207 	bic.w	r2, r2, #7
 80020ec:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d005      	beq.n	8002102 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80020f6:	4b2c      	ldr	r3, [pc, #176]	; (80021a8 <HAL_RTC_Init+0x128>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a2b      	ldr	r2, [pc, #172]	; (80021a8 <HAL_RTC_Init+0x128>)
 80020fc:	f023 0301 	bic.w	r3, r3, #1
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002102:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <HAL_RTC_Init+0x128>)
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	4926      	ldr	r1, [pc, #152]	; (80021a8 <HAL_RTC_Init+0x128>)
 8002110:	4313      	orrs	r3, r2
 8002112:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211c:	d003      	beq.n	8002126 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	e00e      	b.n	8002144 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002126:	2001      	movs	r0, #1
 8002128:	f7ff feee 	bl	8001f08 <HAL_RCCEx_GetPeriphCLKFreq>
 800212c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d104      	bne.n	800213e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2204      	movs	r2, #4
 8002138:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e030      	b.n	80021a0 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	3b01      	subs	r3, #1
 8002142:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f023 010f 	bic.w	r1, r3, #15
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	0c1a      	lsrs	r2, r3, #16
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	0c1b      	lsrs	r3, r3, #16
 8002162:	041b      	lsls	r3, r3, #16
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	b291      	uxth	r1, r2
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	430b      	orrs	r3, r1
 800216e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f870 	bl	8002256 <RTC_ExitInitMode>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d004      	beq.n	8002186 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2204      	movs	r2, #4
 8002180:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e00c      	b.n	80021a0 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800219e:	2300      	movs	r3, #0
  }
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40006c00 	.word	0x40006c00

080021ac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e01d      	b.n	80021fe <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0208 	bic.w	r2, r2, #8
 80021d0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80021d2:	f7fe fd37 	bl	8000c44 <HAL_GetTick>
 80021d6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80021d8:	e009      	b.n	80021ee <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80021da:	f7fe fd33 	bl	8000c44 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021e8:	d901      	bls.n	80021ee <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e007      	b.n	80021fe <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0ee      	beq.n	80021da <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002212:	f7fe fd17 	bl	8000c44 <HAL_GetTick>
 8002216:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002218:	e009      	b.n	800222e <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800221a:	f7fe fd13 	bl	8000c44 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002228:	d901      	bls.n	800222e <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e00f      	b.n	800224e <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0320 	and.w	r3, r3, #32
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0ee      	beq.n	800221a <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0210 	orr.w	r2, r2, #16
 800224a:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b084      	sub	sp, #16
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0210 	bic.w	r2, r2, #16
 8002270:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002272:	f7fe fce7 	bl	8000c44 <HAL_GetTick>
 8002276:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002278:	e009      	b.n	800228e <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800227a:	f7fe fce3 	bl	8000c44 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002288:	d901      	bls.n	800228e <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e007      	b.n	800229e <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0320 	and.w	r3, r3, #32
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0ee      	beq.n	800227a <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e053      	b.n	8002360 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d106      	bne.n	80022d8 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7fe faa2 	bl	800081c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2202      	movs	r2, #2
 80022dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	431a      	orrs	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	431a      	orrs	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002314:	431a      	orrs	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	ea42 0103 	orr.w	r1, r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	0c1a      	lsrs	r2, r3, #16
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f002 0204 	and.w	r2, r2, #4
 800233e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	69da      	ldr	r2, [r3, #28]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800234e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	099b      	lsrs	r3, r3, #6
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10f      	bne.n	80023ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00a      	beq.n	80023ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	099b      	lsrs	r3, r3, #6
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d004      	beq.n	80023ac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	4798      	blx	r3
    return;
 80023aa:	e0bf      	b.n	800252c <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	085b      	lsrs	r3, r3, #1
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00a      	beq.n	80023ce <HAL_SPI_IRQHandler+0x66>
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	09db      	lsrs	r3, r3, #7
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d004      	beq.n	80023ce <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	4798      	blx	r3
    return;
 80023cc:	e0ae      	b.n	800252c <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	095b      	lsrs	r3, r3, #5
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d106      	bne.n	80023e8 <HAL_SPI_IRQHandler+0x80>
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	099b      	lsrs	r3, r3, #6
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 80a2 	beq.w	800252c <HAL_SPI_IRQHandler+0x1c4>
       && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 809b 	beq.w	800252c <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	099b      	lsrs	r3, r3, #6
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d023      	beq.n	800244a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b03      	cmp	r3, #3
 800240c:	d011      	beq.n	8002432 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002412:	f043 0204 	orr.w	r2, r3, #4
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	e00b      	b.n	800244a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	693b      	ldr	r3, [r7, #16]
        return;
 8002448:	e070      	b.n	800252c <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	095b      	lsrs	r3, r3, #5
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d014      	beq.n	8002480 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245a:	f043 0201 	orr.w	r2, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002484:	2b00      	cmp	r3, #0
 8002486:	d050      	beq.n	800252a <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002496:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d104      	bne.n	80024b4 <HAL_SPI_IRQHandler+0x14c>
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d034      	beq.n	800251e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0203 	bic.w	r2, r2, #3
 80024c2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d011      	beq.n	80024f0 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d0:	4a18      	ldr	r2, [pc, #96]	; (8002534 <HAL_SPI_IRQHandler+0x1cc>)
 80024d2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe fcf7 	bl	8000ecc <HAL_DMA_Abort_IT>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d016      	beq.n	8002526 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024fc:	4a0d      	ldr	r2, [pc, #52]	; (8002534 <HAL_SPI_IRQHandler+0x1cc>)
 80024fe:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe fce1 	bl	8000ecc <HAL_DMA_Abort_IT>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00a      	beq.n	8002526 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002514:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800251c:	e003      	b.n	8002526 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f80a 	bl	8002538 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002524:	e000      	b.n	8002528 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8002526:	bf00      	nop
    return;
 8002528:	bf00      	nop
 800252a:	bf00      	nop
  }
}
 800252c:	3720      	adds	r7, #32
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	0800254b 	.word	0x0800254b

08002538 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr

0800254a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b084      	sub	sp, #16
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f7ff ffe7 	bl	8002538 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e01d      	b.n	80025c0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d106      	bne.n	800259e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7fe f9e9 	bl	8000970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2202      	movs	r2, #2
 80025a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3304      	adds	r3, #4
 80025ae:	4619      	mov	r1, r3
 80025b0:	4610      	mov	r0, r2
 80025b2:	f000 fa0f 	bl	80029d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2b06      	cmp	r3, #6
 80025f0:	d007      	beq.n	8002602 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 0201 	orr.w	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr

0800260e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b082      	sub	sp, #8
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b02      	cmp	r3, #2
 8002622:	d122      	bne.n	800266a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b02      	cmp	r3, #2
 8002630:	d11b      	bne.n	800266a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f06f 0202 	mvn.w	r2, #2
 800263a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f9a4 	bl	800299e <HAL_TIM_IC_CaptureCallback>
 8002656:	e005      	b.n	8002664 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f997 	bl	800298c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f9a6 	bl	80029b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b04      	cmp	r3, #4
 8002676:	d122      	bne.n	80026be <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b04      	cmp	r3, #4
 8002684:	d11b      	bne.n	80026be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f06f 0204 	mvn.w	r2, #4
 800268e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f97a 	bl	800299e <HAL_TIM_IC_CaptureCallback>
 80026aa:	e005      	b.n	80026b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f96d 	bl	800298c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f97c 	bl	80029b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d122      	bne.n	8002712 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d11b      	bne.n	8002712 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f06f 0208 	mvn.w	r2, #8
 80026e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2204      	movs	r2, #4
 80026e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f950 	bl	800299e <HAL_TIM_IC_CaptureCallback>
 80026fe:	e005      	b.n	800270c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f943 	bl	800298c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f952 	bl	80029b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	2b10      	cmp	r3, #16
 800271e:	d122      	bne.n	8002766 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b10      	cmp	r3, #16
 800272c:	d11b      	bne.n	8002766 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f06f 0210 	mvn.w	r2, #16
 8002736:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2208      	movs	r2, #8
 800273c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f926 	bl	800299e <HAL_TIM_IC_CaptureCallback>
 8002752:	e005      	b.n	8002760 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f919 	bl	800298c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f928 	bl	80029b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b01      	cmp	r3, #1
 8002772:	d10e      	bne.n	8002792 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b01      	cmp	r3, #1
 8002780:	d107      	bne.n	8002792 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f06f 0201 	mvn.w	r2, #1
 800278a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7fd ffc9 	bl	8000724 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279c:	2b80      	cmp	r3, #128	; 0x80
 800279e:	d10e      	bne.n	80027be <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027aa:	2b80      	cmp	r3, #128	; 0x80
 80027ac:	d107      	bne.n	80027be <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 fa50 	bl	8002c5e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c8:	2b40      	cmp	r3, #64	; 0x40
 80027ca:	d10e      	bne.n	80027ea <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d6:	2b40      	cmp	r3, #64	; 0x40
 80027d8:	d107      	bne.n	80027ea <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f8ec 	bl	80029c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	f003 0320 	and.w	r3, r3, #32
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	d10e      	bne.n	8002816 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b20      	cmp	r3, #32
 8002804:	d107      	bne.n	8002816 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f06f 0220 	mvn.w	r2, #32
 800280e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 fa1b 	bl	8002c4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_TIM_ConfigClockSource+0x18>
 8002832:	2302      	movs	r3, #2
 8002834:	e0a6      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x166>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2202      	movs	r2, #2
 8002842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002854:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800285c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b40      	cmp	r3, #64	; 0x40
 800286c:	d067      	beq.n	800293e <HAL_TIM_ConfigClockSource+0x120>
 800286e:	2b40      	cmp	r3, #64	; 0x40
 8002870:	d80b      	bhi.n	800288a <HAL_TIM_ConfigClockSource+0x6c>
 8002872:	2b10      	cmp	r3, #16
 8002874:	d073      	beq.n	800295e <HAL_TIM_ConfigClockSource+0x140>
 8002876:	2b10      	cmp	r3, #16
 8002878:	d802      	bhi.n	8002880 <HAL_TIM_ConfigClockSource+0x62>
 800287a:	2b00      	cmp	r3, #0
 800287c:	d06f      	beq.n	800295e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800287e:	e078      	b.n	8002972 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002880:	2b20      	cmp	r3, #32
 8002882:	d06c      	beq.n	800295e <HAL_TIM_ConfigClockSource+0x140>
 8002884:	2b30      	cmp	r3, #48	; 0x30
 8002886:	d06a      	beq.n	800295e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002888:	e073      	b.n	8002972 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800288a:	2b70      	cmp	r3, #112	; 0x70
 800288c:	d00d      	beq.n	80028aa <HAL_TIM_ConfigClockSource+0x8c>
 800288e:	2b70      	cmp	r3, #112	; 0x70
 8002890:	d804      	bhi.n	800289c <HAL_TIM_ConfigClockSource+0x7e>
 8002892:	2b50      	cmp	r3, #80	; 0x50
 8002894:	d033      	beq.n	80028fe <HAL_TIM_ConfigClockSource+0xe0>
 8002896:	2b60      	cmp	r3, #96	; 0x60
 8002898:	d041      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x100>
      break;
 800289a:	e06a      	b.n	8002972 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800289c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a0:	d066      	beq.n	8002970 <HAL_TIM_ConfigClockSource+0x152>
 80028a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028a6:	d017      	beq.n	80028d8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80028a8:	e063      	b.n	8002972 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	6899      	ldr	r1, [r3, #8]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f000 f964 	bl	8002b86 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	609a      	str	r2, [r3, #8]
      break;
 80028d6:	e04c      	b.n	8002972 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	6899      	ldr	r1, [r3, #8]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	f000 f94d 	bl	8002b86 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028fa:	609a      	str	r2, [r3, #8]
      break;
 80028fc:	e039      	b.n	8002972 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6818      	ldr	r0, [r3, #0]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	6859      	ldr	r1, [r3, #4]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	461a      	mov	r2, r3
 800290c:	f000 f8c4 	bl	8002a98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2150      	movs	r1, #80	; 0x50
 8002916:	4618      	mov	r0, r3
 8002918:	f000 f91b 	bl	8002b52 <TIM_ITRx_SetConfig>
      break;
 800291c:	e029      	b.n	8002972 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6859      	ldr	r1, [r3, #4]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	461a      	mov	r2, r3
 800292c:	f000 f8e2 	bl	8002af4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2160      	movs	r1, #96	; 0x60
 8002936:	4618      	mov	r0, r3
 8002938:	f000 f90b 	bl	8002b52 <TIM_ITRx_SetConfig>
      break;
 800293c:	e019      	b.n	8002972 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6859      	ldr	r1, [r3, #4]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	461a      	mov	r2, r3
 800294c:	f000 f8a4 	bl	8002a98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2140      	movs	r1, #64	; 0x40
 8002956:	4618      	mov	r0, r3
 8002958:	f000 f8fb 	bl	8002b52 <TIM_ITRx_SetConfig>
      break;
 800295c:	e009      	b.n	8002972 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4619      	mov	r1, r3
 8002968:	4610      	mov	r0, r2
 800296a:	f000 f8f2 	bl	8002b52 <TIM_ITRx_SetConfig>
      break;
 800296e:	e000      	b.n	8002972 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002970:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr

0800299e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr

080029b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a29      	ldr	r2, [pc, #164]	; (8002a8c <TIM_Base_SetConfig+0xb8>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d00b      	beq.n	8002a04 <TIM_Base_SetConfig+0x30>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f2:	d007      	beq.n	8002a04 <TIM_Base_SetConfig+0x30>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a26      	ldr	r2, [pc, #152]	; (8002a90 <TIM_Base_SetConfig+0xbc>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d003      	beq.n	8002a04 <TIM_Base_SetConfig+0x30>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a25      	ldr	r2, [pc, #148]	; (8002a94 <TIM_Base_SetConfig+0xc0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d108      	bne.n	8002a16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a1c      	ldr	r2, [pc, #112]	; (8002a8c <TIM_Base_SetConfig+0xb8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00b      	beq.n	8002a36 <TIM_Base_SetConfig+0x62>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a24:	d007      	beq.n	8002a36 <TIM_Base_SetConfig+0x62>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a19      	ldr	r2, [pc, #100]	; (8002a90 <TIM_Base_SetConfig+0xbc>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d003      	beq.n	8002a36 <TIM_Base_SetConfig+0x62>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a18      	ldr	r2, [pc, #96]	; (8002a94 <TIM_Base_SetConfig+0xc0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d108      	bne.n	8002a48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a07      	ldr	r2, [pc, #28]	; (8002a8c <TIM_Base_SetConfig+0xb8>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d103      	bne.n	8002a7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	615a      	str	r2, [r3, #20]
}
 8002a82:	bf00      	nop
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	40012c00 	.word	0x40012c00
 8002a90:	40000400 	.word	0x40000400
 8002a94:	40000800 	.word	0x40000800

08002a98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	f023 0201 	bic.w	r2, r3, #1
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ac2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f023 030a 	bic.w	r3, r3, #10
 8002ad4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	621a      	str	r2, [r3, #32]
}
 8002aea:	bf00      	nop
 8002aec:	371c      	adds	r7, #28
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr

08002af4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b087      	sub	sp, #28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	f023 0210 	bic.w	r2, r3, #16
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	031b      	lsls	r3, r3, #12
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	621a      	str	r2, [r3, #32]
}
 8002b48:	bf00      	nop
 8002b4a:	371c      	adds	r7, #28
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr

08002b52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b085      	sub	sp, #20
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f043 0307 	orr.w	r3, r3, #7
 8002b74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	609a      	str	r2, [r3, #8]
}
 8002b7c:	bf00      	nop
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b087      	sub	sp, #28
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	60f8      	str	r0, [r7, #12]
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	607a      	str	r2, [r7, #4]
 8002b92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ba0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	021a      	lsls	r2, r3, #8
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	609a      	str	r2, [r3, #8]
}
 8002bba:	bf00      	nop
 8002bbc:	371c      	adds	r7, #28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e032      	b.n	8002c42 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c14:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr

08002c5e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr

08002c70 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c76:	f3ef 8305 	mrs	r3, IPSR
 8002c7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c7c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10f      	bne.n	8002ca2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c82:	f3ef 8310 	mrs	r3, PRIMASK
 8002c86:	607b      	str	r3, [r7, #4]
  return(result);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <osKernelInitialize+0x32>
 8002c8e:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <osKernelInitialize+0x60>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d109      	bne.n	8002caa <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002c96:	f3ef 8311 	mrs	r3, BASEPRI
 8002c9a:	603b      	str	r3, [r7, #0]
  return(result);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002ca2:	f06f 0305 	mvn.w	r3, #5
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	e00c      	b.n	8002cc4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002caa:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <osKernelInitialize+0x60>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d105      	bne.n	8002cbe <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002cb2:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <osKernelInitialize+0x60>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	e002      	b.n	8002cc4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr
 8002cd0:	20000044 	.word	0x20000044

08002cd4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cda:	f3ef 8305 	mrs	r3, IPSR
 8002cde:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ce0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10f      	bne.n	8002d06 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8002cea:	607b      	str	r3, [r7, #4]
  return(result);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d109      	bne.n	8002d06 <osKernelStart+0x32>
 8002cf2:	4b11      	ldr	r3, [pc, #68]	; (8002d38 <osKernelStart+0x64>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d109      	bne.n	8002d0e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002cfa:	f3ef 8311 	mrs	r3, BASEPRI
 8002cfe:	603b      	str	r3, [r7, #0]
  return(result);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <osKernelStart+0x3a>
    stat = osErrorISR;
 8002d06:	f06f 0305 	mvn.w	r3, #5
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	e00e      	b.n	8002d2c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002d0e:	4b0a      	ldr	r3, [pc, #40]	; (8002d38 <osKernelStart+0x64>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d107      	bne.n	8002d26 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002d16:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <osKernelStart+0x64>)
 8002d18:	2202      	movs	r2, #2
 8002d1a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002d1c:	f001 fd90 	bl	8004840 <vTaskStartScheduler>
      stat = osOK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	e002      	b.n	8002d2c <osKernelStart+0x58>
    } else {
      stat = osError;
 8002d26:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20000044 	.word	0x20000044

08002d3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b092      	sub	sp, #72	; 0x48
 8002d40:	af04      	add	r7, sp, #16
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d4c:	f3ef 8305 	mrs	r3, IPSR
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f040 8094 	bne.w	8002e82 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d5e:	623b      	str	r3, [r7, #32]
  return(result);
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f040 808d 	bne.w	8002e82 <osThreadNew+0x146>
 8002d68:	4b48      	ldr	r3, [pc, #288]	; (8002e8c <osThreadNew+0x150>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d106      	bne.n	8002d7e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002d70:	f3ef 8311 	mrs	r3, BASEPRI
 8002d74:	61fb      	str	r3, [r7, #28]
  return(result);
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f040 8082 	bne.w	8002e82 <osThreadNew+0x146>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d07e      	beq.n	8002e82 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002d88:	2318      	movs	r3, #24
 8002d8a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002d90:	f107 031b 	add.w	r3, r7, #27
 8002d94:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002d96:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d045      	beq.n	8002e2e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d002      	beq.n	8002db0 <osThreadNew+0x74>
        name = attr->name;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <osThreadNew+0x9a>
 8002dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc6:	2b38      	cmp	r3, #56	; 0x38
 8002dc8:	d805      	bhi.n	8002dd6 <osThreadNew+0x9a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <osThreadNew+0x9e>
        return (NULL);
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e054      	b.n	8002e84 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	089b      	lsrs	r3, r3, #2
 8002de8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00e      	beq.n	8002e10 <osThreadNew+0xd4>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	2b5f      	cmp	r3, #95	; 0x5f
 8002df8:	d90a      	bls.n	8002e10 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d006      	beq.n	8002e10 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <osThreadNew+0xd4>
        mem = 1;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e0e:	e010      	b.n	8002e32 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10c      	bne.n	8002e32 <osThreadNew+0xf6>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d108      	bne.n	8002e32 <osThreadNew+0xf6>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d104      	bne.n	8002e32 <osThreadNew+0xf6>
          mem = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e2c:	e001      	b.n	8002e32 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d110      	bne.n	8002e5a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002e40:	9202      	str	r2, [sp, #8]
 8002e42:	9301      	str	r3, [sp, #4]
 8002e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f001 fb2a 	bl	80044a8 <xTaskCreateStatic>
 8002e54:	4603      	mov	r3, r0
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	e013      	b.n	8002e82 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d110      	bne.n	8002e82 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	f107 0314 	add.w	r3, r7, #20
 8002e68:	9301      	str	r3, [sp, #4]
 8002e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f001 fb71 	bl	800455a <xTaskCreate>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d001      	beq.n	8002e82 <osThreadNew+0x146>
          hTask = NULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002e82:	697b      	ldr	r3, [r7, #20]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3738      	adds	r7, #56	; 0x38
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	20000044 	.word	0x20000044

08002e90 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e98:	f3ef 8305 	mrs	r3, IPSR
 8002e9c:	613b      	str	r3, [r7, #16]
  return(result);
 8002e9e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10f      	bne.n	8002ec4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ea8:	60fb      	str	r3, [r7, #12]
  return(result);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d109      	bne.n	8002ec4 <osDelay+0x34>
 8002eb0:	4b0d      	ldr	r3, [pc, #52]	; (8002ee8 <osDelay+0x58>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d109      	bne.n	8002ecc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002eb8:	f3ef 8311 	mrs	r3, BASEPRI
 8002ebc:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <osDelay+0x3c>
    stat = osErrorISR;
 8002ec4:	f06f 0305 	mvn.w	r3, #5
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	e007      	b.n	8002edc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <osDelay+0x4c>
      vTaskDelay(ticks);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f001 fc7e 	bl	80047d8 <vTaskDelay>
    }
  }

  return (stat);
 8002edc:	697b      	ldr	r3, [r7, #20]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000044 	.word	0x20000044

08002eec <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08c      	sub	sp, #48	; 0x30
 8002ef0:	af02      	add	r7, sp, #8
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002efc:	f3ef 8305 	mrs	r3, IPSR
 8002f00:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f02:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f040 8088 	bne.w	800301a <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f0e:	617b      	str	r3, [r7, #20]
  return(result);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f040 8081 	bne.w	800301a <osSemaphoreNew+0x12e>
 8002f18:	4b42      	ldr	r3, [pc, #264]	; (8003024 <osSemaphoreNew+0x138>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d105      	bne.n	8002f2c <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f20:	f3ef 8311 	mrs	r3, BASEPRI
 8002f24:	613b      	str	r3, [r7, #16]
  return(result);
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d176      	bne.n	800301a <osSemaphoreNew+0x12e>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d073      	beq.n	800301a <osSemaphoreNew+0x12e>
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d86f      	bhi.n	800301a <osSemaphoreNew+0x12e>
    mem = -1;
 8002f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3e:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d015      	beq.n	8002f72 <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d006      	beq.n	8002f5c <osSemaphoreNew+0x70>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	2b4f      	cmp	r3, #79	; 0x4f
 8002f54:	d902      	bls.n	8002f5c <osSemaphoreNew+0x70>
        mem = 1;
 8002f56:	2301      	movs	r3, #1
 8002f58:	623b      	str	r3, [r7, #32]
 8002f5a:	e00c      	b.n	8002f76 <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d108      	bne.n	8002f76 <osSemaphoreNew+0x8a>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d104      	bne.n	8002f76 <osSemaphoreNew+0x8a>
          mem = 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	623b      	str	r3, [r7, #32]
 8002f70:	e001      	b.n	8002f76 <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7c:	d04d      	beq.n	800301a <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d129      	bne.n	8002fd8 <osSemaphoreNew+0xec>
        if (mem == 1) {
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d10b      	bne.n	8002fa2 <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	2303      	movs	r3, #3
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	4613      	mov	r3, r2
 8002f94:	2200      	movs	r2, #0
 8002f96:	2100      	movs	r1, #0
 8002f98:	2001      	movs	r0, #1
 8002f9a:	f000 fa4d 	bl	8003438 <xQueueGenericCreateStatic>
 8002f9e:	6278      	str	r0, [r7, #36]	; 0x24
 8002fa0:	e005      	b.n	8002fae <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	f000 fab8 	bl	800351c <xQueueGenericCreate>
 8002fac:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d022      	beq.n	8002ffa <osSemaphoreNew+0x10e>
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d01f      	beq.n	8002ffa <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002fba:	2300      	movs	r3, #0
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fc2:	f000 fb71 	bl	80036a8 <xQueueGenericSend>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d016      	beq.n	8002ffa <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 8002fcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fce:	f000 ffe4 	bl	8003f9a <vQueueDelete>
            hSemaphore = NULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd6:	e010      	b.n	8002ffa <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d108      	bne.n	8002ff0 <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 faf8 	bl	80035dc <xQueueCreateCountingSemaphoreStatic>
 8002fec:	6278      	str	r0, [r7, #36]	; 0x24
 8002fee:	e004      	b.n	8002ffa <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002ff0:	68b9      	ldr	r1, [r7, #8]
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 fb27 	bl	8003646 <xQueueCreateCountingSemaphore>
 8002ff8:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00c      	beq.n	800301a <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <osSemaphoreNew+0x122>
          name = attr->name;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	61fb      	str	r3, [r7, #28]
 800300c:	e001      	b.n	8003012 <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 800300e:	2300      	movs	r3, #0
 8003010:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003012:	69f9      	ldr	r1, [r7, #28]
 8003014:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003016:	f001 f909 	bl	800422c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800301c:	4618      	mov	r0, r3
 800301e:	3728      	adds	r7, #40	; 0x28
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	20000044 	.word	0x20000044

08003028 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d103      	bne.n	8003048 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003040:	f06f 0303 	mvn.w	r3, #3
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	e04b      	b.n	80030e0 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003048:	f3ef 8305 	mrs	r3, IPSR
 800304c:	617b      	str	r3, [r7, #20]
  return(result);
 800304e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10f      	bne.n	8003074 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003054:	f3ef 8310 	mrs	r3, PRIMASK
 8003058:	613b      	str	r3, [r7, #16]
  return(result);
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d109      	bne.n	8003074 <osSemaphoreAcquire+0x4c>
 8003060:	4b22      	ldr	r3, [pc, #136]	; (80030ec <osSemaphoreAcquire+0xc4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b02      	cmp	r3, #2
 8003066:	d128      	bne.n	80030ba <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003068:	f3ef 8311 	mrs	r3, BASEPRI
 800306c:	60fb      	str	r3, [r7, #12]
  return(result);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d022      	beq.n	80030ba <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800307a:	f06f 0303 	mvn.w	r3, #3
 800307e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8003080:	e02d      	b.n	80030de <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8003082:	2300      	movs	r3, #0
 8003084:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003086:	f107 0308 	add.w	r3, r7, #8
 800308a:	461a      	mov	r2, r3
 800308c:	2100      	movs	r1, #0
 800308e:	69b8      	ldr	r0, [r7, #24]
 8003090:	f000 ff06 	bl	8003ea0 <xQueueReceiveFromISR>
 8003094:	4603      	mov	r3, r0
 8003096:	2b01      	cmp	r3, #1
 8003098:	d003      	beq.n	80030a2 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800309a:	f06f 0302 	mvn.w	r3, #2
 800309e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80030a0:	e01d      	b.n	80030de <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d01a      	beq.n	80030de <osSemaphoreAcquire+0xb6>
 80030a8:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <osSemaphoreAcquire+0xc8>)
 80030aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	f3bf 8f4f 	dsb	sy
 80030b4:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80030b8:	e011      	b.n	80030de <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80030ba:	6839      	ldr	r1, [r7, #0]
 80030bc:	69b8      	ldr	r0, [r7, #24]
 80030be:	f000 fde7 	bl	8003c90 <xQueueSemaphoreTake>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d00b      	beq.n	80030e0 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80030ce:	f06f 0301 	mvn.w	r3, #1
 80030d2:	61fb      	str	r3, [r7, #28]
 80030d4:	e004      	b.n	80030e0 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80030d6:	f06f 0302 	mvn.w	r3, #2
 80030da:	61fb      	str	r3, [r7, #28]
 80030dc:	e000      	b.n	80030e0 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80030de:	bf00      	nop
      }
    }
  }

  return (stat);
 80030e0:	69fb      	ldr	r3, [r7, #28]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3720      	adds	r7, #32
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000044 	.word	0x20000044
 80030f0:	e000ed04 	.word	0xe000ed04

080030f4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003100:	2300      	movs	r3, #0
 8003102:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d103      	bne.n	8003112 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800310a:	f06f 0303 	mvn.w	r3, #3
 800310e:	61fb      	str	r3, [r7, #28]
 8003110:	e03e      	b.n	8003190 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003112:	f3ef 8305 	mrs	r3, IPSR
 8003116:	617b      	str	r3, [r7, #20]
  return(result);
 8003118:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10f      	bne.n	800313e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800311e:	f3ef 8310 	mrs	r3, PRIMASK
 8003122:	613b      	str	r3, [r7, #16]
  return(result);
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d109      	bne.n	800313e <osSemaphoreRelease+0x4a>
 800312a:	4b1c      	ldr	r3, [pc, #112]	; (800319c <osSemaphoreRelease+0xa8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d120      	bne.n	8003174 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003132:	f3ef 8311 	mrs	r3, BASEPRI
 8003136:	60fb      	str	r3, [r7, #12]
  return(result);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d01a      	beq.n	8003174 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800313e:	2300      	movs	r3, #0
 8003140:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003142:	f107 0308 	add.w	r3, r7, #8
 8003146:	4619      	mov	r1, r3
 8003148:	69b8      	ldr	r0, [r7, #24]
 800314a:	f000 fc3b 	bl	80039c4 <xQueueGiveFromISR>
 800314e:	4603      	mov	r3, r0
 8003150:	2b01      	cmp	r3, #1
 8003152:	d003      	beq.n	800315c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8003154:	f06f 0302 	mvn.w	r3, #2
 8003158:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800315a:	e018      	b.n	800318e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d015      	beq.n	800318e <osSemaphoreRelease+0x9a>
 8003162:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <osSemaphoreRelease+0xac>)
 8003164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	f3bf 8f4f 	dsb	sy
 800316e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003172:	e00c      	b.n	800318e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003174:	2300      	movs	r3, #0
 8003176:	2200      	movs	r2, #0
 8003178:	2100      	movs	r1, #0
 800317a:	69b8      	ldr	r0, [r7, #24]
 800317c:	f000 fa94 	bl	80036a8 <xQueueGenericSend>
 8003180:	4603      	mov	r3, r0
 8003182:	2b01      	cmp	r3, #1
 8003184:	d004      	beq.n	8003190 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8003186:	f06f 0302 	mvn.w	r3, #2
 800318a:	61fb      	str	r3, [r7, #28]
 800318c:	e000      	b.n	8003190 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800318e:	bf00      	nop
    }
  }

  return (stat);
 8003190:	69fb      	ldr	r3, [r7, #28]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3720      	adds	r7, #32
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000044 	.word	0x20000044
 80031a0:	e000ed04 	.word	0xe000ed04

080031a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4a06      	ldr	r2, [pc, #24]	; (80031cc <vApplicationGetIdleTaskMemory+0x28>)
 80031b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	4a05      	ldr	r2, [pc, #20]	; (80031d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80031ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2280      	movs	r2, #128	; 0x80
 80031c0:	601a      	str	r2, [r3, #0]
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr
 80031cc:	20000048 	.word	0x20000048
 80031d0:	200000a8 	.word	0x200000a8

080031d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4a07      	ldr	r2, [pc, #28]	; (8003200 <vApplicationGetTimerTaskMemory+0x2c>)
 80031e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	4a06      	ldr	r2, [pc, #24]	; (8003204 <vApplicationGetTimerTaskMemory+0x30>)
 80031ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031f2:	601a      	str	r2, [r3, #0]
}
 80031f4:	bf00      	nop
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	200002a8 	.word	0x200002a8
 8003204:	20000308 	.word	0x20000308

08003208 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f103 0208 	add.w	r2, r3, #8
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f04f 32ff 	mov.w	r2, #4294967295
 8003220:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f103 0208 	add.w	r2, r3, #8
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f103 0208 	add.w	r2, r3, #8
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr

08003246 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr

0800325e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800325e:	b480      	push	{r7}
 8003260:	b085      	sub	sp, #20
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
 8003266:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	601a      	str	r2, [r3, #0]
}
 800329a:	bf00      	nop
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr

080032a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ba:	d103      	bne.n	80032c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	e00c      	b.n	80032de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3308      	adds	r3, #8
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	e002      	b.n	80032d2 <vListInsert+0x2e>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d2f6      	bcs.n	80032cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	601a      	str	r2, [r3, #0]
}
 800330a:	bf00      	nop
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr

08003314 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6892      	ldr	r2, [r2, #8]
 800332a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6852      	ldr	r2, [r2, #4]
 8003334:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	429a      	cmp	r2, r3
 800333e:	d103      	bne.n	8003348 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	1e5a      	subs	r2, r3, #1
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr
	...

08003368 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d109      	bne.n	8003390 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800337c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003380:	f383 8811 	msr	BASEPRI, r3
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	e7fe      	b.n	800338e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003390:	f002 fc8a 	bl	8005ca8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339c:	68f9      	ldr	r1, [r7, #12]
 800339e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033a0:	fb01 f303 	mul.w	r3, r1, r3
 80033a4:	441a      	add	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c0:	3b01      	subs	r3, #1
 80033c2:	68f9      	ldr	r1, [r7, #12]
 80033c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033c6:	fb01 f303 	mul.w	r3, r1, r3
 80033ca:	441a      	add	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	22ff      	movs	r2, #255	; 0xff
 80033d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	22ff      	movs	r2, #255	; 0xff
 80033dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d114      	bne.n	8003410 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d01a      	beq.n	8003424 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	3310      	adds	r3, #16
 80033f2:	4618      	mov	r0, r3
 80033f4:	f001 fcc6 	bl	8004d84 <xTaskRemoveFromEventList>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d012      	beq.n	8003424 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80033fe:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <xQueueGenericReset+0xcc>)
 8003400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	f3bf 8f4f 	dsb	sy
 800340a:	f3bf 8f6f 	isb	sy
 800340e:	e009      	b.n	8003424 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	3310      	adds	r3, #16
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff fef7 	bl	8003208 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	3324      	adds	r3, #36	; 0x24
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff fef2 	bl	8003208 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003424:	f002 fc6e 	bl	8005d04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003428:	2301      	movs	r3, #1
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	e000ed04 	.word	0xe000ed04

08003438 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08e      	sub	sp, #56	; 0x38
 800343c:	af02      	add	r7, sp, #8
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
 8003444:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d109      	bne.n	8003460 <xQueueGenericCreateStatic+0x28>
 800344c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003450:	f383 8811 	msr	BASEPRI, r3
 8003454:	f3bf 8f6f 	isb	sy
 8003458:	f3bf 8f4f 	dsb	sy
 800345c:	62bb      	str	r3, [r7, #40]	; 0x28
 800345e:	e7fe      	b.n	800345e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <xQueueGenericCreateStatic+0x42>
 8003466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346a:	f383 8811 	msr	BASEPRI, r3
 800346e:	f3bf 8f6f 	isb	sy
 8003472:	f3bf 8f4f 	dsb	sy
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
 8003478:	e7fe      	b.n	8003478 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <xQueueGenericCreateStatic+0x4e>
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <xQueueGenericCreateStatic+0x52>
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <xQueueGenericCreateStatic+0x54>
 800348a:	2300      	movs	r3, #0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d109      	bne.n	80034a4 <xQueueGenericCreateStatic+0x6c>
 8003490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003494:	f383 8811 	msr	BASEPRI, r3
 8003498:	f3bf 8f6f 	isb	sy
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	623b      	str	r3, [r7, #32]
 80034a2:	e7fe      	b.n	80034a2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d102      	bne.n	80034b0 <xQueueGenericCreateStatic+0x78>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <xQueueGenericCreateStatic+0x7c>
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <xQueueGenericCreateStatic+0x7e>
 80034b4:	2300      	movs	r3, #0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d109      	bne.n	80034ce <xQueueGenericCreateStatic+0x96>
 80034ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034be:	f383 8811 	msr	BASEPRI, r3
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	61fb      	str	r3, [r7, #28]
 80034cc:	e7fe      	b.n	80034cc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80034ce:	2350      	movs	r3, #80	; 0x50
 80034d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2b50      	cmp	r3, #80	; 0x50
 80034d6:	d009      	beq.n	80034ec <xQueueGenericCreateStatic+0xb4>
 80034d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	61bb      	str	r3, [r7, #24]
 80034ea:	e7fe      	b.n	80034ea <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80034f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00d      	beq.n	8003512 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80034f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80034fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	4613      	mov	r3, r2
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	68b9      	ldr	r1, [r7, #8]
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 f842 	bl	8003596 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003514:	4618      	mov	r0, r3
 8003516:	3730      	adds	r7, #48	; 0x30
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08a      	sub	sp, #40	; 0x28
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	4613      	mov	r3, r2
 8003528:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d109      	bne.n	8003544 <xQueueGenericCreate+0x28>
 8003530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003534:	f383 8811 	msr	BASEPRI, r3
 8003538:	f3bf 8f6f 	isb	sy
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	e7fe      	b.n	8003542 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d102      	bne.n	8003550 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800354a:	2300      	movs	r3, #0
 800354c:	61fb      	str	r3, [r7, #28]
 800354e:	e004      	b.n	800355a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	fb02 f303 	mul.w	r3, r2, r3
 8003558:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	3350      	adds	r3, #80	; 0x50
 800355e:	4618      	mov	r0, r3
 8003560:	f002 fc98 	bl	8005e94 <pvPortMalloc>
 8003564:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00f      	beq.n	800358c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	3350      	adds	r3, #80	; 0x50
 8003570:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800357a:	79fa      	ldrb	r2, [r7, #7]
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	4613      	mov	r3, r2
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	68b9      	ldr	r1, [r7, #8]
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 f805 	bl	8003596 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800358c:	69bb      	ldr	r3, [r7, #24]
	}
 800358e:	4618      	mov	r0, r3
 8003590:	3720      	adds	r7, #32
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b084      	sub	sp, #16
 800359a:	af00      	add	r7, sp, #0
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	607a      	str	r2, [r7, #4]
 80035a2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d103      	bne.n	80035b2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	e002      	b.n	80035b8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80035c4:	2101      	movs	r1, #1
 80035c6:	69b8      	ldr	r0, [r7, #24]
 80035c8:	f7ff fece 	bl	8003368 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	78fa      	ldrb	r2, [r7, #3]
 80035d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80035d4:	bf00      	nop
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08a      	sub	sp, #40	; 0x28
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d109      	bne.n	8003602 <xQueueCreateCountingSemaphoreStatic+0x26>
 80035ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	61bb      	str	r3, [r7, #24]
 8003600:	e7fe      	b.n	8003600 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	429a      	cmp	r2, r3
 8003608:	d909      	bls.n	800361e <xQueueCreateCountingSemaphoreStatic+0x42>
 800360a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360e:	f383 8811 	msr	BASEPRI, r3
 8003612:	f3bf 8f6f 	isb	sy
 8003616:	f3bf 8f4f 	dsb	sy
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	e7fe      	b.n	800361c <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800361e:	2302      	movs	r3, #2
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	2100      	movs	r1, #0
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f7ff ff05 	bl	8003438 <xQueueGenericCreateStatic>
 800362e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800363c:	69fb      	ldr	r3, [r7, #28]
	}
 800363e:	4618      	mov	r0, r3
 8003640:	3720      	adds	r7, #32
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003646:	b580      	push	{r7, lr}
 8003648:	b086      	sub	sp, #24
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d109      	bne.n	800366a <xQueueCreateCountingSemaphore+0x24>
 8003656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365a:	f383 8811 	msr	BASEPRI, r3
 800365e:	f3bf 8f6f 	isb	sy
 8003662:	f3bf 8f4f 	dsb	sy
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	e7fe      	b.n	8003668 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	429a      	cmp	r2, r3
 8003670:	d909      	bls.n	8003686 <xQueueCreateCountingSemaphore+0x40>
 8003672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003676:	f383 8811 	msr	BASEPRI, r3
 800367a:	f3bf 8f6f 	isb	sy
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	e7fe      	b.n	8003684 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003686:	2202      	movs	r2, #2
 8003688:	2100      	movs	r1, #0
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff ff46 	bl	800351c <xQueueGenericCreate>
 8003690:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d002      	beq.n	800369e <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800369e:	697b      	ldr	r3, [r7, #20]
	}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08e      	sub	sp, #56	; 0x38
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80036b6:	2300      	movs	r3, #0
 80036b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80036be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d109      	bne.n	80036d8 <xQueueGenericSend+0x30>
 80036c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c8:	f383 8811 	msr	BASEPRI, r3
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036d6:	e7fe      	b.n	80036d6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d103      	bne.n	80036e6 <xQueueGenericSend+0x3e>
 80036de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <xQueueGenericSend+0x42>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <xQueueGenericSend+0x44>
 80036ea:	2300      	movs	r3, #0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d109      	bne.n	8003704 <xQueueGenericSend+0x5c>
 80036f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
 8003702:	e7fe      	b.n	8003702 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2b02      	cmp	r3, #2
 8003708:	d103      	bne.n	8003712 <xQueueGenericSend+0x6a>
 800370a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <xQueueGenericSend+0x6e>
 8003712:	2301      	movs	r3, #1
 8003714:	e000      	b.n	8003718 <xQueueGenericSend+0x70>
 8003716:	2300      	movs	r3, #0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d109      	bne.n	8003730 <xQueueGenericSend+0x88>
 800371c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003720:	f383 8811 	msr	BASEPRI, r3
 8003724:	f3bf 8f6f 	isb	sy
 8003728:	f3bf 8f4f 	dsb	sy
 800372c:	623b      	str	r3, [r7, #32]
 800372e:	e7fe      	b.n	800372e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003730:	f001 fce2 	bl	80050f8 <xTaskGetSchedulerState>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d102      	bne.n	8003740 <xQueueGenericSend+0x98>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <xQueueGenericSend+0x9c>
 8003740:	2301      	movs	r3, #1
 8003742:	e000      	b.n	8003746 <xQueueGenericSend+0x9e>
 8003744:	2300      	movs	r3, #0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d109      	bne.n	800375e <xQueueGenericSend+0xb6>
 800374a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374e:	f383 8811 	msr	BASEPRI, r3
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	61fb      	str	r3, [r7, #28]
 800375c:	e7fe      	b.n	800375c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800375e:	f002 faa3 	bl	8005ca8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376a:	429a      	cmp	r2, r3
 800376c:	d302      	bcc.n	8003774 <xQueueGenericSend+0xcc>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b02      	cmp	r3, #2
 8003772:	d129      	bne.n	80037c8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800377a:	f000 fc47 	bl	800400c <prvCopyDataToQueue>
 800377e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	2b00      	cmp	r3, #0
 8003786:	d010      	beq.n	80037aa <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378a:	3324      	adds	r3, #36	; 0x24
 800378c:	4618      	mov	r0, r3
 800378e:	f001 faf9 	bl	8004d84 <xTaskRemoveFromEventList>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d013      	beq.n	80037c0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003798:	4b3f      	ldr	r3, [pc, #252]	; (8003898 <xQueueGenericSend+0x1f0>)
 800379a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	f3bf 8f4f 	dsb	sy
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	e00a      	b.n	80037c0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80037aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d007      	beq.n	80037c0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80037b0:	4b39      	ldr	r3, [pc, #228]	; (8003898 <xQueueGenericSend+0x1f0>)
 80037b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	f3bf 8f4f 	dsb	sy
 80037bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80037c0:	f002 faa0 	bl	8005d04 <vPortExitCritical>
				return pdPASS;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e063      	b.n	8003890 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d103      	bne.n	80037d6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037ce:	f002 fa99 	bl	8005d04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80037d2:	2300      	movs	r3, #0
 80037d4:	e05c      	b.n	8003890 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d106      	bne.n	80037ea <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037dc:	f107 0314 	add.w	r3, r7, #20
 80037e0:	4618      	mov	r0, r3
 80037e2:	f001 fb31 	bl	8004e48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037e6:	2301      	movs	r3, #1
 80037e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037ea:	f002 fa8b 	bl	8005d04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037ee:	f001 f88d 	bl	800490c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037f2:	f002 fa59 	bl	8005ca8 <vPortEnterCritical>
 80037f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037fc:	b25b      	sxtb	r3, r3
 80037fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003802:	d103      	bne.n	800380c <xQueueGenericSend+0x164>
 8003804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003812:	b25b      	sxtb	r3, r3
 8003814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003818:	d103      	bne.n	8003822 <xQueueGenericSend+0x17a>
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003822:	f002 fa6f 	bl	8005d04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003826:	1d3a      	adds	r2, r7, #4
 8003828:	f107 0314 	add.w	r3, r7, #20
 800382c:	4611      	mov	r1, r2
 800382e:	4618      	mov	r0, r3
 8003830:	f001 fb20 	bl	8004e74 <xTaskCheckForTimeOut>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d124      	bne.n	8003884 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800383a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800383c:	f000 fcde 	bl	80041fc <prvIsQueueFull>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d018      	beq.n	8003878 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003848:	3310      	adds	r3, #16
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	4611      	mov	r1, r2
 800384e:	4618      	mov	r0, r3
 8003850:	f001 fa4a 	bl	8004ce8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003854:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003856:	f000 fc69 	bl	800412c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800385a:	f001 f865 	bl	8004928 <xTaskResumeAll>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	f47f af7c 	bne.w	800375e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003866:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <xQueueGenericSend+0x1f0>)
 8003868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	f3bf 8f4f 	dsb	sy
 8003872:	f3bf 8f6f 	isb	sy
 8003876:	e772      	b.n	800375e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800387a:	f000 fc57 	bl	800412c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800387e:	f001 f853 	bl	8004928 <xTaskResumeAll>
 8003882:	e76c      	b.n	800375e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003886:	f000 fc51 	bl	800412c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800388a:	f001 f84d 	bl	8004928 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800388e:	2300      	movs	r3, #0
		}
	}
}
 8003890:	4618      	mov	r0, r3
 8003892:	3738      	adds	r7, #56	; 0x38
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	e000ed04 	.word	0xe000ed04

0800389c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08e      	sub	sp, #56	; 0x38
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80038ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d109      	bne.n	80038c8 <xQueueGenericSendFromISR+0x2c>
 80038b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b8:	f383 8811 	msr	BASEPRI, r3
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
 80038c6:	e7fe      	b.n	80038c6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d103      	bne.n	80038d6 <xQueueGenericSendFromISR+0x3a>
 80038ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <xQueueGenericSendFromISR+0x3e>
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <xQueueGenericSendFromISR+0x40>
 80038da:	2300      	movs	r3, #0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d109      	bne.n	80038f4 <xQueueGenericSendFromISR+0x58>
 80038e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	623b      	str	r3, [r7, #32]
 80038f2:	e7fe      	b.n	80038f2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d103      	bne.n	8003902 <xQueueGenericSendFromISR+0x66>
 80038fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <xQueueGenericSendFromISR+0x6a>
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <xQueueGenericSendFromISR+0x6c>
 8003906:	2300      	movs	r3, #0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d109      	bne.n	8003920 <xQueueGenericSendFromISR+0x84>
 800390c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003910:	f383 8811 	msr	BASEPRI, r3
 8003914:	f3bf 8f6f 	isb	sy
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	61fb      	str	r3, [r7, #28]
 800391e:	e7fe      	b.n	800391e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003920:	f002 fa7c 	bl	8005e1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003924:	f3ef 8211 	mrs	r2, BASEPRI
 8003928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392c:	f383 8811 	msr	BASEPRI, r3
 8003930:	f3bf 8f6f 	isb	sy
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	61ba      	str	r2, [r7, #24]
 800393a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800393c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800393e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003942:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003948:	429a      	cmp	r2, r3
 800394a:	d302      	bcc.n	8003952 <xQueueGenericSendFromISR+0xb6>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d12c      	bne.n	80039ac <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003954:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003962:	f000 fb53 	bl	800400c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003966:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800396a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396e:	d112      	bne.n	8003996 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	2b00      	cmp	r3, #0
 8003976:	d016      	beq.n	80039a6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397a:	3324      	adds	r3, #36	; 0x24
 800397c:	4618      	mov	r0, r3
 800397e:	f001 fa01 	bl	8004d84 <xTaskRemoveFromEventList>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00e      	beq.n	80039a6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00b      	beq.n	80039a6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	e007      	b.n	80039a6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003996:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800399a:	3301      	adds	r3, #1
 800399c:	b2db      	uxtb	r3, r3
 800399e:	b25a      	sxtb	r2, r3
 80039a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80039a6:	2301      	movs	r3, #1
 80039a8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80039aa:	e001      	b.n	80039b0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	637b      	str	r3, [r7, #52]	; 0x34
 80039b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80039ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3738      	adds	r7, #56	; 0x38
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b08e      	sub	sp, #56	; 0x38
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80039d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d109      	bne.n	80039ec <xQueueGiveFromISR+0x28>
	__asm volatile
 80039d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	623b      	str	r3, [r7, #32]
 80039ea:	e7fe      	b.n	80039ea <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80039ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d009      	beq.n	8003a08 <xQueueGiveFromISR+0x44>
 80039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	61fb      	str	r3, [r7, #28]
 8003a06:	e7fe      	b.n	8003a06 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d103      	bne.n	8003a18 <xQueueGiveFromISR+0x54>
 8003a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <xQueueGiveFromISR+0x58>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e000      	b.n	8003a1e <xQueueGiveFromISR+0x5a>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d109      	bne.n	8003a36 <xQueueGiveFromISR+0x72>
 8003a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a26:	f383 8811 	msr	BASEPRI, r3
 8003a2a:	f3bf 8f6f 	isb	sy
 8003a2e:	f3bf 8f4f 	dsb	sy
 8003a32:	61bb      	str	r3, [r7, #24]
 8003a34:	e7fe      	b.n	8003a34 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a36:	f002 f9f1 	bl	8005e1c <vPortValidateInterruptPriority>
	__asm volatile
 8003a3a:	f3ef 8211 	mrs	r2, BASEPRI
 8003a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a42:	f383 8811 	msr	BASEPRI, r3
 8003a46:	f3bf 8f6f 	isb	sy
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	617a      	str	r2, [r7, #20]
 8003a50:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003a52:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d22b      	bcs.n	8003abe <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a76:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a80:	d112      	bne.n	8003aa8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d016      	beq.n	8003ab8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8c:	3324      	adds	r3, #36	; 0x24
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f001 f978 	bl	8004d84 <xTaskRemoveFromEventList>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00e      	beq.n	8003ab8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00b      	beq.n	8003ab8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	e007      	b.n	8003ab8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003aac:	3301      	adds	r3, #1
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	b25a      	sxtb	r2, r3
 8003ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	637b      	str	r3, [r7, #52]	; 0x34
 8003abc:	e001      	b.n	8003ac2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3738      	adds	r7, #56	; 0x38
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08c      	sub	sp, #48	; 0x30
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d109      	bne.n	8003b06 <xQueueReceive+0x2e>
	__asm volatile
 8003af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	623b      	str	r3, [r7, #32]
 8003b04:	e7fe      	b.n	8003b04 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d103      	bne.n	8003b14 <xQueueReceive+0x3c>
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <xQueueReceive+0x40>
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <xQueueReceive+0x42>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d109      	bne.n	8003b32 <xQueueReceive+0x5a>
 8003b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b22:	f383 8811 	msr	BASEPRI, r3
 8003b26:	f3bf 8f6f 	isb	sy
 8003b2a:	f3bf 8f4f 	dsb	sy
 8003b2e:	61fb      	str	r3, [r7, #28]
 8003b30:	e7fe      	b.n	8003b30 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b32:	f001 fae1 	bl	80050f8 <xTaskGetSchedulerState>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d102      	bne.n	8003b42 <xQueueReceive+0x6a>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <xQueueReceive+0x6e>
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <xQueueReceive+0x70>
 8003b46:	2300      	movs	r3, #0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d109      	bne.n	8003b60 <xQueueReceive+0x88>
 8003b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b50:	f383 8811 	msr	BASEPRI, r3
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	61bb      	str	r3, [r7, #24]
 8003b5e:	e7fe      	b.n	8003b5e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b60:	f002 f8a2 	bl	8005ca8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d01f      	beq.n	8003bb0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b74:	f000 fab4 	bl	80040e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	1e5a      	subs	r2, r3, #1
 8003b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00f      	beq.n	8003ba8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8a:	3310      	adds	r3, #16
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f001 f8f9 	bl	8004d84 <xTaskRemoveFromEventList>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d007      	beq.n	8003ba8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b98:	4b3c      	ldr	r3, [pc, #240]	; (8003c8c <xQueueReceive+0x1b4>)
 8003b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ba8:	f002 f8ac 	bl	8005d04 <vPortExitCritical>
				return pdPASS;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e069      	b.n	8003c84 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d103      	bne.n	8003bbe <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bb6:	f002 f8a5 	bl	8005d04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	e062      	b.n	8003c84 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d106      	bne.n	8003bd2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bc4:	f107 0310 	add.w	r3, r7, #16
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f001 f93d 	bl	8004e48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bd2:	f002 f897 	bl	8005d04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bd6:	f000 fe99 	bl	800490c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bda:	f002 f865 	bl	8005ca8 <vPortEnterCritical>
 8003bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003be4:	b25b      	sxtb	r3, r3
 8003be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bea:	d103      	bne.n	8003bf4 <xQueueReceive+0x11c>
 8003bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bfa:	b25b      	sxtb	r3, r3
 8003bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c00:	d103      	bne.n	8003c0a <xQueueReceive+0x132>
 8003c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c0a:	f002 f87b 	bl	8005d04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c0e:	1d3a      	adds	r2, r7, #4
 8003c10:	f107 0310 	add.w	r3, r7, #16
 8003c14:	4611      	mov	r1, r2
 8003c16:	4618      	mov	r0, r3
 8003c18:	f001 f92c 	bl	8004e74 <xTaskCheckForTimeOut>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d123      	bne.n	8003c6a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c24:	f000 fad4 	bl	80041d0 <prvIsQueueEmpty>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d017      	beq.n	8003c5e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c30:	3324      	adds	r3, #36	; 0x24
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	4611      	mov	r1, r2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f001 f856 	bl	8004ce8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c3e:	f000 fa75 	bl	800412c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c42:	f000 fe71 	bl	8004928 <xTaskResumeAll>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d189      	bne.n	8003b60 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003c4c:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <xQueueReceive+0x1b4>)
 8003c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	f3bf 8f4f 	dsb	sy
 8003c58:	f3bf 8f6f 	isb	sy
 8003c5c:	e780      	b.n	8003b60 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003c5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c60:	f000 fa64 	bl	800412c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c64:	f000 fe60 	bl	8004928 <xTaskResumeAll>
 8003c68:	e77a      	b.n	8003b60 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003c6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c6c:	f000 fa5e 	bl	800412c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c70:	f000 fe5a 	bl	8004928 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c76:	f000 faab 	bl	80041d0 <prvIsQueueEmpty>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f43f af6f 	beq.w	8003b60 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003c82:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3730      	adds	r7, #48	; 0x30
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	e000ed04 	.word	0xe000ed04

08003c90 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08e      	sub	sp, #56	; 0x38
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d109      	bne.n	8003cc0 <xQueueSemaphoreTake+0x30>
 8003cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	623b      	str	r3, [r7, #32]
 8003cbe:	e7fe      	b.n	8003cbe <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d009      	beq.n	8003cdc <xQueueSemaphoreTake+0x4c>
 8003cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ccc:	f383 8811 	msr	BASEPRI, r3
 8003cd0:	f3bf 8f6f 	isb	sy
 8003cd4:	f3bf 8f4f 	dsb	sy
 8003cd8:	61fb      	str	r3, [r7, #28]
 8003cda:	e7fe      	b.n	8003cda <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cdc:	f001 fa0c 	bl	80050f8 <xTaskGetSchedulerState>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d102      	bne.n	8003cec <xQueueSemaphoreTake+0x5c>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <xQueueSemaphoreTake+0x60>
 8003cec:	2301      	movs	r3, #1
 8003cee:	e000      	b.n	8003cf2 <xQueueSemaphoreTake+0x62>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d109      	bne.n	8003d0a <xQueueSemaphoreTake+0x7a>
 8003cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfa:	f383 8811 	msr	BASEPRI, r3
 8003cfe:	f3bf 8f6f 	isb	sy
 8003d02:	f3bf 8f4f 	dsb	sy
 8003d06:	61bb      	str	r3, [r7, #24]
 8003d08:	e7fe      	b.n	8003d08 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d0a:	f001 ffcd 	bl	8005ca8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d12:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d024      	beq.n	8003d64 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1c:	1e5a      	subs	r2, r3, #1
 8003d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d20:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d104      	bne.n	8003d34 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003d2a:	f001 fb61 	bl	80053f0 <pvTaskIncrementMutexHeldCount>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d32:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00f      	beq.n	8003d5c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3e:	3310      	adds	r3, #16
 8003d40:	4618      	mov	r0, r3
 8003d42:	f001 f81f 	bl	8004d84 <xTaskRemoveFromEventList>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d007      	beq.n	8003d5c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d4c:	4b53      	ldr	r3, [pc, #332]	; (8003e9c <xQueueSemaphoreTake+0x20c>)
 8003d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d5c:	f001 ffd2 	bl	8005d04 <vPortExitCritical>
				return pdPASS;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e096      	b.n	8003e92 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d110      	bne.n	8003d8c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d009      	beq.n	8003d84 <xQueueSemaphoreTake+0xf4>
 8003d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d74:	f383 8811 	msr	BASEPRI, r3
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	e7fe      	b.n	8003d82 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003d84:	f001 ffbe 	bl	8005d04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	e082      	b.n	8003e92 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d106      	bne.n	8003da0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d92:	f107 030c 	add.w	r3, r7, #12
 8003d96:	4618      	mov	r0, r3
 8003d98:	f001 f856 	bl	8004e48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003da0:	f001 ffb0 	bl	8005d04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003da4:	f000 fdb2 	bl	800490c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003da8:	f001 ff7e 	bl	8005ca8 <vPortEnterCritical>
 8003dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003db2:	b25b      	sxtb	r3, r3
 8003db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db8:	d103      	bne.n	8003dc2 <xQueueSemaphoreTake+0x132>
 8003dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dc8:	b25b      	sxtb	r3, r3
 8003dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dce:	d103      	bne.n	8003dd8 <xQueueSemaphoreTake+0x148>
 8003dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dd8:	f001 ff94 	bl	8005d04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ddc:	463a      	mov	r2, r7
 8003dde:	f107 030c 	add.w	r3, r7, #12
 8003de2:	4611      	mov	r1, r2
 8003de4:	4618      	mov	r0, r3
 8003de6:	f001 f845 	bl	8004e74 <xTaskCheckForTimeOut>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d132      	bne.n	8003e56 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003df0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003df2:	f000 f9ed 	bl	80041d0 <prvIsQueueEmpty>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d026      	beq.n	8003e4a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d109      	bne.n	8003e18 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8003e04:	f001 ff50 	bl	8005ca8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f001 f991 	bl	8005134 <xTaskPriorityInherit>
 8003e12:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003e14:	f001 ff76 	bl	8005d04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1a:	3324      	adds	r3, #36	; 0x24
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	4611      	mov	r1, r2
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 ff61 	bl	8004ce8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e28:	f000 f980 	bl	800412c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e2c:	f000 fd7c 	bl	8004928 <xTaskResumeAll>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f47f af69 	bne.w	8003d0a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8003e38:	4b18      	ldr	r3, [pc, #96]	; (8003e9c <xQueueSemaphoreTake+0x20c>)
 8003e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	f3bf 8f4f 	dsb	sy
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	e75f      	b.n	8003d0a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003e4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e4c:	f000 f96e 	bl	800412c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e50:	f000 fd6a 	bl	8004928 <xTaskResumeAll>
 8003e54:	e759      	b.n	8003d0a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003e56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e58:	f000 f968 	bl	800412c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e5c:	f000 fd64 	bl	8004928 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e62:	f000 f9b5 	bl	80041d0 <prvIsQueueEmpty>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f43f af4e 	beq.w	8003d0a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00d      	beq.n	8003e90 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8003e74:	f001 ff18 	bl	8005ca8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003e78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e7a:	f000 f8b0 	bl	8003fde <prvGetDisinheritPriorityAfterTimeout>
 8003e7e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e86:	4618      	mov	r0, r3
 8003e88:	f001 fa2e 	bl	80052e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003e8c:	f001 ff3a 	bl	8005d04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3738      	adds	r7, #56	; 0x38
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	e000ed04 	.word	0xe000ed04

08003ea0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08e      	sub	sp, #56	; 0x38
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d109      	bne.n	8003eca <xQueueReceiveFromISR+0x2a>
 8003eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eba:	f383 8811 	msr	BASEPRI, r3
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	623b      	str	r3, [r7, #32]
 8003ec8:	e7fe      	b.n	8003ec8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d103      	bne.n	8003ed8 <xQueueReceiveFromISR+0x38>
 8003ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <xQueueReceiveFromISR+0x3c>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e000      	b.n	8003ede <xQueueReceiveFromISR+0x3e>
 8003edc:	2300      	movs	r3, #0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d109      	bne.n	8003ef6 <xQueueReceiveFromISR+0x56>
 8003ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee6:	f383 8811 	msr	BASEPRI, r3
 8003eea:	f3bf 8f6f 	isb	sy
 8003eee:	f3bf 8f4f 	dsb	sy
 8003ef2:	61fb      	str	r3, [r7, #28]
 8003ef4:	e7fe      	b.n	8003ef4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ef6:	f001 ff91 	bl	8005e1c <vPortValidateInterruptPriority>
	__asm volatile
 8003efa:	f3ef 8211 	mrs	r2, BASEPRI
 8003efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	61ba      	str	r2, [r7, #24]
 8003f10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003f12:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d02f      	beq.n	8003f82 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f30:	f000 f8d6 	bl	80040e0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f36:	1e5a      	subs	r2, r3, #1
 8003f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003f3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f44:	d112      	bne.n	8003f6c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d016      	beq.n	8003f7c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f50:	3310      	adds	r3, #16
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 ff16 	bl	8004d84 <xTaskRemoveFromEventList>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00e      	beq.n	8003f7c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00b      	beq.n	8003f7c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	e007      	b.n	8003f7c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f70:	3301      	adds	r3, #1
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	b25a      	sxtb	r2, r3
 8003f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f80:	e001      	b.n	8003f86 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	637b      	str	r3, [r7, #52]	; 0x34
 8003f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f88:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3738      	adds	r7, #56	; 0x38
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d109      	bne.n	8003fc0 <vQueueDelete+0x26>
	__asm volatile
 8003fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	e7fe      	b.n	8003fbe <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 f95b 	bl	800427c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d102      	bne.n	8003fd6 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f002 f821 	bl	8006018 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003fd6:	bf00      	nop
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003fde:	b480      	push	{r7}
 8003fe0:	b085      	sub	sp, #20
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d006      	beq.n	8003ffc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	e001      	b.n	8004000 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004000:	68fb      	ldr	r3, [r7, #12]
	}
 8004002:	4618      	mov	r0, r3
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	bc80      	pop	{r7}
 800400a:	4770      	bx	lr

0800400c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004020:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10d      	bne.n	8004046 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d14d      	bne.n	80040ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	4618      	mov	r0, r3
 8004038:	f001 f8ea 	bl	8005210 <xTaskPriorityDisinherit>
 800403c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	605a      	str	r2, [r3, #4]
 8004044:	e043      	b.n	80040ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d119      	bne.n	8004080 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6898      	ldr	r0, [r3, #8]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004054:	461a      	mov	r2, r3
 8004056:	68b9      	ldr	r1, [r7, #8]
 8004058:	f002 f914 	bl	8006284 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	441a      	add	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	429a      	cmp	r2, r3
 8004074:	d32b      	bcc.n	80040ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	609a      	str	r2, [r3, #8]
 800407e:	e026      	b.n	80040ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	68d8      	ldr	r0, [r3, #12]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	461a      	mov	r2, r3
 800408a:	68b9      	ldr	r1, [r7, #8]
 800408c:	f002 f8fa 	bl	8006284 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	425b      	negs	r3, r3
 800409a:	441a      	add	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	68da      	ldr	r2, [r3, #12]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d207      	bcs.n	80040bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	425b      	negs	r3, r3
 80040b6:	441a      	add	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d105      	bne.n	80040ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80040d6:	697b      	ldr	r3, [r7, #20]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d018      	beq.n	8004124 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	441a      	add	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	429a      	cmp	r2, r3
 800410a:	d303      	bcc.n	8004114 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68d9      	ldr	r1, [r3, #12]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	461a      	mov	r2, r3
 800411e:	6838      	ldr	r0, [r7, #0]
 8004120:	f002 f8b0 	bl	8006284 <memcpy>
	}
}
 8004124:	bf00      	nop
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004134:	f001 fdb8 	bl	8005ca8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800413e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004140:	e011      	b.n	8004166 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	2b00      	cmp	r3, #0
 8004148:	d012      	beq.n	8004170 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3324      	adds	r3, #36	; 0x24
 800414e:	4618      	mov	r0, r3
 8004150:	f000 fe18 	bl	8004d84 <xTaskRemoveFromEventList>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800415a:	f000 feeb 	bl	8004f34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800415e:	7bfb      	ldrb	r3, [r7, #15]
 8004160:	3b01      	subs	r3, #1
 8004162:	b2db      	uxtb	r3, r3
 8004164:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800416a:	2b00      	cmp	r3, #0
 800416c:	dce9      	bgt.n	8004142 <prvUnlockQueue+0x16>
 800416e:	e000      	b.n	8004172 <prvUnlockQueue+0x46>
					break;
 8004170:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	22ff      	movs	r2, #255	; 0xff
 8004176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800417a:	f001 fdc3 	bl	8005d04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800417e:	f001 fd93 	bl	8005ca8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004188:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800418a:	e011      	b.n	80041b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d012      	beq.n	80041ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3310      	adds	r3, #16
 8004198:	4618      	mov	r0, r3
 800419a:	f000 fdf3 	bl	8004d84 <xTaskRemoveFromEventList>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80041a4:	f000 fec6 	bl	8004f34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80041a8:	7bbb      	ldrb	r3, [r7, #14]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	dce9      	bgt.n	800418c <prvUnlockQueue+0x60>
 80041b8:	e000      	b.n	80041bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80041ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	22ff      	movs	r2, #255	; 0xff
 80041c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80041c4:	f001 fd9e 	bl	8005d04 <vPortExitCritical>
}
 80041c8:	bf00      	nop
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041d8:	f001 fd66 	bl	8005ca8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d102      	bne.n	80041ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80041e4:	2301      	movs	r3, #1
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	e001      	b.n	80041ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041ee:	f001 fd89 	bl	8005d04 <vPortExitCritical>

	return xReturn;
 80041f2:	68fb      	ldr	r3, [r7, #12]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004204:	f001 fd50 	bl	8005ca8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004210:	429a      	cmp	r2, r3
 8004212:	d102      	bne.n	800421a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004214:	2301      	movs	r3, #1
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	e001      	b.n	800421e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800421e:	f001 fd71 	bl	8005d04 <vPortExitCritical>

	return xReturn;
 8004222:	68fb      	ldr	r3, [r7, #12]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004236:	2300      	movs	r3, #0
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	e014      	b.n	8004266 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800423c:	4a0e      	ldr	r2, [pc, #56]	; (8004278 <vQueueAddToRegistry+0x4c>)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10b      	bne.n	8004260 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004248:	490b      	ldr	r1, [pc, #44]	; (8004278 <vQueueAddToRegistry+0x4c>)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004252:	4a09      	ldr	r2, [pc, #36]	; (8004278 <vQueueAddToRegistry+0x4c>)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	4413      	add	r3, r2
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800425e:	e005      	b.n	800426c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	3301      	adds	r3, #1
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2b07      	cmp	r3, #7
 800426a:	d9e7      	bls.n	800423c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800426c:	bf00      	nop
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	bc80      	pop	{r7}
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	2000269c 	.word	0x2000269c

0800427c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004284:	2300      	movs	r3, #0
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	e016      	b.n	80042b8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800428a:	4a0f      	ldr	r2, [pc, #60]	; (80042c8 <vQueueUnregisterQueue+0x4c>)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	4413      	add	r3, r2
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	429a      	cmp	r2, r3
 8004298:	d10b      	bne.n	80042b2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800429a:	4a0b      	ldr	r2, [pc, #44]	; (80042c8 <vQueueUnregisterQueue+0x4c>)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2100      	movs	r1, #0
 80042a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80042a4:	4a08      	ldr	r2, [pc, #32]	; (80042c8 <vQueueUnregisterQueue+0x4c>)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	4413      	add	r3, r2
 80042ac:	2200      	movs	r2, #0
 80042ae:	605a      	str	r2, [r3, #4]
				break;
 80042b0:	e005      	b.n	80042be <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	3301      	adds	r3, #1
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2b07      	cmp	r3, #7
 80042bc:	d9e5      	bls.n	800428a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80042be:	bf00      	nop
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bc80      	pop	{r7}
 80042c6:	4770      	bx	lr
 80042c8:	2000269c 	.word	0x2000269c

080042cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80042dc:	f001 fce4 	bl	8005ca8 <vPortEnterCritical>
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042e6:	b25b      	sxtb	r3, r3
 80042e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ec:	d103      	bne.n	80042f6 <vQueueWaitForMessageRestricted+0x2a>
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042fc:	b25b      	sxtb	r3, r3
 80042fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004302:	d103      	bne.n	800430c <vQueueWaitForMessageRestricted+0x40>
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800430c:	f001 fcfa 	bl	8005d04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004314:	2b00      	cmp	r3, #0
 8004316:	d106      	bne.n	8004326 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	3324      	adds	r3, #36	; 0x24
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	68b9      	ldr	r1, [r7, #8]
 8004320:	4618      	mov	r0, r3
 8004322:	f000 fd05 	bl	8004d30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004326:	6978      	ldr	r0, [r7, #20]
 8004328:	f7ff ff00 	bl	800412c <prvUnlockQueue>
	}
 800432c:	bf00      	nop
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08a      	sub	sp, #40	; 0x28
 8004338:	af02      	add	r7, sp, #8
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b04      	cmp	r3, #4
 8004344:	d809      	bhi.n	800435a <xStreamBufferGenericCreate+0x26>
 8004346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434a:	f383 8811 	msr	BASEPRI, r3
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	f3bf 8f4f 	dsb	sy
 8004356:	61bb      	str	r3, [r7, #24]
 8004358:	e7fe      	b.n	8004358 <xStreamBufferGenericCreate+0x24>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	429a      	cmp	r2, r3
 8004360:	d909      	bls.n	8004376 <xStreamBufferGenericCreate+0x42>
 8004362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004366:	f383 8811 	msr	BASEPRI, r3
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	e7fe      	b.n	8004374 <xStreamBufferGenericCreate+0x40>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <xStreamBufferGenericCreate+0x4c>
		{
			xTriggerLevelBytes = ( size_t ) 1; /*lint !e9044 Parameter modified to ensure it doesn't have a dangerous value. */
 800437c:	2301      	movs	r3, #1
 800437e:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	3301      	adds	r3, #1
 8004384:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	3324      	adds	r3, #36	; 0x24
 800438a:	4618      	mov	r0, r3
 800438c:	f001 fd82 	bl	8005e94 <pvPortMalloc>
 8004390:	61f8      	str	r0, [r7, #28]

		if( pucAllocatedMemory != NULL )
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d009      	beq.n	80043ac <xStreamBufferGenericCreate+0x78>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	69f8      	ldr	r0, [r7, #28]
 80043a8:	f000 f846 	bl	8004438 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t * ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 80043ac:	69fb      	ldr	r3, [r7, #28]
	}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3720      	adds	r7, #32
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <xStreamBufferReset>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b08a      	sub	sp, #40	; 0x28
 80043ba:	af02      	add	r7, sp, #8
 80043bc:	6078      	str	r0, [r7, #4]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	617b      	str	r3, [r7, #20]
BaseType_t xReturn = pdFAIL, xIsMessageBuffer;
 80043c2:	2300      	movs	r3, #0
 80043c4:	61fb      	str	r3, [r7, #28]

#if( configUSE_TRACE_FACILITY == 1 )
	UBaseType_t uxStreamBufferNumber;
#endif

	configASSERT( pxStreamBuffer );
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d109      	bne.n	80043e0 <xStreamBufferReset+0x2a>
 80043cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	e7fe      	b.n	80043de <xStreamBufferReset+0x28>

	#if( configUSE_TRACE_FACILITY == 1 )
	{
		/* Store the stream buffer number so it can be restored after the
		reset. */
		uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	613b      	str	r3, [r7, #16]
	}
	#endif

	/* Can only reset a message buffer if there are no tasks blocked on it. */
	if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d11f      	bne.n	800442e <xStreamBufferReset+0x78>
	{
		if( pxStreamBuffer->xTaskWaitingToSend == NULL )
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d11b      	bne.n	800442e <xStreamBufferReset+0x78>
		{
			if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	7f1b      	ldrb	r3, [r3, #28]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <xStreamBufferReset+0x52>
			{
				xIsMessageBuffer = pdTRUE;
 8004402:	2301      	movs	r3, #1
 8004404:	61bb      	str	r3, [r7, #24]
 8004406:	e001      	b.n	800440c <xStreamBufferReset+0x56>
			}
			else
			{
				xIsMessageBuffer = pdFALSE;
 8004408:	2300      	movs	r3, #0
 800440a:	61bb      	str	r3, [r7, #24]
			}

			prvInitialiseNewStreamBuffer( pxStreamBuffer,
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	6999      	ldr	r1, [r3, #24]
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	68d8      	ldr	r0, [r3, #12]
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	4603      	mov	r3, r0
 800441e:	6978      	ldr	r0, [r7, #20]
 8004420:	f000 f80a 	bl	8004438 <prvInitialiseNewStreamBuffer>
										  pxStreamBuffer->pucBuffer,
										  pxStreamBuffer->xLength,
										  pxStreamBuffer->xTriggerLevelBytes,
										  xIsMessageBuffer );
			xReturn = pdPASS;
 8004424:	2301      	movs	r3, #1
 8004426:	61fb      	str	r3, [r7, #28]

			#if( configUSE_TRACE_FACILITY == 1 )
			{
				pxStreamBuffer->uxStreamBufferNumber = uxStreamBufferNumber;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	621a      	str	r2, [r3, #32]

			traceSTREAM_BUFFER_RESET( xStreamBuffer );
		}
	}

	return xReturn;
 800442e:	69fb      	ldr	r3, [r7, #28]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3720      	adds	r7, #32
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  BaseType_t xIsMessageBuffer )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
 8004444:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8004446:	2355      	movs	r3, #85	; 0x55
 8004448:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6979      	ldr	r1, [r7, #20]
 800444e:	68b8      	ldr	r0, [r7, #8]
 8004450:	f001 ff23 	bl	800629a <memset>
 8004454:	4602      	mov	r2, r0
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	4293      	cmp	r3, r2
 800445a:	d009      	beq.n	8004470 <prvInitialiseNewStreamBuffer+0x38>
 800445c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004460:	f383 8811 	msr	BASEPRI, r3
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	613b      	str	r3, [r7, #16]
 800446e:	e7fe      	b.n	800446e <prvInitialiseNewStreamBuffer+0x36>
	}
	#endif

	memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8004470:	2224      	movs	r2, #36	; 0x24
 8004472:	2100      	movs	r1, #0
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f001 ff10 	bl	800629a <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	60da      	str	r2, [r3, #12]

	if( xIsMessageBuffer != pdFALSE )
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d006      	beq.n	80044a0 <prvInitialiseNewStreamBuffer+0x68>
	{
		pxStreamBuffer->ucFlags |= sbFLAGS_IS_MESSAGE_BUFFER;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	7f1b      	ldrb	r3, [r3, #28]
 8004496:	f043 0301 	orr.w	r3, r3, #1
 800449a:	b2da      	uxtb	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	771a      	strb	r2, [r3, #28]
	}
}
 80044a0:	bf00      	nop
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b08e      	sub	sp, #56	; 0x38
 80044ac:	af04      	add	r7, sp, #16
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80044b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d109      	bne.n	80044d0 <xTaskCreateStatic+0x28>
 80044bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	623b      	str	r3, [r7, #32]
 80044ce:	e7fe      	b.n	80044ce <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80044d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d109      	bne.n	80044ea <xTaskCreateStatic+0x42>
 80044d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	61fb      	str	r3, [r7, #28]
 80044e8:	e7fe      	b.n	80044e8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80044ea:	2360      	movs	r3, #96	; 0x60
 80044ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	2b60      	cmp	r3, #96	; 0x60
 80044f2:	d009      	beq.n	8004508 <xTaskCreateStatic+0x60>
 80044f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	61bb      	str	r3, [r7, #24]
 8004506:	e7fe      	b.n	8004506 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450a:	2b00      	cmp	r3, #0
 800450c:	d01e      	beq.n	800454c <xTaskCreateStatic+0xa4>
 800450e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004510:	2b00      	cmp	r3, #0
 8004512:	d01b      	beq.n	800454c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800451c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	2202      	movs	r2, #2
 8004522:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004526:	2300      	movs	r3, #0
 8004528:	9303      	str	r3, [sp, #12]
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	9302      	str	r3, [sp, #8]
 800452e:	f107 0314 	add.w	r3, r7, #20
 8004532:	9301      	str	r3, [sp, #4]
 8004534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	68b9      	ldr	r1, [r7, #8]
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 f850 	bl	80045e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004544:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004546:	f000 f8d7 	bl	80046f8 <prvAddNewTaskToReadyList>
 800454a:	e001      	b.n	8004550 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004550:	697b      	ldr	r3, [r7, #20]
	}
 8004552:	4618      	mov	r0, r3
 8004554:	3728      	adds	r7, #40	; 0x28
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800455a:	b580      	push	{r7, lr}
 800455c:	b08c      	sub	sp, #48	; 0x30
 800455e:	af04      	add	r7, sp, #16
 8004560:	60f8      	str	r0, [r7, #12]
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	603b      	str	r3, [r7, #0]
 8004566:	4613      	mov	r3, r2
 8004568:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800456a:	88fb      	ldrh	r3, [r7, #6]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4618      	mov	r0, r3
 8004570:	f001 fc90 	bl	8005e94 <pvPortMalloc>
 8004574:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00e      	beq.n	800459a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800457c:	2060      	movs	r0, #96	; 0x60
 800457e:	f001 fc89 	bl	8005e94 <pvPortMalloc>
 8004582:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	631a      	str	r2, [r3, #48]	; 0x30
 8004590:	e005      	b.n	800459e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004592:	6978      	ldr	r0, [r7, #20]
 8004594:	f001 fd40 	bl	8006018 <vPortFree>
 8004598:	e001      	b.n	800459e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800459a:	2300      	movs	r3, #0
 800459c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d017      	beq.n	80045d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80045ac:	88fa      	ldrh	r2, [r7, #6]
 80045ae:	2300      	movs	r3, #0
 80045b0:	9303      	str	r3, [sp, #12]
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	9302      	str	r3, [sp, #8]
 80045b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b8:	9301      	str	r3, [sp, #4]
 80045ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68b9      	ldr	r1, [r7, #8]
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 f80e 	bl	80045e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045c8:	69f8      	ldr	r0, [r7, #28]
 80045ca:	f000 f895 	bl	80046f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80045ce:	2301      	movs	r3, #1
 80045d0:	61bb      	str	r3, [r7, #24]
 80045d2:	e002      	b.n	80045da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80045d4:	f04f 33ff 	mov.w	r3, #4294967295
 80045d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80045da:	69bb      	ldr	r3, [r7, #24]
	}
 80045dc:	4618      	mov	r0, r3
 80045de:	3720      	adds	r7, #32
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b088      	sub	sp, #32
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
 80045f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80045f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	461a      	mov	r2, r3
 80045fc:	21a5      	movs	r1, #165	; 0xa5
 80045fe:	f001 fe4c 	bl	800629a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800460c:	3b01      	subs	r3, #1
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	f023 0307 	bic.w	r3, r3, #7
 800461a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	2b00      	cmp	r3, #0
 8004624:	d009      	beq.n	800463a <prvInitialiseNewTask+0x56>
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	617b      	str	r3, [r7, #20]
 8004638:	e7fe      	b.n	8004638 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800463a:	2300      	movs	r3, #0
 800463c:	61fb      	str	r3, [r7, #28]
 800463e:	e012      	b.n	8004666 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	4413      	add	r3, r2
 8004646:	7819      	ldrb	r1, [r3, #0]
 8004648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	4413      	add	r3, r2
 800464e:	3334      	adds	r3, #52	; 0x34
 8004650:	460a      	mov	r2, r1
 8004652:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	4413      	add	r3, r2
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d006      	beq.n	800466e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	3301      	adds	r3, #1
 8004664:	61fb      	str	r3, [r7, #28]
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	2b0f      	cmp	r3, #15
 800466a:	d9e9      	bls.n	8004640 <prvInitialiseNewTask+0x5c>
 800466c:	e000      	b.n	8004670 <prvInitialiseNewTask+0x8c>
		{
			break;
 800466e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467a:	2b37      	cmp	r3, #55	; 0x37
 800467c:	d901      	bls.n	8004682 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800467e:	2337      	movs	r3, #55	; 0x37
 8004680:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004686:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800468c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800468e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004690:	2200      	movs	r2, #0
 8004692:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004696:	3304      	adds	r3, #4
 8004698:	4618      	mov	r0, r3
 800469a:	f7fe fdd4 	bl	8003246 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a0:	3318      	adds	r3, #24
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fe fdcf 	bl	8003246 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80046a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80046b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80046b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046bc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80046be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c0:	2200      	movs	r2, #0
 80046c2:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80046c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c6:	2200      	movs	r2, #0
 80046c8:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80046ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	68f9      	ldr	r1, [r7, #12]
 80046d6:	69b8      	ldr	r0, [r7, #24]
 80046d8:	f001 f9fc 	bl	8005ad4 <pxPortInitialiseStack>
 80046dc:	4602      	mov	r2, r0
 80046de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80046e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80046e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046ee:	bf00      	nop
 80046f0:	3720      	adds	r7, #32
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004700:	f001 fad2 	bl	8005ca8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004704:	4b2d      	ldr	r3, [pc, #180]	; (80047bc <prvAddNewTaskToReadyList+0xc4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3301      	adds	r3, #1
 800470a:	4a2c      	ldr	r2, [pc, #176]	; (80047bc <prvAddNewTaskToReadyList+0xc4>)
 800470c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800470e:	4b2c      	ldr	r3, [pc, #176]	; (80047c0 <prvAddNewTaskToReadyList+0xc8>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d109      	bne.n	800472a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004716:	4a2a      	ldr	r2, [pc, #168]	; (80047c0 <prvAddNewTaskToReadyList+0xc8>)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800471c:	4b27      	ldr	r3, [pc, #156]	; (80047bc <prvAddNewTaskToReadyList+0xc4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d110      	bne.n	8004746 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004724:	f000 fc2a 	bl	8004f7c <prvInitialiseTaskLists>
 8004728:	e00d      	b.n	8004746 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800472a:	4b26      	ldr	r3, [pc, #152]	; (80047c4 <prvAddNewTaskToReadyList+0xcc>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d109      	bne.n	8004746 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004732:	4b23      	ldr	r3, [pc, #140]	; (80047c0 <prvAddNewTaskToReadyList+0xc8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473c:	429a      	cmp	r2, r3
 800473e:	d802      	bhi.n	8004746 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004740:	4a1f      	ldr	r2, [pc, #124]	; (80047c0 <prvAddNewTaskToReadyList+0xc8>)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004746:	4b20      	ldr	r3, [pc, #128]	; (80047c8 <prvAddNewTaskToReadyList+0xd0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3301      	adds	r3, #1
 800474c:	4a1e      	ldr	r2, [pc, #120]	; (80047c8 <prvAddNewTaskToReadyList+0xd0>)
 800474e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004750:	4b1d      	ldr	r3, [pc, #116]	; (80047c8 <prvAddNewTaskToReadyList+0xd0>)
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800475c:	4b1b      	ldr	r3, [pc, #108]	; (80047cc <prvAddNewTaskToReadyList+0xd4>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	429a      	cmp	r2, r3
 8004762:	d903      	bls.n	800476c <prvAddNewTaskToReadyList+0x74>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	4a18      	ldr	r2, [pc, #96]	; (80047cc <prvAddNewTaskToReadyList+0xd4>)
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004770:	4613      	mov	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4a15      	ldr	r2, [pc, #84]	; (80047d0 <prvAddNewTaskToReadyList+0xd8>)
 800477a:	441a      	add	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3304      	adds	r3, #4
 8004780:	4619      	mov	r1, r3
 8004782:	4610      	mov	r0, r2
 8004784:	f7fe fd6b 	bl	800325e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004788:	f001 fabc 	bl	8005d04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800478c:	4b0d      	ldr	r3, [pc, #52]	; (80047c4 <prvAddNewTaskToReadyList+0xcc>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00e      	beq.n	80047b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004794:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <prvAddNewTaskToReadyList+0xc8>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479e:	429a      	cmp	r2, r3
 80047a0:	d207      	bcs.n	80047b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80047a2:	4b0c      	ldr	r3, [pc, #48]	; (80047d4 <prvAddNewTaskToReadyList+0xdc>)
 80047a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047b2:	bf00      	nop
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	20000bdc 	.word	0x20000bdc
 80047c0:	20000708 	.word	0x20000708
 80047c4:	20000be8 	.word	0x20000be8
 80047c8:	20000bf8 	.word	0x20000bf8
 80047cc:	20000be4 	.word	0x20000be4
 80047d0:	2000070c 	.word	0x2000070c
 80047d4:	e000ed04 	.word	0xe000ed04

080047d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d016      	beq.n	8004818 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80047ea:	4b13      	ldr	r3, [pc, #76]	; (8004838 <vTaskDelay+0x60>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d009      	beq.n	8004806 <vTaskDelay+0x2e>
 80047f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f6:	f383 8811 	msr	BASEPRI, r3
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	60bb      	str	r3, [r7, #8]
 8004804:	e7fe      	b.n	8004804 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004806:	f000 f881 	bl	800490c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800480a:	2100      	movs	r1, #0
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 fe03 	bl	8005418 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004812:	f000 f889 	bl	8004928 <xTaskResumeAll>
 8004816:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d107      	bne.n	800482e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800481e:	4b07      	ldr	r3, [pc, #28]	; (800483c <vTaskDelay+0x64>)
 8004820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800482e:	bf00      	nop
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20000c04 	.word	0x20000c04
 800483c:	e000ed04 	.word	0xe000ed04

08004840 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08a      	sub	sp, #40	; 0x28
 8004844:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004846:	2300      	movs	r3, #0
 8004848:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800484a:	2300      	movs	r3, #0
 800484c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800484e:	463a      	mov	r2, r7
 8004850:	1d39      	adds	r1, r7, #4
 8004852:	f107 0308 	add.w	r3, r7, #8
 8004856:	4618      	mov	r0, r3
 8004858:	f7fe fca4 	bl	80031a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800485c:	6839      	ldr	r1, [r7, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	9202      	str	r2, [sp, #8]
 8004864:	9301      	str	r3, [sp, #4]
 8004866:	2300      	movs	r3, #0
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	2300      	movs	r3, #0
 800486c:	460a      	mov	r2, r1
 800486e:	4921      	ldr	r1, [pc, #132]	; (80048f4 <vTaskStartScheduler+0xb4>)
 8004870:	4821      	ldr	r0, [pc, #132]	; (80048f8 <vTaskStartScheduler+0xb8>)
 8004872:	f7ff fe19 	bl	80044a8 <xTaskCreateStatic>
 8004876:	4602      	mov	r2, r0
 8004878:	4b20      	ldr	r3, [pc, #128]	; (80048fc <vTaskStartScheduler+0xbc>)
 800487a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800487c:	4b1f      	ldr	r3, [pc, #124]	; (80048fc <vTaskStartScheduler+0xbc>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004884:	2301      	movs	r3, #1
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	e001      	b.n	800488e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800488a:	2300      	movs	r3, #0
 800488c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d102      	bne.n	800489a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004894:	f000 fe14 	bl	80054c0 <xTimerCreateTimerTask>
 8004898:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d117      	bne.n	80048d0 <vTaskStartScheduler+0x90>
 80048a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80048b2:	4b13      	ldr	r3, [pc, #76]	; (8004900 <vTaskStartScheduler+0xc0>)
 80048b4:	f04f 32ff 	mov.w	r2, #4294967295
 80048b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80048ba:	4b12      	ldr	r3, [pc, #72]	; (8004904 <vTaskStartScheduler+0xc4>)
 80048bc:	2201      	movs	r2, #1
 80048be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80048c0:	4b11      	ldr	r3, [pc, #68]	; (8004908 <vTaskStartScheduler+0xc8>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80048c6:	f7fb fc43 	bl	8000150 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80048ca:	f001 f97d 	bl	8005bc8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80048ce:	e00d      	b.n	80048ec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d6:	d109      	bne.n	80048ec <vTaskStartScheduler+0xac>
 80048d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048dc:	f383 8811 	msr	BASEPRI, r3
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	e7fe      	b.n	80048ea <vTaskStartScheduler+0xaa>
}
 80048ec:	bf00      	nop
 80048ee:	3718      	adds	r7, #24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	08006308 	.word	0x08006308
 80048f8:	08004f4d 	.word	0x08004f4d
 80048fc:	20000c00 	.word	0x20000c00
 8004900:	20000bfc 	.word	0x20000bfc
 8004904:	20000be8 	.word	0x20000be8
 8004908:	20000be0 	.word	0x20000be0

0800490c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004910:	4b04      	ldr	r3, [pc, #16]	; (8004924 <vTaskSuspendAll+0x18>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3301      	adds	r3, #1
 8004916:	4a03      	ldr	r2, [pc, #12]	; (8004924 <vTaskSuspendAll+0x18>)
 8004918:	6013      	str	r3, [r2, #0]
}
 800491a:	bf00      	nop
 800491c:	46bd      	mov	sp, r7
 800491e:	bc80      	pop	{r7}
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	20000c04 	.word	0x20000c04

08004928 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800492e:	2300      	movs	r3, #0
 8004930:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004932:	2300      	movs	r3, #0
 8004934:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004936:	4b41      	ldr	r3, [pc, #260]	; (8004a3c <xTaskResumeAll+0x114>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d109      	bne.n	8004952 <xTaskResumeAll+0x2a>
 800493e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	603b      	str	r3, [r7, #0]
 8004950:	e7fe      	b.n	8004950 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004952:	f001 f9a9 	bl	8005ca8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004956:	4b39      	ldr	r3, [pc, #228]	; (8004a3c <xTaskResumeAll+0x114>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3b01      	subs	r3, #1
 800495c:	4a37      	ldr	r2, [pc, #220]	; (8004a3c <xTaskResumeAll+0x114>)
 800495e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004960:	4b36      	ldr	r3, [pc, #216]	; (8004a3c <xTaskResumeAll+0x114>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d162      	bne.n	8004a2e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004968:	4b35      	ldr	r3, [pc, #212]	; (8004a40 <xTaskResumeAll+0x118>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d05e      	beq.n	8004a2e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004970:	e02f      	b.n	80049d2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004972:	4b34      	ldr	r3, [pc, #208]	; (8004a44 <xTaskResumeAll+0x11c>)
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3318      	adds	r3, #24
 800497e:	4618      	mov	r0, r3
 8004980:	f7fe fcc8 	bl	8003314 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	3304      	adds	r3, #4
 8004988:	4618      	mov	r0, r3
 800498a:	f7fe fcc3 	bl	8003314 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004992:	4b2d      	ldr	r3, [pc, #180]	; (8004a48 <xTaskResumeAll+0x120>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	429a      	cmp	r2, r3
 8004998:	d903      	bls.n	80049a2 <xTaskResumeAll+0x7a>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499e:	4a2a      	ldr	r2, [pc, #168]	; (8004a48 <xTaskResumeAll+0x120>)
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a6:	4613      	mov	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4413      	add	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4a27      	ldr	r2, [pc, #156]	; (8004a4c <xTaskResumeAll+0x124>)
 80049b0:	441a      	add	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	3304      	adds	r3, #4
 80049b6:	4619      	mov	r1, r3
 80049b8:	4610      	mov	r0, r2
 80049ba:	f7fe fc50 	bl	800325e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c2:	4b23      	ldr	r3, [pc, #140]	; (8004a50 <xTaskResumeAll+0x128>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d302      	bcc.n	80049d2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80049cc:	4b21      	ldr	r3, [pc, #132]	; (8004a54 <xTaskResumeAll+0x12c>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049d2:	4b1c      	ldr	r3, [pc, #112]	; (8004a44 <xTaskResumeAll+0x11c>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1cb      	bne.n	8004972 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80049e0:	f000 fb66 	bl	80050b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80049e4:	4b1c      	ldr	r3, [pc, #112]	; (8004a58 <xTaskResumeAll+0x130>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d010      	beq.n	8004a12 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80049f0:	f000 f844 	bl	8004a7c <xTaskIncrementTick>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80049fa:	4b16      	ldr	r3, [pc, #88]	; (8004a54 <xTaskResumeAll+0x12c>)
 80049fc:	2201      	movs	r2, #1
 80049fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1f1      	bne.n	80049f0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004a0c:	4b12      	ldr	r3, [pc, #72]	; (8004a58 <xTaskResumeAll+0x130>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a12:	4b10      	ldr	r3, [pc, #64]	; (8004a54 <xTaskResumeAll+0x12c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d009      	beq.n	8004a2e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a1e:	4b0f      	ldr	r3, [pc, #60]	; (8004a5c <xTaskResumeAll+0x134>)
 8004a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a2e:	f001 f969 	bl	8005d04 <vPortExitCritical>

	return xAlreadyYielded;
 8004a32:	68bb      	ldr	r3, [r7, #8]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	20000c04 	.word	0x20000c04
 8004a40:	20000bdc 	.word	0x20000bdc
 8004a44:	20000b9c 	.word	0x20000b9c
 8004a48:	20000be4 	.word	0x20000be4
 8004a4c:	2000070c 	.word	0x2000070c
 8004a50:	20000708 	.word	0x20000708
 8004a54:	20000bf0 	.word	0x20000bf0
 8004a58:	20000bec 	.word	0x20000bec
 8004a5c:	e000ed04 	.word	0xe000ed04

08004a60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004a66:	4b04      	ldr	r3, [pc, #16]	; (8004a78 <xTaskGetTickCount+0x18>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004a6c:	687b      	ldr	r3, [r7, #4]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr
 8004a78:	20000be0 	.word	0x20000be0

08004a7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a86:	4b51      	ldr	r3, [pc, #324]	; (8004bcc <xTaskIncrementTick+0x150>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f040 808d 	bne.w	8004baa <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a90:	4b4f      	ldr	r3, [pc, #316]	; (8004bd0 <xTaskIncrementTick+0x154>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3301      	adds	r3, #1
 8004a96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a98:	4a4d      	ldr	r2, [pc, #308]	; (8004bd0 <xTaskIncrementTick+0x154>)
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d11f      	bne.n	8004ae4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004aa4:	4b4b      	ldr	r3, [pc, #300]	; (8004bd4 <xTaskIncrementTick+0x158>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d009      	beq.n	8004ac2 <xTaskIncrementTick+0x46>
 8004aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab2:	f383 8811 	msr	BASEPRI, r3
 8004ab6:	f3bf 8f6f 	isb	sy
 8004aba:	f3bf 8f4f 	dsb	sy
 8004abe:	603b      	str	r3, [r7, #0]
 8004ac0:	e7fe      	b.n	8004ac0 <xTaskIncrementTick+0x44>
 8004ac2:	4b44      	ldr	r3, [pc, #272]	; (8004bd4 <xTaskIncrementTick+0x158>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	4b43      	ldr	r3, [pc, #268]	; (8004bd8 <xTaskIncrementTick+0x15c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a41      	ldr	r2, [pc, #260]	; (8004bd4 <xTaskIncrementTick+0x158>)
 8004ace:	6013      	str	r3, [r2, #0]
 8004ad0:	4a41      	ldr	r2, [pc, #260]	; (8004bd8 <xTaskIncrementTick+0x15c>)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	4b41      	ldr	r3, [pc, #260]	; (8004bdc <xTaskIncrementTick+0x160>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3301      	adds	r3, #1
 8004adc:	4a3f      	ldr	r2, [pc, #252]	; (8004bdc <xTaskIncrementTick+0x160>)
 8004ade:	6013      	str	r3, [r2, #0]
 8004ae0:	f000 fae6 	bl	80050b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ae4:	4b3e      	ldr	r3, [pc, #248]	; (8004be0 <xTaskIncrementTick+0x164>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d34e      	bcc.n	8004b8c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004aee:	4b39      	ldr	r3, [pc, #228]	; (8004bd4 <xTaskIncrementTick+0x158>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <xTaskIncrementTick+0x80>
 8004af8:	2301      	movs	r3, #1
 8004afa:	e000      	b.n	8004afe <xTaskIncrementTick+0x82>
 8004afc:	2300      	movs	r3, #0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d004      	beq.n	8004b0c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b02:	4b37      	ldr	r3, [pc, #220]	; (8004be0 <xTaskIncrementTick+0x164>)
 8004b04:	f04f 32ff 	mov.w	r2, #4294967295
 8004b08:	601a      	str	r2, [r3, #0]
					break;
 8004b0a:	e03f      	b.n	8004b8c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b0c:	4b31      	ldr	r3, [pc, #196]	; (8004bd4 <xTaskIncrementTick+0x158>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d203      	bcs.n	8004b2c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b24:	4a2e      	ldr	r2, [pc, #184]	; (8004be0 <xTaskIncrementTick+0x164>)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6013      	str	r3, [r2, #0]
						break;
 8004b2a:	e02f      	b.n	8004b8c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fe fbef 	bl	8003314 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d004      	beq.n	8004b48 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	3318      	adds	r3, #24
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fe fbe6 	bl	8003314 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b4c:	4b25      	ldr	r3, [pc, #148]	; (8004be4 <xTaskIncrementTick+0x168>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d903      	bls.n	8004b5c <xTaskIncrementTick+0xe0>
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	4a22      	ldr	r2, [pc, #136]	; (8004be4 <xTaskIncrementTick+0x168>)
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4a1f      	ldr	r2, [pc, #124]	; (8004be8 <xTaskIncrementTick+0x16c>)
 8004b6a:	441a      	add	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	3304      	adds	r3, #4
 8004b70:	4619      	mov	r1, r3
 8004b72:	4610      	mov	r0, r2
 8004b74:	f7fe fb73 	bl	800325e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b7c:	4b1b      	ldr	r3, [pc, #108]	; (8004bec <xTaskIncrementTick+0x170>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d3b3      	bcc.n	8004aee <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004b86:	2301      	movs	r3, #1
 8004b88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b8a:	e7b0      	b.n	8004aee <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b8c:	4b17      	ldr	r3, [pc, #92]	; (8004bec <xTaskIncrementTick+0x170>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b92:	4915      	ldr	r1, [pc, #84]	; (8004be8 <xTaskIncrementTick+0x16c>)
 8004b94:	4613      	mov	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d907      	bls.n	8004bb4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	e004      	b.n	8004bb4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004baa:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <xTaskIncrementTick+0x174>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	4a0f      	ldr	r2, [pc, #60]	; (8004bf0 <xTaskIncrementTick+0x174>)
 8004bb2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004bb4:	4b0f      	ldr	r3, [pc, #60]	; (8004bf4 <xTaskIncrementTick+0x178>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004bc0:	697b      	ldr	r3, [r7, #20]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3718      	adds	r7, #24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	20000c04 	.word	0x20000c04
 8004bd0:	20000be0 	.word	0x20000be0
 8004bd4:	20000b94 	.word	0x20000b94
 8004bd8:	20000b98 	.word	0x20000b98
 8004bdc:	20000bf4 	.word	0x20000bf4
 8004be0:	20000bfc 	.word	0x20000bfc
 8004be4:	20000be4 	.word	0x20000be4
 8004be8:	2000070c 	.word	0x2000070c
 8004bec:	20000708 	.word	0x20000708
 8004bf0:	20000bec 	.word	0x20000bec
 8004bf4:	20000bf0 	.word	0x20000bf0

08004bf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004bfe:	4b33      	ldr	r3, [pc, #204]	; (8004ccc <vTaskSwitchContext+0xd4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c06:	4b32      	ldr	r3, [pc, #200]	; (8004cd0 <vTaskSwitchContext+0xd8>)
 8004c08:	2201      	movs	r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c0c:	e059      	b.n	8004cc2 <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8004c0e:	4b30      	ldr	r3, [pc, #192]	; (8004cd0 <vTaskSwitchContext+0xd8>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004c14:	f7fb faa2 	bl	800015c <getRunTimeCounterValue>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	4b2e      	ldr	r3, [pc, #184]	; (8004cd4 <vTaskSwitchContext+0xdc>)
 8004c1c:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8004c1e:	4b2d      	ldr	r3, [pc, #180]	; (8004cd4 <vTaskSwitchContext+0xdc>)
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	4b2d      	ldr	r3, [pc, #180]	; (8004cd8 <vTaskSwitchContext+0xe0>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d909      	bls.n	8004c3e <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8004c2a:	4b2c      	ldr	r3, [pc, #176]	; (8004cdc <vTaskSwitchContext+0xe4>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c30:	4a28      	ldr	r2, [pc, #160]	; (8004cd4 <vTaskSwitchContext+0xdc>)
 8004c32:	6810      	ldr	r0, [r2, #0]
 8004c34:	4a28      	ldr	r2, [pc, #160]	; (8004cd8 <vTaskSwitchContext+0xe0>)
 8004c36:	6812      	ldr	r2, [r2, #0]
 8004c38:	1a82      	subs	r2, r0, r2
 8004c3a:	440a      	add	r2, r1
 8004c3c:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 8004c3e:	4b25      	ldr	r3, [pc, #148]	; (8004cd4 <vTaskSwitchContext+0xdc>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a25      	ldr	r2, [pc, #148]	; (8004cd8 <vTaskSwitchContext+0xe0>)
 8004c44:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004c46:	4b26      	ldr	r3, [pc, #152]	; (8004ce0 <vTaskSwitchContext+0xe8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	e00f      	b.n	8004c6e <vTaskSwitchContext+0x76>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d109      	bne.n	8004c68 <vTaskSwitchContext+0x70>
 8004c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	607b      	str	r3, [r7, #4]
 8004c66:	e7fe      	b.n	8004c66 <vTaskSwitchContext+0x6e>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	491d      	ldr	r1, [pc, #116]	; (8004ce4 <vTaskSwitchContext+0xec>)
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	4613      	mov	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	440b      	add	r3, r1
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0e5      	beq.n	8004c4e <vTaskSwitchContext+0x56>
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4613      	mov	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4a15      	ldr	r2, [pc, #84]	; (8004ce4 <vTaskSwitchContext+0xec>)
 8004c8e:	4413      	add	r3, r2
 8004c90:	60bb      	str	r3, [r7, #8]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	605a      	str	r2, [r3, #4]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	3308      	adds	r3, #8
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d104      	bne.n	8004cb2 <vTaskSwitchContext+0xba>
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	605a      	str	r2, [r3, #4]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	4a08      	ldr	r2, [pc, #32]	; (8004cdc <vTaskSwitchContext+0xe4>)
 8004cba:	6013      	str	r3, [r2, #0]
 8004cbc:	4a08      	ldr	r2, [pc, #32]	; (8004ce0 <vTaskSwitchContext+0xe8>)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6013      	str	r3, [r2, #0]
}
 8004cc2:	bf00      	nop
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20000c04 	.word	0x20000c04
 8004cd0:	20000bf0 	.word	0x20000bf0
 8004cd4:	20000c0c 	.word	0x20000c0c
 8004cd8:	20000c08 	.word	0x20000c08
 8004cdc:	20000708 	.word	0x20000708
 8004ce0:	20000be4 	.word	0x20000be4
 8004ce4:	2000070c 	.word	0x2000070c

08004ce8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d109      	bne.n	8004d0c <vTaskPlaceOnEventList+0x24>
 8004cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	e7fe      	b.n	8004d0a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d0c:	4b07      	ldr	r3, [pc, #28]	; (8004d2c <vTaskPlaceOnEventList+0x44>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	3318      	adds	r3, #24
 8004d12:	4619      	mov	r1, r3
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7fe fac5 	bl	80032a4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	6838      	ldr	r0, [r7, #0]
 8004d1e:	f000 fb7b 	bl	8005418 <prvAddCurrentTaskToDelayedList>
}
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000708 	.word	0x20000708

08004d30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d109      	bne.n	8004d56 <vTaskPlaceOnEventListRestricted+0x26>
 8004d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	e7fe      	b.n	8004d54 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d56:	4b0a      	ldr	r3, [pc, #40]	; (8004d80 <vTaskPlaceOnEventListRestricted+0x50>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3318      	adds	r3, #24
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f7fe fa7d 	bl	800325e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d6e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	68b8      	ldr	r0, [r7, #8]
 8004d74:	f000 fb50 	bl	8005418 <prvAddCurrentTaskToDelayedList>
	}
 8004d78:	bf00      	nop
 8004d7a:	3718      	adds	r7, #24
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	20000708 	.word	0x20000708

08004d84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d109      	bne.n	8004dae <xTaskRemoveFromEventList+0x2a>
 8004d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	e7fe      	b.n	8004dac <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	3318      	adds	r3, #24
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fe faae 	bl	8003314 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004db8:	4b1d      	ldr	r3, [pc, #116]	; (8004e30 <xTaskRemoveFromEventList+0xac>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d11d      	bne.n	8004dfc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fe faa5 	bl	8003314 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dce:	4b19      	ldr	r3, [pc, #100]	; (8004e34 <xTaskRemoveFromEventList+0xb0>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d903      	bls.n	8004dde <xTaskRemoveFromEventList+0x5a>
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dda:	4a16      	ldr	r2, [pc, #88]	; (8004e34 <xTaskRemoveFromEventList+0xb0>)
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de2:	4613      	mov	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4a13      	ldr	r2, [pc, #76]	; (8004e38 <xTaskRemoveFromEventList+0xb4>)
 8004dec:	441a      	add	r2, r3
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	3304      	adds	r3, #4
 8004df2:	4619      	mov	r1, r3
 8004df4:	4610      	mov	r0, r2
 8004df6:	f7fe fa32 	bl	800325e <vListInsertEnd>
 8004dfa:	e005      	b.n	8004e08 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	3318      	adds	r3, #24
 8004e00:	4619      	mov	r1, r3
 8004e02:	480e      	ldr	r0, [pc, #56]	; (8004e3c <xTaskRemoveFromEventList+0xb8>)
 8004e04:	f7fe fa2b 	bl	800325e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e0c:	4b0c      	ldr	r3, [pc, #48]	; (8004e40 <xTaskRemoveFromEventList+0xbc>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d905      	bls.n	8004e22 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004e16:	2301      	movs	r3, #1
 8004e18:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004e1a:	4b0a      	ldr	r3, [pc, #40]	; (8004e44 <xTaskRemoveFromEventList+0xc0>)
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	e001      	b.n	8004e26 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004e26:	697b      	ldr	r3, [r7, #20]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3718      	adds	r7, #24
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	20000c04 	.word	0x20000c04
 8004e34:	20000be4 	.word	0x20000be4
 8004e38:	2000070c 	.word	0x2000070c
 8004e3c:	20000b9c 	.word	0x20000b9c
 8004e40:	20000708 	.word	0x20000708
 8004e44:	20000bf0 	.word	0x20000bf0

08004e48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e50:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <vTaskInternalSetTimeOutState+0x24>)
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004e58:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <vTaskInternalSetTimeOutState+0x28>)
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	605a      	str	r2, [r3, #4]
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc80      	pop	{r7}
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	20000bf4 	.word	0x20000bf4
 8004e70:	20000be0 	.word	0x20000be0

08004e74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b088      	sub	sp, #32
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d109      	bne.n	8004e98 <xTaskCheckForTimeOut+0x24>
 8004e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e88:	f383 8811 	msr	BASEPRI, r3
 8004e8c:	f3bf 8f6f 	isb	sy
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	613b      	str	r3, [r7, #16]
 8004e96:	e7fe      	b.n	8004e96 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d109      	bne.n	8004eb2 <xTaskCheckForTimeOut+0x3e>
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	e7fe      	b.n	8004eb0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004eb2:	f000 fef9 	bl	8005ca8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004eb6:	4b1d      	ldr	r3, [pc, #116]	; (8004f2c <xTaskCheckForTimeOut+0xb8>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ece:	d102      	bne.n	8004ed6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	61fb      	str	r3, [r7, #28]
 8004ed4:	e023      	b.n	8004f1e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	4b15      	ldr	r3, [pc, #84]	; (8004f30 <xTaskCheckForTimeOut+0xbc>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d007      	beq.n	8004ef2 <xTaskCheckForTimeOut+0x7e>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d302      	bcc.n	8004ef2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004eec:	2301      	movs	r3, #1
 8004eee:	61fb      	str	r3, [r7, #28]
 8004ef0:	e015      	b.n	8004f1e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d20b      	bcs.n	8004f14 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	1ad2      	subs	r2, r2, r3
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7ff ff9d 	bl	8004e48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61fb      	str	r3, [r7, #28]
 8004f12:	e004      	b.n	8004f1e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2200      	movs	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004f1e:	f000 fef1 	bl	8005d04 <vPortExitCritical>

	return xReturn;
 8004f22:	69fb      	ldr	r3, [r7, #28]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3720      	adds	r7, #32
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	20000be0 	.word	0x20000be0
 8004f30:	20000bf4 	.word	0x20000bf4

08004f34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004f38:	4b03      	ldr	r3, [pc, #12]	; (8004f48 <vTaskMissedYield+0x14>)
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]
}
 8004f3e:	bf00      	nop
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bc80      	pop	{r7}
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	20000bf0 	.word	0x20000bf0

08004f4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f54:	f000 f852 	bl	8004ffc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f58:	4b06      	ldr	r3, [pc, #24]	; (8004f74 <prvIdleTask+0x28>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d9f9      	bls.n	8004f54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f60:	4b05      	ldr	r3, [pc, #20]	; (8004f78 <prvIdleTask+0x2c>)
 8004f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f66:	601a      	str	r2, [r3, #0]
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004f70:	e7f0      	b.n	8004f54 <prvIdleTask+0x8>
 8004f72:	bf00      	nop
 8004f74:	2000070c 	.word	0x2000070c
 8004f78:	e000ed04 	.word	0xe000ed04

08004f7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f82:	2300      	movs	r3, #0
 8004f84:	607b      	str	r3, [r7, #4]
 8004f86:	e00c      	b.n	8004fa2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4a12      	ldr	r2, [pc, #72]	; (8004fdc <prvInitialiseTaskLists+0x60>)
 8004f94:	4413      	add	r3, r2
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fe f936 	bl	8003208 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	607b      	str	r3, [r7, #4]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b37      	cmp	r3, #55	; 0x37
 8004fa6:	d9ef      	bls.n	8004f88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004fa8:	480d      	ldr	r0, [pc, #52]	; (8004fe0 <prvInitialiseTaskLists+0x64>)
 8004faa:	f7fe f92d 	bl	8003208 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004fae:	480d      	ldr	r0, [pc, #52]	; (8004fe4 <prvInitialiseTaskLists+0x68>)
 8004fb0:	f7fe f92a 	bl	8003208 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004fb4:	480c      	ldr	r0, [pc, #48]	; (8004fe8 <prvInitialiseTaskLists+0x6c>)
 8004fb6:	f7fe f927 	bl	8003208 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004fba:	480c      	ldr	r0, [pc, #48]	; (8004fec <prvInitialiseTaskLists+0x70>)
 8004fbc:	f7fe f924 	bl	8003208 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004fc0:	480b      	ldr	r0, [pc, #44]	; (8004ff0 <prvInitialiseTaskLists+0x74>)
 8004fc2:	f7fe f921 	bl	8003208 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004fc6:	4b0b      	ldr	r3, [pc, #44]	; (8004ff4 <prvInitialiseTaskLists+0x78>)
 8004fc8:	4a05      	ldr	r2, [pc, #20]	; (8004fe0 <prvInitialiseTaskLists+0x64>)
 8004fca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004fcc:	4b0a      	ldr	r3, [pc, #40]	; (8004ff8 <prvInitialiseTaskLists+0x7c>)
 8004fce:	4a05      	ldr	r2, [pc, #20]	; (8004fe4 <prvInitialiseTaskLists+0x68>)
 8004fd0:	601a      	str	r2, [r3, #0]
}
 8004fd2:	bf00      	nop
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	2000070c 	.word	0x2000070c
 8004fe0:	20000b6c 	.word	0x20000b6c
 8004fe4:	20000b80 	.word	0x20000b80
 8004fe8:	20000b9c 	.word	0x20000b9c
 8004fec:	20000bb0 	.word	0x20000bb0
 8004ff0:	20000bc8 	.word	0x20000bc8
 8004ff4:	20000b94 	.word	0x20000b94
 8004ff8:	20000b98 	.word	0x20000b98

08004ffc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005002:	e019      	b.n	8005038 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005004:	f000 fe50 	bl	8005ca8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005008:	4b0f      	ldr	r3, [pc, #60]	; (8005048 <prvCheckTasksWaitingTermination+0x4c>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3304      	adds	r3, #4
 8005014:	4618      	mov	r0, r3
 8005016:	f7fe f97d 	bl	8003314 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800501a:	4b0c      	ldr	r3, [pc, #48]	; (800504c <prvCheckTasksWaitingTermination+0x50>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3b01      	subs	r3, #1
 8005020:	4a0a      	ldr	r2, [pc, #40]	; (800504c <prvCheckTasksWaitingTermination+0x50>)
 8005022:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005024:	4b0a      	ldr	r3, [pc, #40]	; (8005050 <prvCheckTasksWaitingTermination+0x54>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3b01      	subs	r3, #1
 800502a:	4a09      	ldr	r2, [pc, #36]	; (8005050 <prvCheckTasksWaitingTermination+0x54>)
 800502c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800502e:	f000 fe69 	bl	8005d04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f80e 	bl	8005054 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005038:	4b05      	ldr	r3, [pc, #20]	; (8005050 <prvCheckTasksWaitingTermination+0x54>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1e1      	bne.n	8005004 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005040:	bf00      	nop
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	20000bb0 	.word	0x20000bb0
 800504c:	20000bdc 	.word	0x20000bdc
 8005050:	20000bc4 	.word	0x20000bc4

08005054 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005062:	2b00      	cmp	r3, #0
 8005064:	d108      	bne.n	8005078 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506a:	4618      	mov	r0, r3
 800506c:	f000 ffd4 	bl	8006018 <vPortFree>
				vPortFree( pxTCB );
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 ffd1 	bl	8006018 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005076:	e017      	b.n	80050a8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800507e:	2b01      	cmp	r3, #1
 8005080:	d103      	bne.n	800508a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 ffc8 	bl	8006018 <vPortFree>
	}
 8005088:	e00e      	b.n	80050a8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005090:	2b02      	cmp	r3, #2
 8005092:	d009      	beq.n	80050a8 <prvDeleteTCB+0x54>
 8005094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	e7fe      	b.n	80050a6 <prvDeleteTCB+0x52>
	}
 80050a8:	bf00      	nop
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050b6:	4b0e      	ldr	r3, [pc, #56]	; (80050f0 <prvResetNextTaskUnblockTime+0x40>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d101      	bne.n	80050c4 <prvResetNextTaskUnblockTime+0x14>
 80050c0:	2301      	movs	r3, #1
 80050c2:	e000      	b.n	80050c6 <prvResetNextTaskUnblockTime+0x16>
 80050c4:	2300      	movs	r3, #0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d004      	beq.n	80050d4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80050ca:	4b0a      	ldr	r3, [pc, #40]	; (80050f4 <prvResetNextTaskUnblockTime+0x44>)
 80050cc:	f04f 32ff 	mov.w	r2, #4294967295
 80050d0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80050d2:	e008      	b.n	80050e6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80050d4:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <prvResetNextTaskUnblockTime+0x40>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	4a04      	ldr	r2, [pc, #16]	; (80050f4 <prvResetNextTaskUnblockTime+0x44>)
 80050e4:	6013      	str	r3, [r2, #0]
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bc80      	pop	{r7}
 80050ee:	4770      	bx	lr
 80050f0:	20000b94 	.word	0x20000b94
 80050f4:	20000bfc 	.word	0x20000bfc

080050f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80050fe:	4b0b      	ldr	r3, [pc, #44]	; (800512c <xTaskGetSchedulerState+0x34>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d102      	bne.n	800510c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005106:	2301      	movs	r3, #1
 8005108:	607b      	str	r3, [r7, #4]
 800510a:	e008      	b.n	800511e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800510c:	4b08      	ldr	r3, [pc, #32]	; (8005130 <xTaskGetSchedulerState+0x38>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d102      	bne.n	800511a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005114:	2302      	movs	r3, #2
 8005116:	607b      	str	r3, [r7, #4]
 8005118:	e001      	b.n	800511e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800511a:	2300      	movs	r3, #0
 800511c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800511e:	687b      	ldr	r3, [r7, #4]
	}
 8005120:	4618      	mov	r0, r3
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	bc80      	pop	{r7}
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	20000be8 	.word	0x20000be8
 8005130:	20000c04 	.word	0x20000c04

08005134 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005140:	2300      	movs	r3, #0
 8005142:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d056      	beq.n	80051f8 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800514e:	4b2d      	ldr	r3, [pc, #180]	; (8005204 <xTaskPriorityInherit+0xd0>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	429a      	cmp	r2, r3
 8005156:	d246      	bcs.n	80051e6 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	2b00      	cmp	r3, #0
 800515e:	db06      	blt.n	800516e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005160:	4b28      	ldr	r3, [pc, #160]	; (8005204 <xTaskPriorityInherit+0xd0>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005166:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	6959      	ldr	r1, [r3, #20]
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005176:	4613      	mov	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4a22      	ldr	r2, [pc, #136]	; (8005208 <xTaskPriorityInherit+0xd4>)
 8005180:	4413      	add	r3, r2
 8005182:	4299      	cmp	r1, r3
 8005184:	d101      	bne.n	800518a <xTaskPriorityInherit+0x56>
 8005186:	2301      	movs	r3, #1
 8005188:	e000      	b.n	800518c <xTaskPriorityInherit+0x58>
 800518a:	2300      	movs	r3, #0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d022      	beq.n	80051d6 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	3304      	adds	r3, #4
 8005194:	4618      	mov	r0, r3
 8005196:	f7fe f8bd 	bl	8003314 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800519a:	4b1a      	ldr	r3, [pc, #104]	; (8005204 <xTaskPriorityInherit+0xd0>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a8:	4b18      	ldr	r3, [pc, #96]	; (800520c <xTaskPriorityInherit+0xd8>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d903      	bls.n	80051b8 <xTaskPriorityInherit+0x84>
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	4a15      	ldr	r2, [pc, #84]	; (800520c <xTaskPriorityInherit+0xd8>)
 80051b6:	6013      	str	r3, [r2, #0]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051bc:	4613      	mov	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4a10      	ldr	r2, [pc, #64]	; (8005208 <xTaskPriorityInherit+0xd4>)
 80051c6:	441a      	add	r2, r3
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	3304      	adds	r3, #4
 80051cc:	4619      	mov	r1, r3
 80051ce:	4610      	mov	r0, r2
 80051d0:	f7fe f845 	bl	800325e <vListInsertEnd>
 80051d4:	e004      	b.n	80051e0 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80051d6:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <xTaskPriorityInherit+0xd0>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80051e0:	2301      	movs	r3, #1
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	e008      	b.n	80051f8 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051ea:	4b06      	ldr	r3, [pc, #24]	; (8005204 <xTaskPriorityInherit+0xd0>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d201      	bcs.n	80051f8 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80051f4:	2301      	movs	r3, #1
 80051f6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80051f8:	68fb      	ldr	r3, [r7, #12]
	}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	20000708 	.word	0x20000708
 8005208:	2000070c 	.word	0x2000070c
 800520c:	20000be4 	.word	0x20000be4

08005210 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d054      	beq.n	80052d0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005226:	4b2d      	ldr	r3, [pc, #180]	; (80052dc <xTaskPriorityDisinherit+0xcc>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	429a      	cmp	r2, r3
 800522e:	d009      	beq.n	8005244 <xTaskPriorityDisinherit+0x34>
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	e7fe      	b.n	8005242 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005248:	2b00      	cmp	r3, #0
 800524a:	d109      	bne.n	8005260 <xTaskPriorityDisinherit+0x50>
 800524c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	60bb      	str	r3, [r7, #8]
 800525e:	e7fe      	b.n	800525e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005264:	1e5a      	subs	r2, r3, #1
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005272:	429a      	cmp	r2, r3
 8005274:	d02c      	beq.n	80052d0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800527a:	2b00      	cmp	r3, #0
 800527c:	d128      	bne.n	80052d0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	3304      	adds	r3, #4
 8005282:	4618      	mov	r0, r3
 8005284:	f7fe f846 	bl	8003314 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005294:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a0:	4b0f      	ldr	r3, [pc, #60]	; (80052e0 <xTaskPriorityDisinherit+0xd0>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d903      	bls.n	80052b0 <xTaskPriorityDisinherit+0xa0>
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ac:	4a0c      	ldr	r2, [pc, #48]	; (80052e0 <xTaskPriorityDisinherit+0xd0>)
 80052ae:	6013      	str	r3, [r2, #0]
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b4:	4613      	mov	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4413      	add	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4a09      	ldr	r2, [pc, #36]	; (80052e4 <xTaskPriorityDisinherit+0xd4>)
 80052be:	441a      	add	r2, r3
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	3304      	adds	r3, #4
 80052c4:	4619      	mov	r1, r3
 80052c6:	4610      	mov	r0, r2
 80052c8:	f7fd ffc9 	bl	800325e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052cc:	2301      	movs	r3, #1
 80052ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052d0:	697b      	ldr	r3, [r7, #20]
	}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3718      	adds	r7, #24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	20000708 	.word	0x20000708
 80052e0:	20000be4 	.word	0x20000be4
 80052e4:	2000070c 	.word	0x2000070c

080052e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b088      	sub	sp, #32
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80052f6:	2301      	movs	r3, #1
 80052f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d06d      	beq.n	80053dc <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005304:	2b00      	cmp	r3, #0
 8005306:	d109      	bne.n	800531c <vTaskPriorityDisinheritAfterTimeout+0x34>
 8005308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530c:	f383 8811 	msr	BASEPRI, r3
 8005310:	f3bf 8f6f 	isb	sy
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	60fb      	str	r3, [r7, #12]
 800531a:	e7fe      	b.n	800531a <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	429a      	cmp	r2, r3
 8005324:	d902      	bls.n	800532c <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	61fb      	str	r3, [r7, #28]
 800532a:	e002      	b.n	8005332 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005330:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005336:	69fa      	ldr	r2, [r7, #28]
 8005338:	429a      	cmp	r2, r3
 800533a:	d04f      	beq.n	80053dc <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	429a      	cmp	r2, r3
 8005344:	d14a      	bne.n	80053dc <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005346:	4b27      	ldr	r3, [pc, #156]	; (80053e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	429a      	cmp	r2, r3
 800534e:	d109      	bne.n	8005364 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8005350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	60bb      	str	r3, [r7, #8]
 8005362:	e7fe      	b.n	8005362 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	69fa      	ldr	r2, [r7, #28]
 800536e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	2b00      	cmp	r3, #0
 8005376:	db04      	blt.n	8005382 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	6959      	ldr	r1, [r3, #20]
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	4613      	mov	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4a15      	ldr	r2, [pc, #84]	; (80053e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005392:	4413      	add	r3, r2
 8005394:	4299      	cmp	r1, r3
 8005396:	d101      	bne.n	800539c <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8005398:	2301      	movs	r3, #1
 800539a:	e000      	b.n	800539e <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800539c:	2300      	movs	r3, #0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d01c      	beq.n	80053dc <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	3304      	adds	r3, #4
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7fd ffb4 	bl	8003314 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b0:	4b0e      	ldr	r3, [pc, #56]	; (80053ec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d903      	bls.n	80053c0 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053bc:	4a0b      	ldr	r2, [pc, #44]	; (80053ec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c4:	4613      	mov	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4a06      	ldr	r2, [pc, #24]	; (80053e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80053ce:	441a      	add	r2, r3
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	3304      	adds	r3, #4
 80053d4:	4619      	mov	r1, r3
 80053d6:	4610      	mov	r0, r2
 80053d8:	f7fd ff41 	bl	800325e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053dc:	bf00      	nop
 80053de:	3720      	adds	r7, #32
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	20000708 	.word	0x20000708
 80053e8:	2000070c 	.word	0x2000070c
 80053ec:	20000be4 	.word	0x20000be4

080053f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80053f4:	4b07      	ldr	r3, [pc, #28]	; (8005414 <pvTaskIncrementMutexHeldCount+0x24>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d004      	beq.n	8005406 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80053fc:	4b05      	ldr	r3, [pc, #20]	; (8005414 <pvTaskIncrementMutexHeldCount+0x24>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005402:	3201      	adds	r2, #1
 8005404:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005406:	4b03      	ldr	r3, [pc, #12]	; (8005414 <pvTaskIncrementMutexHeldCount+0x24>)
 8005408:	681b      	ldr	r3, [r3, #0]
	}
 800540a:	4618      	mov	r0, r3
 800540c:	46bd      	mov	sp, r7
 800540e:	bc80      	pop	{r7}
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	20000708 	.word	0x20000708

08005418 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005422:	4b21      	ldr	r3, [pc, #132]	; (80054a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005428:	4b20      	ldr	r3, [pc, #128]	; (80054ac <prvAddCurrentTaskToDelayedList+0x94>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3304      	adds	r3, #4
 800542e:	4618      	mov	r0, r3
 8005430:	f7fd ff70 	bl	8003314 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543a:	d10a      	bne.n	8005452 <prvAddCurrentTaskToDelayedList+0x3a>
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d007      	beq.n	8005452 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005442:	4b1a      	ldr	r3, [pc, #104]	; (80054ac <prvAddCurrentTaskToDelayedList+0x94>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3304      	adds	r3, #4
 8005448:	4619      	mov	r1, r3
 800544a:	4819      	ldr	r0, [pc, #100]	; (80054b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800544c:	f7fd ff07 	bl	800325e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005450:	e026      	b.n	80054a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4413      	add	r3, r2
 8005458:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800545a:	4b14      	ldr	r3, [pc, #80]	; (80054ac <prvAddCurrentTaskToDelayedList+0x94>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	429a      	cmp	r2, r3
 8005468:	d209      	bcs.n	800547e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800546a:	4b12      	ldr	r3, [pc, #72]	; (80054b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	4b0f      	ldr	r3, [pc, #60]	; (80054ac <prvAddCurrentTaskToDelayedList+0x94>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3304      	adds	r3, #4
 8005474:	4619      	mov	r1, r3
 8005476:	4610      	mov	r0, r2
 8005478:	f7fd ff14 	bl	80032a4 <vListInsert>
}
 800547c:	e010      	b.n	80054a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800547e:	4b0e      	ldr	r3, [pc, #56]	; (80054b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	4b0a      	ldr	r3, [pc, #40]	; (80054ac <prvAddCurrentTaskToDelayedList+0x94>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3304      	adds	r3, #4
 8005488:	4619      	mov	r1, r3
 800548a:	4610      	mov	r0, r2
 800548c:	f7fd ff0a 	bl	80032a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005490:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	429a      	cmp	r2, r3
 8005498:	d202      	bcs.n	80054a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800549a:	4a08      	ldr	r2, [pc, #32]	; (80054bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	6013      	str	r3, [r2, #0]
}
 80054a0:	bf00      	nop
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	20000be0 	.word	0x20000be0
 80054ac:	20000708 	.word	0x20000708
 80054b0:	20000bc8 	.word	0x20000bc8
 80054b4:	20000b98 	.word	0x20000b98
 80054b8:	20000b94 	.word	0x20000b94
 80054bc:	20000bfc 	.word	0x20000bfc

080054c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b08a      	sub	sp, #40	; 0x28
 80054c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80054c6:	2300      	movs	r3, #0
 80054c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80054ca:	f000 fac3 	bl	8005a54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80054ce:	4b1c      	ldr	r3, [pc, #112]	; (8005540 <xTimerCreateTimerTask+0x80>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d021      	beq.n	800551a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80054d6:	2300      	movs	r3, #0
 80054d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80054da:	2300      	movs	r3, #0
 80054dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80054de:	1d3a      	adds	r2, r7, #4
 80054e0:	f107 0108 	add.w	r1, r7, #8
 80054e4:	f107 030c 	add.w	r3, r7, #12
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7fd fe73 	bl	80031d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80054ee:	6879      	ldr	r1, [r7, #4]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	9202      	str	r2, [sp, #8]
 80054f6:	9301      	str	r3, [sp, #4]
 80054f8:	2302      	movs	r3, #2
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	2300      	movs	r3, #0
 80054fe:	460a      	mov	r2, r1
 8005500:	4910      	ldr	r1, [pc, #64]	; (8005544 <xTimerCreateTimerTask+0x84>)
 8005502:	4811      	ldr	r0, [pc, #68]	; (8005548 <xTimerCreateTimerTask+0x88>)
 8005504:	f7fe ffd0 	bl	80044a8 <xTaskCreateStatic>
 8005508:	4602      	mov	r2, r0
 800550a:	4b10      	ldr	r3, [pc, #64]	; (800554c <xTimerCreateTimerTask+0x8c>)
 800550c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800550e:	4b0f      	ldr	r3, [pc, #60]	; (800554c <xTimerCreateTimerTask+0x8c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005516:	2301      	movs	r3, #1
 8005518:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d109      	bne.n	8005534 <xTimerCreateTimerTask+0x74>
 8005520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	613b      	str	r3, [r7, #16]
 8005532:	e7fe      	b.n	8005532 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005534:	697b      	ldr	r3, [r7, #20]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	20000c40 	.word	0x20000c40
 8005544:	08006310 	.word	0x08006310
 8005548:	08005669 	.word	0x08005669
 800554c:	20000c44 	.word	0x20000c44

08005550 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b08a      	sub	sp, #40	; 0x28
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800555e:	2300      	movs	r3, #0
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d109      	bne.n	800557c <xTimerGenericCommand+0x2c>
 8005568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556c:	f383 8811 	msr	BASEPRI, r3
 8005570:	f3bf 8f6f 	isb	sy
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	623b      	str	r3, [r7, #32]
 800557a:	e7fe      	b.n	800557a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800557c:	4b19      	ldr	r3, [pc, #100]	; (80055e4 <xTimerGenericCommand+0x94>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d02a      	beq.n	80055da <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b05      	cmp	r3, #5
 8005594:	dc18      	bgt.n	80055c8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005596:	f7ff fdaf 	bl	80050f8 <xTaskGetSchedulerState>
 800559a:	4603      	mov	r3, r0
 800559c:	2b02      	cmp	r3, #2
 800559e:	d109      	bne.n	80055b4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80055a0:	4b10      	ldr	r3, [pc, #64]	; (80055e4 <xTimerGenericCommand+0x94>)
 80055a2:	6818      	ldr	r0, [r3, #0]
 80055a4:	f107 0110 	add.w	r1, r7, #16
 80055a8:	2300      	movs	r3, #0
 80055aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ac:	f7fe f87c 	bl	80036a8 <xQueueGenericSend>
 80055b0:	6278      	str	r0, [r7, #36]	; 0x24
 80055b2:	e012      	b.n	80055da <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80055b4:	4b0b      	ldr	r3, [pc, #44]	; (80055e4 <xTimerGenericCommand+0x94>)
 80055b6:	6818      	ldr	r0, [r3, #0]
 80055b8:	f107 0110 	add.w	r1, r7, #16
 80055bc:	2300      	movs	r3, #0
 80055be:	2200      	movs	r2, #0
 80055c0:	f7fe f872 	bl	80036a8 <xQueueGenericSend>
 80055c4:	6278      	str	r0, [r7, #36]	; 0x24
 80055c6:	e008      	b.n	80055da <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80055c8:	4b06      	ldr	r3, [pc, #24]	; (80055e4 <xTimerGenericCommand+0x94>)
 80055ca:	6818      	ldr	r0, [r3, #0]
 80055cc:	f107 0110 	add.w	r1, r7, #16
 80055d0:	2300      	movs	r3, #0
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	f7fe f962 	bl	800389c <xQueueGenericSendFromISR>
 80055d8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3728      	adds	r7, #40	; 0x28
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	20000c40 	.word	0x20000c40

080055e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b088      	sub	sp, #32
 80055ec:	af02      	add	r7, sp, #8
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055f2:	4b1c      	ldr	r3, [pc, #112]	; (8005664 <prvProcessExpiredTimer+0x7c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	3304      	adds	r3, #4
 8005600:	4618      	mov	r0, r3
 8005602:	f7fd fe87 	bl	8003314 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d121      	bne.n	8005652 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	699a      	ldr	r2, [r3, #24]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	18d1      	adds	r1, r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	6978      	ldr	r0, [r7, #20]
 800561c:	f000 f8c8 	bl	80057b0 <prvInsertTimerInActiveList>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d015      	beq.n	8005652 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005626:	2300      	movs	r3, #0
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	2300      	movs	r3, #0
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	2100      	movs	r1, #0
 8005630:	6978      	ldr	r0, [r7, #20]
 8005632:	f7ff ff8d 	bl	8005550 <xTimerGenericCommand>
 8005636:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d109      	bne.n	8005652 <prvProcessExpiredTimer+0x6a>
 800563e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	e7fe      	b.n	8005650 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	6978      	ldr	r0, [r7, #20]
 8005658:	4798      	blx	r3
}
 800565a:	bf00      	nop
 800565c:	3718      	adds	r7, #24
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	20000c38 	.word	0x20000c38

08005668 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005670:	f107 0308 	add.w	r3, r7, #8
 8005674:	4618      	mov	r0, r3
 8005676:	f000 f857 	bl	8005728 <prvGetNextExpireTime>
 800567a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	4619      	mov	r1, r3
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 f803 	bl	800568c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005686:	f000 f8d5 	bl	8005834 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800568a:	e7f1      	b.n	8005670 <prvTimerTask+0x8>

0800568c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005696:	f7ff f939 	bl	800490c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800569a:	f107 0308 	add.w	r3, r7, #8
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 f866 	bl	8005770 <prvSampleTimeNow>
 80056a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d130      	bne.n	800570e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10a      	bne.n	80056c8 <prvProcessTimerOrBlockTask+0x3c>
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d806      	bhi.n	80056c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80056ba:	f7ff f935 	bl	8004928 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80056be:	68f9      	ldr	r1, [r7, #12]
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7ff ff91 	bl	80055e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80056c6:	e024      	b.n	8005712 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d008      	beq.n	80056e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80056ce:	4b13      	ldr	r3, [pc, #76]	; (800571c <prvProcessTimerOrBlockTask+0x90>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	bf0c      	ite	eq
 80056d8:	2301      	moveq	r3, #1
 80056da:	2300      	movne	r3, #0
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80056e0:	4b0f      	ldr	r3, [pc, #60]	; (8005720 <prvProcessTimerOrBlockTask+0x94>)
 80056e2:	6818      	ldr	r0, [r3, #0]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	4619      	mov	r1, r3
 80056ee:	f7fe fded 	bl	80042cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80056f2:	f7ff f919 	bl	8004928 <xTaskResumeAll>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10a      	bne.n	8005712 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80056fc:	4b09      	ldr	r3, [pc, #36]	; (8005724 <prvProcessTimerOrBlockTask+0x98>)
 80056fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	f3bf 8f6f 	isb	sy
}
 800570c:	e001      	b.n	8005712 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800570e:	f7ff f90b 	bl	8004928 <xTaskResumeAll>
}
 8005712:	bf00      	nop
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20000c3c 	.word	0x20000c3c
 8005720:	20000c40 	.word	0x20000c40
 8005724:	e000ed04 	.word	0xe000ed04

08005728 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005730:	4b0e      	ldr	r3, [pc, #56]	; (800576c <prvGetNextExpireTime+0x44>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	bf0c      	ite	eq
 800573a:	2301      	moveq	r3, #1
 800573c:	2300      	movne	r3, #0
 800573e:	b2db      	uxtb	r3, r3
 8005740:	461a      	mov	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d105      	bne.n	800575a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800574e:	4b07      	ldr	r3, [pc, #28]	; (800576c <prvGetNextExpireTime+0x44>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	e001      	b.n	800575e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800575e:	68fb      	ldr	r3, [r7, #12]
}
 8005760:	4618      	mov	r0, r3
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	bc80      	pop	{r7}
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	20000c38 	.word	0x20000c38

08005770 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005778:	f7ff f972 	bl	8004a60 <xTaskGetTickCount>
 800577c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800577e:	4b0b      	ldr	r3, [pc, #44]	; (80057ac <prvSampleTimeNow+0x3c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	429a      	cmp	r2, r3
 8005786:	d205      	bcs.n	8005794 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005788:	f000 f904 	bl	8005994 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	e002      	b.n	800579a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800579a:	4a04      	ldr	r2, [pc, #16]	; (80057ac <prvSampleTimeNow+0x3c>)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80057a0:	68fb      	ldr	r3, [r7, #12]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	20000c48 	.word	0x20000c48

080057b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
 80057bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80057be:	2300      	movs	r3, #0
 80057c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d812      	bhi.n	80057fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	1ad2      	subs	r2, r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d302      	bcc.n	80057ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80057e4:	2301      	movs	r3, #1
 80057e6:	617b      	str	r3, [r7, #20]
 80057e8:	e01b      	b.n	8005822 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80057ea:	4b10      	ldr	r3, [pc, #64]	; (800582c <prvInsertTimerInActiveList+0x7c>)
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	3304      	adds	r3, #4
 80057f2:	4619      	mov	r1, r3
 80057f4:	4610      	mov	r0, r2
 80057f6:	f7fd fd55 	bl	80032a4 <vListInsert>
 80057fa:	e012      	b.n	8005822 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	429a      	cmp	r2, r3
 8005802:	d206      	bcs.n	8005812 <prvInsertTimerInActiveList+0x62>
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	429a      	cmp	r2, r3
 800580a:	d302      	bcc.n	8005812 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800580c:	2301      	movs	r3, #1
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	e007      	b.n	8005822 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005812:	4b07      	ldr	r3, [pc, #28]	; (8005830 <prvInsertTimerInActiveList+0x80>)
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	3304      	adds	r3, #4
 800581a:	4619      	mov	r1, r3
 800581c:	4610      	mov	r0, r2
 800581e:	f7fd fd41 	bl	80032a4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005822:	697b      	ldr	r3, [r7, #20]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	20000c3c 	.word	0x20000c3c
 8005830:	20000c38 	.word	0x20000c38

08005834 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b08e      	sub	sp, #56	; 0x38
 8005838:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800583a:	e099      	b.n	8005970 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	da17      	bge.n	8005872 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005842:	1d3b      	adds	r3, r7, #4
 8005844:	3304      	adds	r3, #4
 8005846:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584a:	2b00      	cmp	r3, #0
 800584c:	d109      	bne.n	8005862 <prvProcessReceivedCommands+0x2e>
 800584e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	61fb      	str	r3, [r7, #28]
 8005860:	e7fe      	b.n	8005860 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005868:	6850      	ldr	r0, [r2, #4]
 800586a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800586c:	6892      	ldr	r2, [r2, #8]
 800586e:	4611      	mov	r1, r2
 8005870:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	db7a      	blt.n	800596e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800587c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d004      	beq.n	800588e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005886:	3304      	adds	r3, #4
 8005888:	4618      	mov	r0, r3
 800588a:	f7fd fd43 	bl	8003314 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800588e:	463b      	mov	r3, r7
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff ff6d 	bl	8005770 <prvSampleTimeNow>
 8005896:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b09      	cmp	r3, #9
 800589c:	d868      	bhi.n	8005970 <prvProcessReceivedCommands+0x13c>
 800589e:	a201      	add	r2, pc, #4	; (adr r2, 80058a4 <prvProcessReceivedCommands+0x70>)
 80058a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a4:	080058cd 	.word	0x080058cd
 80058a8:	080058cd 	.word	0x080058cd
 80058ac:	080058cd 	.word	0x080058cd
 80058b0:	08005971 	.word	0x08005971
 80058b4:	08005927 	.word	0x08005927
 80058b8:	0800595d 	.word	0x0800595d
 80058bc:	080058cd 	.word	0x080058cd
 80058c0:	080058cd 	.word	0x080058cd
 80058c4:	08005971 	.word	0x08005971
 80058c8:	08005927 	.word	0x08005927
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	18d1      	adds	r1, r2, r3
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058da:	f7ff ff69 	bl	80057b0 <prvInsertTimerInActiveList>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d045      	beq.n	8005970 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058ea:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80058ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d13d      	bne.n	8005970 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	441a      	add	r2, r3
 80058fc:	2300      	movs	r3, #0
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	2300      	movs	r3, #0
 8005902:	2100      	movs	r1, #0
 8005904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005906:	f7ff fe23 	bl	8005550 <xTimerGenericCommand>
 800590a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d12e      	bne.n	8005970 <prvProcessReceivedCommands+0x13c>
 8005912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005916:	f383 8811 	msr	BASEPRI, r3
 800591a:	f3bf 8f6f 	isb	sy
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	61bb      	str	r3, [r7, #24]
 8005924:	e7fe      	b.n	8005924 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800592c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d109      	bne.n	8005948 <prvProcessReceivedCommands+0x114>
 8005934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	617b      	str	r3, [r7, #20]
 8005946:	e7fe      	b.n	8005946 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594a:	699a      	ldr	r2, [r3, #24]
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	18d1      	adds	r1, r2, r3
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005956:	f7ff ff2b 	bl	80057b0 <prvInsertTimerInActiveList>
					break;
 800595a:	e009      	b.n	8005970 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005962:	2b00      	cmp	r3, #0
 8005964:	d104      	bne.n	8005970 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8005966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005968:	f000 fb56 	bl	8006018 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800596c:	e000      	b.n	8005970 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800596e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005970:	4b07      	ldr	r3, [pc, #28]	; (8005990 <prvProcessReceivedCommands+0x15c>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	1d39      	adds	r1, r7, #4
 8005976:	2200      	movs	r2, #0
 8005978:	4618      	mov	r0, r3
 800597a:	f7fe f8ad 	bl	8003ad8 <xQueueReceive>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	f47f af5b 	bne.w	800583c <prvProcessReceivedCommands+0x8>
	}
}
 8005986:	bf00      	nop
 8005988:	3730      	adds	r7, #48	; 0x30
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	20000c40 	.word	0x20000c40

08005994 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b088      	sub	sp, #32
 8005998:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800599a:	e044      	b.n	8005a26 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800599c:	4b2b      	ldr	r3, [pc, #172]	; (8005a4c <prvSwitchTimerLists+0xb8>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059a6:	4b29      	ldr	r3, [pc, #164]	; (8005a4c <prvSwitchTimerLists+0xb8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3304      	adds	r3, #4
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7fd fcad 	bl	8003314 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d12d      	bne.n	8005a26 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4413      	add	r3, r2
 80059d2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d90e      	bls.n	80059fa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059e8:	4b18      	ldr	r3, [pc, #96]	; (8005a4c <prvSwitchTimerLists+0xb8>)
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	3304      	adds	r3, #4
 80059f0:	4619      	mov	r1, r3
 80059f2:	4610      	mov	r0, r2
 80059f4:	f7fd fc56 	bl	80032a4 <vListInsert>
 80059f8:	e015      	b.n	8005a26 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059fa:	2300      	movs	r3, #0
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	2300      	movs	r3, #0
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	2100      	movs	r1, #0
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f7ff fda3 	bl	8005550 <xTimerGenericCommand>
 8005a0a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d109      	bne.n	8005a26 <prvSwitchTimerLists+0x92>
 8005a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a16:	f383 8811 	msr	BASEPRI, r3
 8005a1a:	f3bf 8f6f 	isb	sy
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	603b      	str	r3, [r7, #0]
 8005a24:	e7fe      	b.n	8005a24 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a26:	4b09      	ldr	r3, [pc, #36]	; (8005a4c <prvSwitchTimerLists+0xb8>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1b5      	bne.n	800599c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005a30:	4b06      	ldr	r3, [pc, #24]	; (8005a4c <prvSwitchTimerLists+0xb8>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005a36:	4b06      	ldr	r3, [pc, #24]	; (8005a50 <prvSwitchTimerLists+0xbc>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a04      	ldr	r2, [pc, #16]	; (8005a4c <prvSwitchTimerLists+0xb8>)
 8005a3c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005a3e:	4a04      	ldr	r2, [pc, #16]	; (8005a50 <prvSwitchTimerLists+0xbc>)
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	6013      	str	r3, [r2, #0]
}
 8005a44:	bf00      	nop
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	20000c38 	.word	0x20000c38
 8005a50:	20000c3c 	.word	0x20000c3c

08005a54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005a5a:	f000 f925 	bl	8005ca8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005a5e:	4b15      	ldr	r3, [pc, #84]	; (8005ab4 <prvCheckForValidListAndQueue+0x60>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d120      	bne.n	8005aa8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005a66:	4814      	ldr	r0, [pc, #80]	; (8005ab8 <prvCheckForValidListAndQueue+0x64>)
 8005a68:	f7fd fbce 	bl	8003208 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005a6c:	4813      	ldr	r0, [pc, #76]	; (8005abc <prvCheckForValidListAndQueue+0x68>)
 8005a6e:	f7fd fbcb 	bl	8003208 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005a72:	4b13      	ldr	r3, [pc, #76]	; (8005ac0 <prvCheckForValidListAndQueue+0x6c>)
 8005a74:	4a10      	ldr	r2, [pc, #64]	; (8005ab8 <prvCheckForValidListAndQueue+0x64>)
 8005a76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005a78:	4b12      	ldr	r3, [pc, #72]	; (8005ac4 <prvCheckForValidListAndQueue+0x70>)
 8005a7a:	4a10      	ldr	r2, [pc, #64]	; (8005abc <prvCheckForValidListAndQueue+0x68>)
 8005a7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005a7e:	2300      	movs	r3, #0
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	4b11      	ldr	r3, [pc, #68]	; (8005ac8 <prvCheckForValidListAndQueue+0x74>)
 8005a84:	4a11      	ldr	r2, [pc, #68]	; (8005acc <prvCheckForValidListAndQueue+0x78>)
 8005a86:	2110      	movs	r1, #16
 8005a88:	200a      	movs	r0, #10
 8005a8a:	f7fd fcd5 	bl	8003438 <xQueueGenericCreateStatic>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	4b08      	ldr	r3, [pc, #32]	; (8005ab4 <prvCheckForValidListAndQueue+0x60>)
 8005a92:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005a94:	4b07      	ldr	r3, [pc, #28]	; (8005ab4 <prvCheckForValidListAndQueue+0x60>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005a9c:	4b05      	ldr	r3, [pc, #20]	; (8005ab4 <prvCheckForValidListAndQueue+0x60>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	490b      	ldr	r1, [pc, #44]	; (8005ad0 <prvCheckForValidListAndQueue+0x7c>)
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7fe fbc2 	bl	800422c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005aa8:	f000 f92c 	bl	8005d04 <vPortExitCritical>
}
 8005aac:	bf00      	nop
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20000c40 	.word	0x20000c40
 8005ab8:	20000c10 	.word	0x20000c10
 8005abc:	20000c24 	.word	0x20000c24
 8005ac0:	20000c38 	.word	0x20000c38
 8005ac4:	20000c3c 	.word	0x20000c3c
 8005ac8:	20000cec 	.word	0x20000cec
 8005acc:	20000c4c 	.word	0x20000c4c
 8005ad0:	08006318 	.word	0x08006318

08005ad4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	3b04      	subs	r3, #4
 8005ae4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005aec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	3b04      	subs	r3, #4
 8005af2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f023 0201 	bic.w	r2, r3, #1
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	3b04      	subs	r3, #4
 8005b02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b04:	4a08      	ldr	r2, [pc, #32]	; (8005b28 <pxPortInitialiseStack+0x54>)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	3b14      	subs	r3, #20
 8005b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	3b20      	subs	r3, #32
 8005b1a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bc80      	pop	{r7}
 8005b26:	4770      	bx	lr
 8005b28:	08005b2d 	.word	0x08005b2d

08005b2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005b32:	2300      	movs	r3, #0
 8005b34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b36:	4b10      	ldr	r3, [pc, #64]	; (8005b78 <prvTaskExitError+0x4c>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3e:	d009      	beq.n	8005b54 <prvTaskExitError+0x28>
 8005b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	60fb      	str	r3, [r7, #12]
 8005b52:	e7fe      	b.n	8005b52 <prvTaskExitError+0x26>
 8005b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b66:	bf00      	nop
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d0fc      	beq.n	8005b68 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b6e:	bf00      	nop
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bc80      	pop	{r7}
 8005b76:	4770      	bx	lr
 8005b78:	2000000c 	.word	0x2000000c
 8005b7c:	00000000 	.word	0x00000000

08005b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b80:	4b07      	ldr	r3, [pc, #28]	; (8005ba0 <pxCurrentTCBConst2>)
 8005b82:	6819      	ldr	r1, [r3, #0]
 8005b84:	6808      	ldr	r0, [r1, #0]
 8005b86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005b8a:	f380 8809 	msr	PSP, r0
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	f04f 0000 	mov.w	r0, #0
 8005b96:	f380 8811 	msr	BASEPRI, r0
 8005b9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005b9e:	4770      	bx	lr

08005ba0 <pxCurrentTCBConst2>:
 8005ba0:	20000708 	.word	0x20000708
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ba4:	bf00      	nop
 8005ba6:	bf00      	nop

08005ba8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005ba8:	4806      	ldr	r0, [pc, #24]	; (8005bc4 <prvPortStartFirstTask+0x1c>)
 8005baa:	6800      	ldr	r0, [r0, #0]
 8005bac:	6800      	ldr	r0, [r0, #0]
 8005bae:	f380 8808 	msr	MSP, r0
 8005bb2:	b662      	cpsie	i
 8005bb4:	b661      	cpsie	f
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	df00      	svc	0
 8005bc0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005bc2:	bf00      	nop
 8005bc4:	e000ed08 	.word	0xe000ed08

08005bc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005bce:	4b31      	ldr	r3, [pc, #196]	; (8005c94 <xPortStartScheduler+0xcc>)
 8005bd0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	22ff      	movs	r2, #255	; 0xff
 8005bde:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	4b29      	ldr	r3, [pc, #164]	; (8005c98 <xPortStartScheduler+0xd0>)
 8005bf4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005bf6:	4b29      	ldr	r3, [pc, #164]	; (8005c9c <xPortStartScheduler+0xd4>)
 8005bf8:	2207      	movs	r2, #7
 8005bfa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bfc:	e009      	b.n	8005c12 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005bfe:	4b27      	ldr	r3, [pc, #156]	; (8005c9c <xPortStartScheduler+0xd4>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3b01      	subs	r3, #1
 8005c04:	4a25      	ldr	r2, [pc, #148]	; (8005c9c <xPortStartScheduler+0xd4>)
 8005c06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c08:	78fb      	ldrb	r3, [r7, #3]
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c12:	78fb      	ldrb	r3, [r7, #3]
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1a:	2b80      	cmp	r3, #128	; 0x80
 8005c1c:	d0ef      	beq.n	8005bfe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c1e:	4b1f      	ldr	r3, [pc, #124]	; (8005c9c <xPortStartScheduler+0xd4>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f1c3 0307 	rsb	r3, r3, #7
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d009      	beq.n	8005c3e <xPortStartScheduler+0x76>
 8005c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	60bb      	str	r3, [r7, #8]
 8005c3c:	e7fe      	b.n	8005c3c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c3e:	4b17      	ldr	r3, [pc, #92]	; (8005c9c <xPortStartScheduler+0xd4>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	021b      	lsls	r3, r3, #8
 8005c44:	4a15      	ldr	r2, [pc, #84]	; (8005c9c <xPortStartScheduler+0xd4>)
 8005c46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c48:	4b14      	ldr	r3, [pc, #80]	; (8005c9c <xPortStartScheduler+0xd4>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c50:	4a12      	ldr	r2, [pc, #72]	; (8005c9c <xPortStartScheduler+0xd4>)
 8005c52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c5c:	4b10      	ldr	r3, [pc, #64]	; (8005ca0 <xPortStartScheduler+0xd8>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a0f      	ldr	r2, [pc, #60]	; (8005ca0 <xPortStartScheduler+0xd8>)
 8005c62:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c68:	4b0d      	ldr	r3, [pc, #52]	; (8005ca0 <xPortStartScheduler+0xd8>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a0c      	ldr	r2, [pc, #48]	; (8005ca0 <xPortStartScheduler+0xd8>)
 8005c6e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c74:	f000 f8b0 	bl	8005dd8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c78:	4b0a      	ldr	r3, [pc, #40]	; (8005ca4 <xPortStartScheduler+0xdc>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c7e:	f7ff ff93 	bl	8005ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c82:	f7fe ffb9 	bl	8004bf8 <vTaskSwitchContext>
	prvTaskExitError();
 8005c86:	f7ff ff51 	bl	8005b2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	e000e400 	.word	0xe000e400
 8005c98:	20000d3c 	.word	0x20000d3c
 8005c9c:	20000d40 	.word	0x20000d40
 8005ca0:	e000ed20 	.word	0xe000ed20
 8005ca4:	2000000c 	.word	0x2000000c

08005ca8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005cc0:	4b0e      	ldr	r3, [pc, #56]	; (8005cfc <vPortEnterCritical+0x54>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	4a0d      	ldr	r2, [pc, #52]	; (8005cfc <vPortEnterCritical+0x54>)
 8005cc8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005cca:	4b0c      	ldr	r3, [pc, #48]	; (8005cfc <vPortEnterCritical+0x54>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d10e      	bne.n	8005cf0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005cd2:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <vPortEnterCritical+0x58>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d009      	beq.n	8005cf0 <vPortEnterCritical+0x48>
 8005cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce0:	f383 8811 	msr	BASEPRI, r3
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	603b      	str	r3, [r7, #0]
 8005cee:	e7fe      	b.n	8005cee <vPortEnterCritical+0x46>
	}
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bc80      	pop	{r7}
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	2000000c 	.word	0x2000000c
 8005d00:	e000ed04 	.word	0xe000ed04

08005d04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d0a:	4b10      	ldr	r3, [pc, #64]	; (8005d4c <vPortExitCritical+0x48>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d109      	bne.n	8005d26 <vPortExitCritical+0x22>
 8005d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d16:	f383 8811 	msr	BASEPRI, r3
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	607b      	str	r3, [r7, #4]
 8005d24:	e7fe      	b.n	8005d24 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005d26:	4b09      	ldr	r3, [pc, #36]	; (8005d4c <vPortExitCritical+0x48>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	4a07      	ldr	r2, [pc, #28]	; (8005d4c <vPortExitCritical+0x48>)
 8005d2e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d30:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <vPortExitCritical+0x48>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d104      	bne.n	8005d42 <vPortExitCritical+0x3e>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d42:	bf00      	nop
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bc80      	pop	{r7}
 8005d4a:	4770      	bx	lr
 8005d4c:	2000000c 	.word	0x2000000c

08005d50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d50:	f3ef 8009 	mrs	r0, PSP
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	4b0d      	ldr	r3, [pc, #52]	; (8005d90 <pxCurrentTCBConst>)
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005d60:	6010      	str	r0, [r2, #0]
 8005d62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005d66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d6a:	f380 8811 	msr	BASEPRI, r0
 8005d6e:	f7fe ff43 	bl	8004bf8 <vTaskSwitchContext>
 8005d72:	f04f 0000 	mov.w	r0, #0
 8005d76:	f380 8811 	msr	BASEPRI, r0
 8005d7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005d7e:	6819      	ldr	r1, [r3, #0]
 8005d80:	6808      	ldr	r0, [r1, #0]
 8005d82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005d86:	f380 8809 	msr	PSP, r0
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	4770      	bx	lr

08005d90 <pxCurrentTCBConst>:
 8005d90:	20000708 	.word	0x20000708
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d94:	bf00      	nop
 8005d96:	bf00      	nop

08005d98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005db0:	f7fe fe64 	bl	8004a7c <xTaskIncrementTick>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005dba:	4b06      	ldr	r3, [pc, #24]	; (8005dd4 <SysTick_Handler+0x3c>)
 8005dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005dcc:	bf00      	nop
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	e000ed04 	.word	0xe000ed04

08005dd8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ddc:	4b0a      	ldr	r3, [pc, #40]	; (8005e08 <vPortSetupTimerInterrupt+0x30>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005de2:	4b0a      	ldr	r3, [pc, #40]	; (8005e0c <vPortSetupTimerInterrupt+0x34>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005de8:	4b09      	ldr	r3, [pc, #36]	; (8005e10 <vPortSetupTimerInterrupt+0x38>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a09      	ldr	r2, [pc, #36]	; (8005e14 <vPortSetupTimerInterrupt+0x3c>)
 8005dee:	fba2 2303 	umull	r2, r3, r2, r3
 8005df2:	099b      	lsrs	r3, r3, #6
 8005df4:	4a08      	ldr	r2, [pc, #32]	; (8005e18 <vPortSetupTimerInterrupt+0x40>)
 8005df6:	3b01      	subs	r3, #1
 8005df8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005dfa:	4b03      	ldr	r3, [pc, #12]	; (8005e08 <vPortSetupTimerInterrupt+0x30>)
 8005dfc:	2207      	movs	r2, #7
 8005dfe:	601a      	str	r2, [r3, #0]
}
 8005e00:	bf00      	nop
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bc80      	pop	{r7}
 8005e06:	4770      	bx	lr
 8005e08:	e000e010 	.word	0xe000e010
 8005e0c:	e000e018 	.word	0xe000e018
 8005e10:	20000000 	.word	0x20000000
 8005e14:	10624dd3 	.word	0x10624dd3
 8005e18:	e000e014 	.word	0xe000e014

08005e1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e22:	f3ef 8305 	mrs	r3, IPSR
 8005e26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2b0f      	cmp	r3, #15
 8005e2c:	d913      	bls.n	8005e56 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e2e:	4a15      	ldr	r2, [pc, #84]	; (8005e84 <vPortValidateInterruptPriority+0x68>)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	4413      	add	r3, r2
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e38:	4b13      	ldr	r3, [pc, #76]	; (8005e88 <vPortValidateInterruptPriority+0x6c>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	7afa      	ldrb	r2, [r7, #11]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d209      	bcs.n	8005e56 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e46:	f383 8811 	msr	BASEPRI, r3
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	607b      	str	r3, [r7, #4]
 8005e54:	e7fe      	b.n	8005e54 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e56:	4b0d      	ldr	r3, [pc, #52]	; (8005e8c <vPortValidateInterruptPriority+0x70>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e5e:	4b0c      	ldr	r3, [pc, #48]	; (8005e90 <vPortValidateInterruptPriority+0x74>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d909      	bls.n	8005e7a <vPortValidateInterruptPriority+0x5e>
 8005e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6a:	f383 8811 	msr	BASEPRI, r3
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f3bf 8f4f 	dsb	sy
 8005e76:	603b      	str	r3, [r7, #0]
 8005e78:	e7fe      	b.n	8005e78 <vPortValidateInterruptPriority+0x5c>
	}
 8005e7a:	bf00      	nop
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bc80      	pop	{r7}
 8005e82:	4770      	bx	lr
 8005e84:	e000e3f0 	.word	0xe000e3f0
 8005e88:	20000d3c 	.word	0x20000d3c
 8005e8c:	e000ed0c 	.word	0xe000ed0c
 8005e90:	20000d40 	.word	0x20000d40

08005e94 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b08a      	sub	sp, #40	; 0x28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ea0:	f7fe fd34 	bl	800490c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ea4:	4b57      	ldr	r3, [pc, #348]	; (8006004 <pvPortMalloc+0x170>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005eac:	f000 f90c 	bl	80060c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005eb0:	4b55      	ldr	r3, [pc, #340]	; (8006008 <pvPortMalloc+0x174>)
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f040 808c 	bne.w	8005fd6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d01c      	beq.n	8005efe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005ec4:	2208      	movs	r2, #8
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4413      	add	r3, r2
 8005eca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f003 0307 	and.w	r3, r3, #7
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d013      	beq.n	8005efe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f023 0307 	bic.w	r3, r3, #7
 8005edc:	3308      	adds	r3, #8
 8005ede:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d009      	beq.n	8005efe <pvPortMalloc+0x6a>
 8005eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	617b      	str	r3, [r7, #20]
 8005efc:	e7fe      	b.n	8005efc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d068      	beq.n	8005fd6 <pvPortMalloc+0x142>
 8005f04:	4b41      	ldr	r3, [pc, #260]	; (800600c <pvPortMalloc+0x178>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d863      	bhi.n	8005fd6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f0e:	4b40      	ldr	r3, [pc, #256]	; (8006010 <pvPortMalloc+0x17c>)
 8005f10:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f12:	4b3f      	ldr	r3, [pc, #252]	; (8006010 <pvPortMalloc+0x17c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f18:	e004      	b.n	8005f24 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d903      	bls.n	8005f36 <pvPortMalloc+0xa2>
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1f1      	bne.n	8005f1a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f36:	4b33      	ldr	r3, [pc, #204]	; (8006004 <pvPortMalloc+0x170>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d04a      	beq.n	8005fd6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2208      	movs	r2, #8
 8005f46:	4413      	add	r3, r2
 8005f48:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	6a3b      	ldr	r3, [r7, #32]
 8005f50:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	1ad2      	subs	r2, r2, r3
 8005f5a:	2308      	movs	r3, #8
 8005f5c:	005b      	lsls	r3, r3, #1
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d91e      	bls.n	8005fa0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4413      	add	r3, r2
 8005f68:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d009      	beq.n	8005f88 <pvPortMalloc+0xf4>
 8005f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f78:	f383 8811 	msr	BASEPRI, r3
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	613b      	str	r3, [r7, #16]
 8005f86:	e7fe      	b.n	8005f86 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	1ad2      	subs	r2, r2, r3
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f9a:	69b8      	ldr	r0, [r7, #24]
 8005f9c:	f000 f8f6 	bl	800618c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005fa0:	4b1a      	ldr	r3, [pc, #104]	; (800600c <pvPortMalloc+0x178>)
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	4a18      	ldr	r2, [pc, #96]	; (800600c <pvPortMalloc+0x178>)
 8005fac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005fae:	4b17      	ldr	r3, [pc, #92]	; (800600c <pvPortMalloc+0x178>)
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	4b18      	ldr	r3, [pc, #96]	; (8006014 <pvPortMalloc+0x180>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d203      	bcs.n	8005fc2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005fba:	4b14      	ldr	r3, [pc, #80]	; (800600c <pvPortMalloc+0x178>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a15      	ldr	r2, [pc, #84]	; (8006014 <pvPortMalloc+0x180>)
 8005fc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	4b10      	ldr	r3, [pc, #64]	; (8006008 <pvPortMalloc+0x174>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005fd6:	f7fe fca7 	bl	8004928 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	f003 0307 	and.w	r3, r3, #7
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d009      	beq.n	8005ff8 <pvPortMalloc+0x164>
 8005fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe8:	f383 8811 	msr	BASEPRI, r3
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	60fb      	str	r3, [r7, #12]
 8005ff6:	e7fe      	b.n	8005ff6 <pvPortMalloc+0x162>
	return pvReturn;
 8005ff8:	69fb      	ldr	r3, [r7, #28]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3728      	adds	r7, #40	; 0x28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	20002504 	.word	0x20002504
 8006008:	20002510 	.word	0x20002510
 800600c:	20002508 	.word	0x20002508
 8006010:	200024fc 	.word	0x200024fc
 8006014:	2000250c 	.word	0x2000250c

08006018 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d046      	beq.n	80060b8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800602a:	2308      	movs	r3, #8
 800602c:	425b      	negs	r3, r3
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	4413      	add	r3, r2
 8006032:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	4b20      	ldr	r3, [pc, #128]	; (80060c0 <vPortFree+0xa8>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4013      	ands	r3, r2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d109      	bne.n	800605a <vPortFree+0x42>
 8006046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604a:	f383 8811 	msr	BASEPRI, r3
 800604e:	f3bf 8f6f 	isb	sy
 8006052:	f3bf 8f4f 	dsb	sy
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	e7fe      	b.n	8006058 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d009      	beq.n	8006076 <vPortFree+0x5e>
 8006062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	60bb      	str	r3, [r7, #8]
 8006074:	e7fe      	b.n	8006074 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	4b11      	ldr	r3, [pc, #68]	; (80060c0 <vPortFree+0xa8>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4013      	ands	r3, r2
 8006080:	2b00      	cmp	r3, #0
 8006082:	d019      	beq.n	80060b8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d115      	bne.n	80060b8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <vPortFree+0xa8>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	43db      	mvns	r3, r3
 8006096:	401a      	ands	r2, r3
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800609c:	f7fe fc36 	bl	800490c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	4b07      	ldr	r3, [pc, #28]	; (80060c4 <vPortFree+0xac>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4413      	add	r3, r2
 80060aa:	4a06      	ldr	r2, [pc, #24]	; (80060c4 <vPortFree+0xac>)
 80060ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060ae:	6938      	ldr	r0, [r7, #16]
 80060b0:	f000 f86c 	bl	800618c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80060b4:	f7fe fc38 	bl	8004928 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80060b8:	bf00      	nop
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	20002510 	.word	0x20002510
 80060c4:	20002508 	.word	0x20002508

080060c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80060ce:	f241 73b8 	movw	r3, #6072	; 0x17b8
 80060d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80060d4:	4b27      	ldr	r3, [pc, #156]	; (8006174 <prvHeapInit+0xac>)
 80060d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00c      	beq.n	80060fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	3307      	adds	r3, #7
 80060e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f023 0307 	bic.w	r3, r3, #7
 80060ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	4a1f      	ldr	r2, [pc, #124]	; (8006174 <prvHeapInit+0xac>)
 80060f8:	4413      	add	r3, r2
 80060fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006100:	4a1d      	ldr	r2, [pc, #116]	; (8006178 <prvHeapInit+0xb0>)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006106:	4b1c      	ldr	r3, [pc, #112]	; (8006178 <prvHeapInit+0xb0>)
 8006108:	2200      	movs	r2, #0
 800610a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	4413      	add	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006114:	2208      	movs	r2, #8
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	1a9b      	subs	r3, r3, r2
 800611a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f023 0307 	bic.w	r3, r3, #7
 8006122:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4a15      	ldr	r2, [pc, #84]	; (800617c <prvHeapInit+0xb4>)
 8006128:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800612a:	4b14      	ldr	r3, [pc, #80]	; (800617c <prvHeapInit+0xb4>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2200      	movs	r2, #0
 8006130:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006132:	4b12      	ldr	r3, [pc, #72]	; (800617c <prvHeapInit+0xb4>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2200      	movs	r2, #0
 8006138:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	1ad2      	subs	r2, r2, r3
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006148:	4b0c      	ldr	r3, [pc, #48]	; (800617c <prvHeapInit+0xb4>)
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	4a0a      	ldr	r2, [pc, #40]	; (8006180 <prvHeapInit+0xb8>)
 8006156:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	4a09      	ldr	r2, [pc, #36]	; (8006184 <prvHeapInit+0xbc>)
 800615e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006160:	4b09      	ldr	r3, [pc, #36]	; (8006188 <prvHeapInit+0xc0>)
 8006162:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006166:	601a      	str	r2, [r3, #0]
}
 8006168:	bf00      	nop
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	bc80      	pop	{r7}
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	20000d44 	.word	0x20000d44
 8006178:	200024fc 	.word	0x200024fc
 800617c:	20002504 	.word	0x20002504
 8006180:	2000250c 	.word	0x2000250c
 8006184:	20002508 	.word	0x20002508
 8006188:	20002510 	.word	0x20002510

0800618c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006194:	4b27      	ldr	r3, [pc, #156]	; (8006234 <prvInsertBlockIntoFreeList+0xa8>)
 8006196:	60fb      	str	r3, [r7, #12]
 8006198:	e002      	b.n	80061a0 <prvInsertBlockIntoFreeList+0x14>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d8f7      	bhi.n	800619a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	4413      	add	r3, r2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d108      	bne.n	80061ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	441a      	add	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	441a      	add	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d118      	bne.n	8006214 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	4b14      	ldr	r3, [pc, #80]	; (8006238 <prvInsertBlockIntoFreeList+0xac>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d00d      	beq.n	800620a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	441a      	add	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	e008      	b.n	800621c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800620a:	4b0b      	ldr	r3, [pc, #44]	; (8006238 <prvInsertBlockIntoFreeList+0xac>)
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	e003      	b.n	800621c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	429a      	cmp	r2, r3
 8006222:	d002      	beq.n	800622a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800622a:	bf00      	nop
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	bc80      	pop	{r7}
 8006232:	4770      	bx	lr
 8006234:	200024fc 	.word	0x200024fc
 8006238:	20002504 	.word	0x20002504

0800623c <__libc_init_array>:
 800623c:	b570      	push	{r4, r5, r6, lr}
 800623e:	2500      	movs	r5, #0
 8006240:	4e0c      	ldr	r6, [pc, #48]	; (8006274 <__libc_init_array+0x38>)
 8006242:	4c0d      	ldr	r4, [pc, #52]	; (8006278 <__libc_init_array+0x3c>)
 8006244:	1ba4      	subs	r4, r4, r6
 8006246:	10a4      	asrs	r4, r4, #2
 8006248:	42a5      	cmp	r5, r4
 800624a:	d109      	bne.n	8006260 <__libc_init_array+0x24>
 800624c:	f000 f82e 	bl	80062ac <_init>
 8006250:	2500      	movs	r5, #0
 8006252:	4e0a      	ldr	r6, [pc, #40]	; (800627c <__libc_init_array+0x40>)
 8006254:	4c0a      	ldr	r4, [pc, #40]	; (8006280 <__libc_init_array+0x44>)
 8006256:	1ba4      	subs	r4, r4, r6
 8006258:	10a4      	asrs	r4, r4, #2
 800625a:	42a5      	cmp	r5, r4
 800625c:	d105      	bne.n	800626a <__libc_init_array+0x2e>
 800625e:	bd70      	pop	{r4, r5, r6, pc}
 8006260:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006264:	4798      	blx	r3
 8006266:	3501      	adds	r5, #1
 8006268:	e7ee      	b.n	8006248 <__libc_init_array+0xc>
 800626a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800626e:	4798      	blx	r3
 8006270:	3501      	adds	r5, #1
 8006272:	e7f2      	b.n	800625a <__libc_init_array+0x1e>
 8006274:	0800637c 	.word	0x0800637c
 8006278:	0800637c 	.word	0x0800637c
 800627c:	0800637c 	.word	0x0800637c
 8006280:	08006380 	.word	0x08006380

08006284 <memcpy>:
 8006284:	b510      	push	{r4, lr}
 8006286:	1e43      	subs	r3, r0, #1
 8006288:	440a      	add	r2, r1
 800628a:	4291      	cmp	r1, r2
 800628c:	d100      	bne.n	8006290 <memcpy+0xc>
 800628e:	bd10      	pop	{r4, pc}
 8006290:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006294:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006298:	e7f7      	b.n	800628a <memcpy+0x6>

0800629a <memset>:
 800629a:	4603      	mov	r3, r0
 800629c:	4402      	add	r2, r0
 800629e:	4293      	cmp	r3, r2
 80062a0:	d100      	bne.n	80062a4 <memset+0xa>
 80062a2:	4770      	bx	lr
 80062a4:	f803 1b01 	strb.w	r1, [r3], #1
 80062a8:	e7f9      	b.n	800629e <memset+0x4>
	...

080062ac <_init>:
 80062ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ae:	bf00      	nop
 80062b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062b2:	bc08      	pop	{r3}
 80062b4:	469e      	mov	lr, r3
 80062b6:	4770      	bx	lr

080062b8 <_fini>:
 80062b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ba:	bf00      	nop
 80062bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062be:	bc08      	pop	{r3}
 80062c0:	469e      	mov	lr, r3
 80062c2:	4770      	bx	lr
