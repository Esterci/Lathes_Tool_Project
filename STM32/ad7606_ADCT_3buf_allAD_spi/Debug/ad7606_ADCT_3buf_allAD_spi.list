
ad7606_ADCT_3buf_allAD_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070c4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080071d4  080071d4  000171d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007274  08007274  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08007274  08007274  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007274  08007274  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007274  08007274  00017274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007278  08007278  00017278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800727c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029e4  20000010  0800728c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200029f4  0800728c  000229f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a4f5  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036ee  00000000  00000000  0003a52e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001620  00000000  00000000  0003dc20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001488  00000000  00000000  0003f240  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001634c  00000000  00000000  000406c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000115ff  00000000  00000000  00056a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d6ff  00000000  00000000  00068013  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e5712  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bac  00000000  00000000  000e5790  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080071bc 	.word	0x080071bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080071bc 	.word	0x080071bc

08000150 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0

}
 8000154:	bf00      	nop
 8000156:	46bd      	mov	sp, r7
 8000158:	bc80      	pop	{r7}
 800015a:	4770      	bx	lr

0800015c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
return 0;
 8000160:	2300      	movs	r3, #0
}
 8000162:	4618      	mov	r0, r3
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr
	...

0800016c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800016c:	b580      	push	{r7, lr}
 800016e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000170:	f000 fdee 	bl	8000d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000174:	f000 f82e 	bl	80001d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000178:	f000 f94e 	bl	8000418 <MX_GPIO_Init>
  MX_DMA_Init();
 800017c:	f000 f926 	bl	80003cc <MX_DMA_Init>
  MX_SPI1_Init();
 8000180:	f000 f8a0 	bl	80002c4 <MX_SPI1_Init>
  MX_RTC_Init();
 8000184:	f000 f884 	bl	8000290 <MX_RTC_Init>
  MX_TIM1_Init();
 8000188:	f000 f8d0 	bl	800032c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 800018c:	480b      	ldr	r0, [pc, #44]	; (80001bc <main+0x50>)
 800018e:	f002 fd16 	bl	8002bbe <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000192:	f003 f869 	bl	8003268 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of habENV */
  habENVHandle = osSemaphoreNew(1, 1, &habENV_attributes);
 8000196:	4a0a      	ldr	r2, [pc, #40]	; (80001c0 <main+0x54>)
 8000198:	2101      	movs	r1, #1
 800019a:	2001      	movs	r0, #1
 800019c:	f003 f974 	bl	8003488 <osSemaphoreNew>
 80001a0:	4602      	mov	r2, r0
 80001a2:	4b08      	ldr	r3, [pc, #32]	; (80001c4 <main+0x58>)
 80001a4:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of enviaTask */
  enviaTaskHandle = osThreadNew(StartEnviaTask, NULL, &enviaTask_attributes);
 80001a6:	4a08      	ldr	r2, [pc, #32]	; (80001c8 <main+0x5c>)
 80001a8:	2100      	movs	r1, #0
 80001aa:	4808      	ldr	r0, [pc, #32]	; (80001cc <main+0x60>)
 80001ac:	f003 f8c2 	bl	8003334 <osThreadNew>
 80001b0:	4602      	mov	r2, r0
 80001b2:	4b07      	ldr	r3, [pc, #28]	; (80001d0 <main+0x64>)
 80001b4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001b6:	f003 f889 	bl	80032cc <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ba:	e7fe      	b.n	80001ba <main+0x4e>
 80001bc:	20002850 	.word	0x20002850
 80001c0:	0800724c 	.word	0x0800724c
 80001c4:	20002834 	.word	0x20002834
 80001c8:	08007228 	.word	0x08007228
 80001cc:	080007a5 	.word	0x080007a5
 80001d0:	20002830 	.word	0x20002830

080001d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b094      	sub	sp, #80	; 0x50
 80001d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001de:	2228      	movs	r2, #40	; 0x28
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f006 ffe1 	bl	80071aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e8:	f107 0314 	add.w	r3, r7, #20
 80001ec:	2200      	movs	r2, #0
 80001ee:	601a      	str	r2, [r3, #0]
 80001f0:	605a      	str	r2, [r3, #4]
 80001f2:	609a      	str	r2, [r3, #8]
 80001f4:	60da      	str	r2, [r3, #12]
 80001f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000204:	2305      	movs	r3, #5
 8000206:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000208:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800020c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800020e:	2300      	movs	r3, #0
 8000210:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000212:	2301      	movs	r3, #1
 8000214:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000216:	2301      	movs	r3, #1
 8000218:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800021a:	2302      	movs	r3, #2
 800021c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800021e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000222:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000224:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000228:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800022e:	4618      	mov	r0, r3
 8000230:	f001 fa9a 	bl	8001768 <HAL_RCC_OscConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800023a:	f000 fb4d 	bl	80008d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023e:	230f      	movs	r3, #15
 8000240:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000242:	2302      	movs	r3, #2
 8000244:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800024a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800024e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000254:	f107 0314 	add.w	r3, r7, #20
 8000258:	2102      	movs	r1, #2
 800025a:	4618      	mov	r0, r3
 800025c:	f001 fd04 	bl	8001c68 <HAL_RCC_ClockConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000266:	f000 fb37 	bl	80008d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800026a:	2301      	movs	r3, #1
 800026c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800026e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000272:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	4618      	mov	r0, r3
 8000278:	f001 fec2 	bl	8002000 <HAL_RCCEx_PeriphCLKConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000282:	f000 fb29 	bl	80008d8 <Error_Handler>
  }
}
 8000286:	bf00      	nop
 8000288:	3750      	adds	r7, #80	; 0x50
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000294:	4b09      	ldr	r3, [pc, #36]	; (80002bc <MX_RTC_Init+0x2c>)
 8000296:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <MX_RTC_Init+0x30>)
 8000298:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = 127;
 800029a:	4b08      	ldr	r3, [pc, #32]	; (80002bc <MX_RTC_Init+0x2c>)
 800029c:	227f      	movs	r2, #127	; 0x7f
 800029e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_SECOND;
 80002a0:	4b06      	ldr	r3, [pc, #24]	; (80002bc <MX_RTC_Init+0x2c>)
 80002a2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80002a6:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80002a8:	4804      	ldr	r0, [pc, #16]	; (80002bc <MX_RTC_Init+0x2c>)
 80002aa:	f002 f81b 	bl	80022e4 <HAL_RTC_Init>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <MX_RTC_Init+0x28>
  {
    Error_Handler();
 80002b4:	f000 fb10 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80002b8:	bf00      	nop
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	20002838 	.word	0x20002838
 80002c0:	40002800 	.word	0x40002800

080002c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002c8:	4b16      	ldr	r3, [pc, #88]	; (8000324 <MX_SPI1_Init+0x60>)
 80002ca:	4a17      	ldr	r2, [pc, #92]	; (8000328 <MX_SPI1_Init+0x64>)
 80002cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80002ce:	4b15      	ldr	r3, [pc, #84]	; (8000324 <MX_SPI1_Init+0x60>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002d4:	4b13      	ldr	r3, [pc, #76]	; (8000324 <MX_SPI1_Init+0x60>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002da:	4b12      	ldr	r3, [pc, #72]	; (8000324 <MX_SPI1_Init+0x60>)
 80002dc:	2200      	movs	r2, #0
 80002de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002e0:	4b10      	ldr	r3, [pc, #64]	; (8000324 <MX_SPI1_Init+0x60>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002e6:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <MX_SPI1_Init+0x60>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80002ec:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <MX_SPI1_Init+0x60>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80002f2:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <MX_SPI1_Init+0x60>)
 80002f4:	2208      	movs	r2, #8
 80002f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002f8:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <MX_SPI1_Init+0x60>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002fe:	4b09      	ldr	r3, [pc, #36]	; (8000324 <MX_SPI1_Init+0x60>)
 8000300:	2200      	movs	r2, #0
 8000302:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000304:	4b07      	ldr	r3, [pc, #28]	; (8000324 <MX_SPI1_Init+0x60>)
 8000306:	2200      	movs	r2, #0
 8000308:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800030a:	4b06      	ldr	r3, [pc, #24]	; (8000324 <MX_SPI1_Init+0x60>)
 800030c:	220a      	movs	r2, #10
 800030e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000310:	4804      	ldr	r0, [pc, #16]	; (8000324 <MX_SPI1_Init+0x60>)
 8000312:	f002 f8fa 	bl	800250a <HAL_SPI_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_SPI1_Init+0x5c>
  {
    Error_Handler();
 800031c:	f000 fadc 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	20002890 	.word	0x20002890
 8000328:	40013000 	.word	0x40013000

0800032c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b086      	sub	sp, #24
 8000330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000332:	f107 0308 	add.w	r3, r7, #8
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000340:	463b      	mov	r3, r7
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000348:	4b1e      	ldr	r3, [pc, #120]	; (80003c4 <MX_TIM1_Init+0x98>)
 800034a:	4a1f      	ldr	r2, [pc, #124]	; (80003c8 <MX_TIM1_Init+0x9c>)
 800034c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35;
 800034e:	4b1d      	ldr	r3, [pc, #116]	; (80003c4 <MX_TIM1_Init+0x98>)
 8000350:	2223      	movs	r2, #35	; 0x23
 8000352:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000354:	4b1b      	ldr	r3, [pc, #108]	; (80003c4 <MX_TIM1_Init+0x98>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1333;
 800035a:	4b1a      	ldr	r3, [pc, #104]	; (80003c4 <MX_TIM1_Init+0x98>)
 800035c:	f240 5235 	movw	r2, #1333	; 0x535
 8000360:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000362:	4b18      	ldr	r3, [pc, #96]	; (80003c4 <MX_TIM1_Init+0x98>)
 8000364:	2200      	movs	r2, #0
 8000366:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000368:	4b16      	ldr	r3, [pc, #88]	; (80003c4 <MX_TIM1_Init+0x98>)
 800036a:	2200      	movs	r2, #0
 800036c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800036e:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <MX_TIM1_Init+0x98>)
 8000370:	2280      	movs	r2, #128	; 0x80
 8000372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000374:	4813      	ldr	r0, [pc, #76]	; (80003c4 <MX_TIM1_Init+0x98>)
 8000376:	f002 fbf7 	bl	8002b68 <HAL_TIM_Base_Init>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000380:	f000 faaa 	bl	80008d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000388:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800038a:	f107 0308 	add.w	r3, r7, #8
 800038e:	4619      	mov	r1, r3
 8000390:	480c      	ldr	r0, [pc, #48]	; (80003c4 <MX_TIM1_Init+0x98>)
 8000392:	f002 fd3f 	bl	8002e14 <HAL_TIM_ConfigClockSource>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800039c:	f000 fa9c 	bl	80008d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003a0:	2300      	movs	r3, #0
 80003a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003a4:	2300      	movs	r3, #0
 80003a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003a8:	463b      	mov	r3, r7
 80003aa:	4619      	mov	r1, r3
 80003ac:	4805      	ldr	r0, [pc, #20]	; (80003c4 <MX_TIM1_Init+0x98>)
 80003ae:	f002 ff05 	bl	80031bc <HAL_TIMEx_MasterConfigSynchronization>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80003b8:	f000 fa8e 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80003bc:	bf00      	nop
 80003be:	3718      	adds	r7, #24
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20002850 	.word	0x20002850
 80003c8:	40012c00 	.word	0x40012c00

080003cc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003d2:	4b10      	ldr	r3, [pc, #64]	; (8000414 <MX_DMA_Init+0x48>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	4a0f      	ldr	r2, [pc, #60]	; (8000414 <MX_DMA_Init+0x48>)
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	6153      	str	r3, [r2, #20]
 80003de:	4b0d      	ldr	r3, [pc, #52]	; (8000414 <MX_DMA_Init+0x48>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2105      	movs	r1, #5
 80003ee:	200c      	movs	r0, #12
 80003f0:	f000 fd95 	bl	8000f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80003f4:	200c      	movs	r0, #12
 80003f6:	f000 fdae 	bl	8000f56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2105      	movs	r1, #5
 80003fe:	200d      	movs	r0, #13
 8000400:	f000 fd8d 	bl	8000f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000404:	200d      	movs	r0, #13
 8000406:	f000 fda6 	bl	8000f56 <HAL_NVIC_EnableIRQ>

}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40021000 	.word	0x40021000

08000418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041e:	f107 0310 	add.w	r3, r7, #16
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800042c:	4b59      	ldr	r3, [pc, #356]	; (8000594 <MX_GPIO_Init+0x17c>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a58      	ldr	r2, [pc, #352]	; (8000594 <MX_GPIO_Init+0x17c>)
 8000432:	f043 0310 	orr.w	r3, r3, #16
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b56      	ldr	r3, [pc, #344]	; (8000594 <MX_GPIO_Init+0x17c>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0310 	and.w	r3, r3, #16
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000444:	4b53      	ldr	r3, [pc, #332]	; (8000594 <MX_GPIO_Init+0x17c>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a52      	ldr	r2, [pc, #328]	; (8000594 <MX_GPIO_Init+0x17c>)
 800044a:	f043 0320 	orr.w	r3, r3, #32
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b50      	ldr	r3, [pc, #320]	; (8000594 <MX_GPIO_Init+0x17c>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0320 	and.w	r3, r3, #32
 8000458:	60bb      	str	r3, [r7, #8]
 800045a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045c:	4b4d      	ldr	r3, [pc, #308]	; (8000594 <MX_GPIO_Init+0x17c>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a4c      	ldr	r2, [pc, #304]	; (8000594 <MX_GPIO_Init+0x17c>)
 8000462:	f043 0304 	orr.w	r3, r3, #4
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b4a      	ldr	r3, [pc, #296]	; (8000594 <MX_GPIO_Init+0x17c>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0304 	and.w	r3, r3, #4
 8000470:	607b      	str	r3, [r7, #4]
 8000472:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000474:	4b47      	ldr	r3, [pc, #284]	; (8000594 <MX_GPIO_Init+0x17c>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a46      	ldr	r2, [pc, #280]	; (8000594 <MX_GPIO_Init+0x17c>)
 800047a:	f043 0308 	orr.w	r3, r3, #8
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b44      	ldr	r3, [pc, #272]	; (8000594 <MX_GPIO_Init+0x17c>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0308 	and.w	r3, r3, #8
 8000488:	603b      	str	r3, [r7, #0]
 800048a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000492:	4841      	ldr	r0, [pc, #260]	; (8000598 <MX_GPIO_Init+0x180>)
 8000494:	f001 f92c 	bl	80016f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Cvrst_Pin|Cs_Pin, GPIO_PIN_SET);
 8000498:	2201      	movs	r2, #1
 800049a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800049e:	483f      	ldr	r0, [pc, #252]	; (800059c <MX_GPIO_Init+0x184>)
 80004a0:	f001 f926 	bl	80016f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Os0_Pin|rst_Pin|ce_Pin|Os1_Pin 
 80004a4:	2200      	movs	r2, #0
 80004a6:	f44f 411e 	mov.w	r1, #40448	; 0x9e00
 80004aa:	483c      	ldr	r0, [pc, #240]	; (800059c <MX_GPIO_Init+0x184>)
 80004ac:	f001 f920 	bl	80016f0 <HAL_GPIO_WritePin>
                          |Os2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b6:	2301      	movs	r3, #1
 80004b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	2300      	movs	r3, #0
 80004bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004be:	2302      	movs	r3, #2
 80004c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004c2:	f107 0310 	add.w	r3, r7, #16
 80004c6:	4619      	mov	r1, r3
 80004c8:	4833      	ldr	r0, [pc, #204]	; (8000598 <MX_GPIO_Init+0x180>)
 80004ca:	f000 ffb7 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pin : ext_nss_Pin */
  GPIO_InitStruct.Pin = ext_nss_Pin;
 80004ce:	2301      	movs	r3, #1
 80004d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004d2:	4b33      	ldr	r3, [pc, #204]	; (80005a0 <MX_GPIO_Init+0x188>)
 80004d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ext_nss_GPIO_Port, &GPIO_InitStruct);
 80004da:	f107 0310 	add.w	r3, r7, #16
 80004de:	4619      	mov	r1, r3
 80004e0:	482e      	ldr	r0, [pc, #184]	; (800059c <MX_GPIO_Init+0x184>)
 80004e2:	f000 ffab 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pin : Frsdt_Pin */
  GPIO_InitStruct.Pin = Frsdt_Pin;
 80004e6:	2302      	movs	r3, #2
 80004e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ea:	2300      	movs	r3, #0
 80004ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	2300      	movs	r3, #0
 80004f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Frsdt_GPIO_Port, &GPIO_InitStruct);
 80004f2:	f107 0310 	add.w	r3, r7, #16
 80004f6:	4619      	mov	r1, r3
 80004f8:	4828      	ldr	r0, [pc, #160]	; (800059c <MX_GPIO_Init+0x184>)
 80004fa:	f000 ff9f 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pins : Cvrst_Pin Cs_Pin ce_Pin */
  GPIO_InitStruct.Pin = Cvrst_Pin|Cs_Pin|ce_Pin;
 80004fe:	f640 1304 	movw	r3, #2308	; 0x904
 8000502:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000504:	2301      	movs	r3, #1
 8000506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	2300      	movs	r3, #0
 800050a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800050c:	2303      	movs	r3, #3
 800050e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000510:	f107 0310 	add.w	r3, r7, #16
 8000514:	4619      	mov	r1, r3
 8000516:	4821      	ldr	r0, [pc, #132]	; (800059c <MX_GPIO_Init+0x184>)
 8000518:	f000 ff90 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pin : Busy_Pin */
  GPIO_InitStruct.Pin = Busy_Pin;
 800051c:	2308      	movs	r3, #8
 800051e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000520:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <MX_GPIO_Init+0x18c>)
 8000522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	2300      	movs	r3, #0
 8000526:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Busy_GPIO_Port, &GPIO_InitStruct);
 8000528:	f107 0310 	add.w	r3, r7, #16
 800052c:	4619      	mov	r1, r3
 800052e:	481b      	ldr	r0, [pc, #108]	; (800059c <MX_GPIO_Init+0x184>)
 8000530:	f000 ff84 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pins : db0_Pin db1_Pin db2_Pin db10_Pin 
                           db11_Pin db12_Pin db13_Pin db14_Pin 
                           db15_Pin db3_Pin db4_Pin db5_Pin 
                           db6_Pin db7_Pin db8_Pin db9_Pin */
  GPIO_InitStruct.Pin = db0_Pin|db1_Pin|db2_Pin|db10_Pin 
 8000534:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000538:	613b      	str	r3, [r7, #16]
                          |db11_Pin|db12_Pin|db13_Pin|db14_Pin 
                          |db15_Pin|db3_Pin|db4_Pin|db5_Pin 
                          |db6_Pin|db7_Pin|db8_Pin|db9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	2300      	movs	r3, #0
 8000540:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000542:	f107 0310 	add.w	r3, r7, #16
 8000546:	4619      	mov	r1, r3
 8000548:	4817      	ldr	r0, [pc, #92]	; (80005a8 <MX_GPIO_Init+0x190>)
 800054a:	f000 ff77 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pins : Os0_Pin rst_Pin Os1_Pin Os2_Pin */
  GPIO_InitStruct.Pin = Os0_Pin|rst_Pin|Os1_Pin|Os2_Pin;
 800054e:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000554:	2301      	movs	r3, #1
 8000556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055c:	2302      	movs	r3, #2
 800055e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	4619      	mov	r1, r3
 8000566:	480d      	ldr	r0, [pc, #52]	; (800059c <MX_GPIO_Init+0x184>)
 8000568:	f000 ff68 	bl	800143c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800056c:	2200      	movs	r2, #0
 800056e:	2105      	movs	r1, #5
 8000570:	2006      	movs	r0, #6
 8000572:	f000 fcd4 	bl	8000f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000576:	2006      	movs	r0, #6
 8000578:	f000 fced 	bl	8000f56 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800057c:	2200      	movs	r2, #0
 800057e:	2105      	movs	r1, #5
 8000580:	2009      	movs	r0, #9
 8000582:	f000 fccc 	bl	8000f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000586:	2009      	movs	r0, #9
 8000588:	f000 fce5 	bl	8000f56 <HAL_NVIC_EnableIRQ>

}
 800058c:	bf00      	nop
 800058e:	3720      	adds	r7, #32
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40021000 	.word	0x40021000
 8000598:	40011000 	.word	0x40011000
 800059c:	40010800 	.word	0x40010800
 80005a0:	10110000 	.word	0x10110000
 80005a4:	10210000 	.word	0x10210000
 80005a8:	40010c00 	.word	0x40010c00

080005ac <Converst>:
	HAL_GPIO_WritePin(GPIOA, rst_Pin, 1);
	HAL_GPIO_WritePin(GPIOA, rst_Pin, 0);

}
void Converst(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOA, Cvrst_Pin, 0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2104      	movs	r1, #4
 80005b4:	4804      	ldr	r0, [pc, #16]	; (80005c8 <Converst+0x1c>)
 80005b6:	f001 f89b 	bl	80016f0 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA, Cvrst_Pin, 1);
 80005ba:	2201      	movs	r2, #1
 80005bc:	2104      	movs	r1, #4
 80005be:	4802      	ldr	r0, [pc, #8]	; (80005c8 <Converst+0x1c>)
 80005c0:	f001 f896 	bl	80016f0 <HAL_GPIO_WritePin>
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40010800 	.word	0x40010800

080005cc <Read>:

 void Read(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af00      	add	r7, sp, #0

	size_t xBytesSent;
	size_t zBytesSent;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80005d2:	2300      	movs	r3, #0
 80005d4:	603b      	str	r3, [r7, #0]
	static unsigned char valor3;
	static unsigned char canais[400];



		for (i=0+k; i<k+16;)
 80005d6:	4b4c      	ldr	r3, [pc, #304]	; (8000708 <Read+0x13c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a4c      	ldr	r2, [pc, #304]	; (800070c <Read+0x140>)
 80005dc:	6013      	str	r3, [r2, #0]
 80005de:	e036      	b.n	800064e <Read+0x82>
			{
				HAL_GPIO_WritePin(GPIOA, Cs_Pin, 0);
 80005e0:	2200      	movs	r2, #0
 80005e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e6:	484a      	ldr	r0, [pc, #296]	; (8000710 <Read+0x144>)
 80005e8:	f001 f882 	bl	80016f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, ce_Pin, 1);
 80005ec:	2201      	movs	r2, #1
 80005ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005f2:	4847      	ldr	r0, [pc, #284]	; (8000710 <Read+0x144>)
 80005f4:	f001 f87c 	bl	80016f0 <HAL_GPIO_WritePin>

				valor = GPIOB->IDR;
 80005f8:	4b46      	ldr	r3, [pc, #280]	; (8000714 <Read+0x148>)
 80005fa:	689b      	ldr	r3, [r3, #8]
 80005fc:	80fb      	strh	r3, [r7, #6]
				valor2 = (valor & 255);
 80005fe:	88fb      	ldrh	r3, [r7, #6]
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b45      	ldr	r3, [pc, #276]	; (8000718 <Read+0x14c>)
 8000604:	701a      	strb	r2, [r3, #0]
				valor3 = ((valor>>8) & 255);
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	0a1b      	lsrs	r3, r3, #8
 800060a:	b29b      	uxth	r3, r3
 800060c:	b2da      	uxtb	r2, r3
 800060e:	4b43      	ldr	r3, [pc, #268]	; (800071c <Read+0x150>)
 8000610:	701a      	strb	r2, [r3, #0]
				canais[i]= valor3;
 8000612:	4b3e      	ldr	r3, [pc, #248]	; (800070c <Read+0x140>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a41      	ldr	r2, [pc, #260]	; (800071c <Read+0x150>)
 8000618:	7811      	ldrb	r1, [r2, #0]
 800061a:	4a41      	ldr	r2, [pc, #260]	; (8000720 <Read+0x154>)
 800061c:	54d1      	strb	r1, [r2, r3]
				canais[i+1]= valor2;
 800061e:	4b3b      	ldr	r3, [pc, #236]	; (800070c <Read+0x140>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	3301      	adds	r3, #1
 8000624:	4a3c      	ldr	r2, [pc, #240]	; (8000718 <Read+0x14c>)
 8000626:	7811      	ldrb	r1, [r2, #0]
 8000628:	4a3d      	ldr	r2, [pc, #244]	; (8000720 <Read+0x154>)
 800062a:	54d1      	strb	r1, [r2, r3]
			////{
				//i=0;
			//}


				i=i+2;
 800062c:	4b37      	ldr	r3, [pc, #220]	; (800070c <Read+0x140>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	3302      	adds	r3, #2
 8000632:	4a36      	ldr	r2, [pc, #216]	; (800070c <Read+0x140>)
 8000634:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOA, Cs_Pin, 1);
 8000636:	2201      	movs	r2, #1
 8000638:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063c:	4834      	ldr	r0, [pc, #208]	; (8000710 <Read+0x144>)
 800063e:	f001 f857 	bl	80016f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, ce_Pin, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000648:	4831      	ldr	r0, [pc, #196]	; (8000710 <Read+0x144>)
 800064a:	f001 f851 	bl	80016f0 <HAL_GPIO_WritePin>
		for (i=0+k; i<k+16;)
 800064e:	4b2e      	ldr	r3, [pc, #184]	; (8000708 <Read+0x13c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f103 0210 	add.w	r2, r3, #16
 8000656:	4b2d      	ldr	r3, [pc, #180]	; (800070c <Read+0x140>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	429a      	cmp	r2, r3
 800065c:	dcc0      	bgt.n	80005e0 <Read+0x14>

			}
		j=j+1;
 800065e:	4b31      	ldr	r3, [pc, #196]	; (8000724 <Read+0x158>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	3301      	adds	r3, #1
 8000664:	4a2f      	ldr	r2, [pc, #188]	; (8000724 <Read+0x158>)
 8000666:	6013      	str	r3, [r2, #0]
		k=k+16;
 8000668:	4b27      	ldr	r3, [pc, #156]	; (8000708 <Read+0x13c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	3310      	adds	r3, #16
 800066e:	4a26      	ldr	r2, [pc, #152]	; (8000708 <Read+0x13c>)
 8000670:	6013      	str	r3, [r2, #0]



		if(j>=24)
 8000672:	4b2c      	ldr	r3, [pc, #176]	; (8000724 <Read+0x158>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b17      	cmp	r3, #23
 8000678:	dd41      	ble.n	80006fe <Read+0x132>
		 	{
			  __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_BREAK);
 800067a:	4b2b      	ldr	r3, [pc, #172]	; (8000728 <Read+0x15c>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	68da      	ldr	r2, [r3, #12]
 8000680:	4b29      	ldr	r3, [pc, #164]	; (8000728 <Read+0x15c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000688:	60da      	str	r2, [r3, #12]
			  xEmpty = xStreamBufferIsEmpty(xStreamBuffer );
 800068a:	4b28      	ldr	r3, [pc, #160]	; (800072c <Read+0x160>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4618      	mov	r0, r3
 8000690:	f004 fb3f 	bl	8004d12 <xStreamBufferIsEmpty>
 8000694:	6178      	str	r0, [r7, #20]
			  if (xEmpty==pdTRUE)
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d112      	bne.n	80006c2 <Read+0xf6>
			  {
			   xBytesSent = xStreamBufferSendFromISR (xStreamBuffer, (void *) canais, 400, & xHigherPriorityTaskWoken);
 800069c:	4b23      	ldr	r3, [pc, #140]	; (800072c <Read+0x160>)
 800069e:	6818      	ldr	r0, [r3, #0]
 80006a0:	463b      	mov	r3, r7
 80006a2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80006a6:	491e      	ldr	r1, [pc, #120]	; (8000720 <Read+0x154>)
 80006a8:	f004 f9c5 	bl	8004a36 <xStreamBufferSendFromISR>
 80006ac:	60b8      	str	r0, [r7, #8]

			   if (xBytesSent == sizeof( canais ))
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80006b4:	d123      	bne.n	80006fe <Read+0x132>
			    {
			     osSemaphoreRelease (habENVHandle);
 80006b6:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <Read+0x164>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 ffe8 	bl	8003690 <osSemaphoreRelease>
				    osSemaphoreRelease (habENVHandle);
				   }
		 	    }
	          }
		 	}
}
 80006c0:	e01d      	b.n	80006fe <Read+0x132>
			 else if (xEmpty==pdFALSE)
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d11a      	bne.n	80006fe <Read+0x132>
			   zEmpty = xStreamBufferIsEmpty(zStreamBuffer );
 80006c8:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <Read+0x168>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f004 fb20 	bl	8004d12 <xStreamBufferIsEmpty>
 80006d2:	6138      	str	r0, [r7, #16]
			   if (zEmpty==pdTRUE)
 80006d4:	693b      	ldr	r3, [r7, #16]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d111      	bne.n	80006fe <Read+0x132>
				 zBytesSent = xStreamBufferSendFromISR (zStreamBuffer, (void *) canais, 400, & xHigherPriorityTaskWoken);
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <Read+0x168>)
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	463b      	mov	r3, r7
 80006e0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80006e4:	490e      	ldr	r1, [pc, #56]	; (8000720 <Read+0x154>)
 80006e6:	f004 f9a6 	bl	8004a36 <xStreamBufferSendFromISR>
 80006ea:	60f8      	str	r0, [r7, #12]
				  if (zBytesSent == sizeof( canais ))
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80006f2:	d104      	bne.n	80006fe <Read+0x132>
				    osSemaphoreRelease (habENVHandle);
 80006f4:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <Read+0x164>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 ffc9 	bl	8003690 <osSemaphoreRelease>
}
 80006fe:	bf00      	nop
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000034 	.word	0x20000034
 800070c:	2000002c 	.word	0x2000002c
 8000710:	40010800 	.word	0x40010800
 8000714:	40010c00 	.word	0x40010c00
 8000718:	20000038 	.word	0x20000038
 800071c:	20000039 	.word	0x20000039
 8000720:	2000003c 	.word	0x2000003c
 8000724:	20000030 	.word	0x20000030
 8000728:	20002850 	.word	0x20002850
 800072c:	2000282c 	.word	0x2000282c
 8000730:	20002834 	.word	0x20002834
 8000734:	2000284c 	.word	0x2000284c

08000738 <HAL_GPIO_EXTI_Callback>:


/* USER CODE BEGIN 4 */

 void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 {
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	80fb      	strh	r3, [r7, #6]
 	if (GPIO_Pin == Busy_Pin)
 8000742:	88fb      	ldrh	r3, [r7, #6]
 8000744:	2b08      	cmp	r3, #8
 8000746:	d101      	bne.n	800074c <HAL_GPIO_EXTI_Callback+0x14>

 	{

 		Read();
 8000748:	f7ff ff40 	bl	80005cc <Read>



 	}

 }
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <vAFunction>:
void vAFunction( void )
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
	//StreamBufferHandle_t xStreamBuffers;
	const size_t xStreamBufferSizeBytes = 400, xTriggerLevel = 400;
 800075a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000764:	60bb      	str	r3, [r7, #8]
	const size_t zStreamBufferSizeBytes = 400, zTriggerLevel = 400;
 8000766:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000770:	603b      	str	r3, [r7, #0]

    /* Create a stream buffer that can hold 100 bytes.  The memory used to hold
    both the stream buffer structure and the data in the stream buffer is
    allocated dynamically. */
    xStreamBuffer = xStreamBufferCreate( xStreamBufferSizeBytes, xTriggerLevel );
 8000772:	2200      	movs	r2, #0
 8000774:	68b9      	ldr	r1, [r7, #8]
 8000776:	68f8      	ldr	r0, [r7, #12]
 8000778:	f004 f8aa 	bl	80048d0 <xStreamBufferGenericCreate>
 800077c:	4602      	mov	r2, r0
 800077e:	4b07      	ldr	r3, [pc, #28]	; (800079c <vAFunction+0x48>)
 8000780:	601a      	str	r2, [r3, #0]
    zStreamBuffer = xStreamBufferCreate( zStreamBufferSizeBytes, zTriggerLevel );
 8000782:	2200      	movs	r2, #0
 8000784:	6839      	ldr	r1, [r7, #0]
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f004 f8a2 	bl	80048d0 <xStreamBufferGenericCreate>
 800078c:	4602      	mov	r2, r0
 800078e:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <vAFunction+0x4c>)
 8000790:	601a      	str	r2, [r3, #0]
   // }
   // else
    //{
        /* The stream buffer was created successfully and can now be used. */
   // }
}
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	2000282c 	.word	0x2000282c
 80007a0:	2000284c 	.word	0x2000284c

080007a4 <StartEnviaTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartEnviaTask */
void StartEnviaTask(void *argument)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	vAFunction();
 80007ac:	f7ff ffd2 	bl	8000754 <vAFunction>
	static unsigned char ucRxData[400];
	size_t xReceivedBytes;
	size_t zReceivedBytes;
	BaseType_t xFull;
	BaseType_t zFull;
	const TickType_t xBlockTime = pdMS_TO_TICKS( 20 );
 80007b0:	2314      	movs	r3, #20
 80007b2:	61fb      	str	r3, [r7, #28]
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire (habENVHandle, osWaitForever);
 80007b4:	4b33      	ldr	r3, [pc, #204]	; (8000884 <StartEnviaTask+0xe0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f04f 31ff 	mov.w	r1, #4294967295
 80007bc:	4618      	mov	r0, r3
 80007be:	f002 ff01 	bl	80035c4 <osSemaphoreAcquire>
	  i=0, j=0, k=0;
 80007c2:	4b31      	ldr	r3, [pc, #196]	; (8000888 <StartEnviaTask+0xe4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	4b30      	ldr	r3, [pc, #192]	; (800088c <StartEnviaTask+0xe8>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	4b30      	ldr	r3, [pc, #192]	; (8000890 <StartEnviaTask+0xec>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
	  xFull = xStreamBufferIsFull( xStreamBuffer );
 80007d4:	4b2f      	ldr	r3, [pc, #188]	; (8000894 <StartEnviaTask+0xf0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4618      	mov	r0, r3
 80007da:	f004 fac0 	bl	8004d5e <xStreamBufferIsFull>
 80007de:	61b8      	str	r0, [r7, #24]
	  if (xFull==pdTRUE)
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d120      	bne.n	8000828 <StartEnviaTask+0x84>
	   {
		 xReceivedBytes = xStreamBufferReceive( xStreamBuffer, (void *)ucRxData, 400, xBlockTime );
 80007e6:	4b2b      	ldr	r3, [pc, #172]	; (8000894 <StartEnviaTask+0xf0>)
 80007e8:	6818      	ldr	r0, [r3, #0]
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80007f0:	4929      	ldr	r1, [pc, #164]	; (8000898 <StartEnviaTask+0xf4>)
 80007f2:	f004 f9cb 	bl	8004b8c <xStreamBufferReceive>
 80007f6:	60f8      	str	r0, [r7, #12]
		 if( xReceivedBytes == sizeof( ucRxData ) )
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80007fe:	d1d9      	bne.n	80007b4 <StartEnviaTask+0x10>
		  {
		  	HAL_SPI_Transmit_DMA(&hspi1, ucRxData, 400);
 8000800:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000804:	4924      	ldr	r1, [pc, #144]	; (8000898 <StartEnviaTask+0xf4>)
 8000806:	4825      	ldr	r0, [pc, #148]	; (800089c <StartEnviaTask+0xf8>)
 8000808:	f001 fee0 	bl	80025cc <HAL_SPI_Transmit_DMA>
		  	xStreamBufferReset(zStreamBuffer);
 800080c:	4b24      	ldr	r3, [pc, #144]	; (80008a0 <StartEnviaTask+0xfc>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4618      	mov	r0, r3
 8000812:	f004 f89e 	bl	8004952 <xStreamBufferReset>
		  	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_BREAK);
 8000816:	4b23      	ldr	r3, [pc, #140]	; (80008a4 <StartEnviaTask+0x100>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	68da      	ldr	r2, [r3, #12]
 800081c:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <StartEnviaTask+0x100>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	e7c5      	b.n	80007b4 <StartEnviaTask+0x10>
		  }
	  	}
	  else if (xFull==pdFALSE)
 8000828:	69bb      	ldr	r3, [r7, #24]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d1c2      	bne.n	80007b4 <StartEnviaTask+0x10>
	  	{
	  	  zFull = xStreamBufferIsFull( zStreamBuffer );
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <StartEnviaTask+0xfc>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4618      	mov	r0, r3
 8000834:	f004 fa93 	bl	8004d5e <xStreamBufferIsFull>
 8000838:	6178      	str	r0, [r7, #20]
	  	  if (zFull==pdTRUE)
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d1b9      	bne.n	80007b4 <StartEnviaTask+0x10>
	  	    {
	  		 zReceivedBytes = xStreamBufferReceive( zStreamBuffer, (void *)ucRxData, 400, xBlockTime );
 8000840:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <StartEnviaTask+0xfc>)
 8000842:	6818      	ldr	r0, [r3, #0]
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800084a:	4913      	ldr	r1, [pc, #76]	; (8000898 <StartEnviaTask+0xf4>)
 800084c:	f004 f99e 	bl	8004b8c <xStreamBufferReceive>
 8000850:	6138      	str	r0, [r7, #16]
	  		 if( zReceivedBytes == sizeof( ucRxData ) )
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000858:	d1ac      	bne.n	80007b4 <StartEnviaTask+0x10>
	  		   {
	  			HAL_SPI_Transmit_DMA(&hspi1, ucRxData, 400);
 800085a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800085e:	490e      	ldr	r1, [pc, #56]	; (8000898 <StartEnviaTask+0xf4>)
 8000860:	480e      	ldr	r0, [pc, #56]	; (800089c <StartEnviaTask+0xf8>)
 8000862:	f001 feb3 	bl	80025cc <HAL_SPI_Transmit_DMA>
	  			xStreamBufferReset(xStreamBuffer);
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <StartEnviaTask+0xf0>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4618      	mov	r0, r3
 800086c:	f004 f871 	bl	8004952 <xStreamBufferReset>
	  			__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_BREAK);
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <StartEnviaTask+0x100>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	68da      	ldr	r2, [r3, #12]
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <StartEnviaTask+0x100>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800087e:	60da      	str	r2, [r3, #12]
	  osSemaphoreAcquire (habENVHandle, osWaitForever);
 8000880:	e798      	b.n	80007b4 <StartEnviaTask+0x10>
 8000882:	bf00      	nop
 8000884:	20002834 	.word	0x20002834
 8000888:	2000002c 	.word	0x2000002c
 800088c:	20000030 	.word	0x20000030
 8000890:	20000034 	.word	0x20000034
 8000894:	2000282c 	.word	0x2000282c
 8000898:	200001cc 	.word	0x200001cc
 800089c:	20002890 	.word	0x20002890
 80008a0:	2000284c 	.word	0x2000284c
 80008a4:	20002850 	.word	0x20002850

080008a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008b8:	d101      	bne.n	80008be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ba:	f000 fa5f 	bl	8000d7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM1) {
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d101      	bne.n	80008cc <HAL_TIM_PeriodElapsedCallback+0x24>

      Converst();
 80008c8:	f7ff fe70 	bl	80005ac <Converst>
    }
  /* USER CODE END Callback 1 */
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40012c00 	.word	0x40012c00

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <HAL_MspInit+0x68>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	4a17      	ldr	r2, [pc, #92]	; (800094c <HAL_MspInit+0x68>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6193      	str	r3, [r2, #24]
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <HAL_MspInit+0x68>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_MspInit+0x68>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	4a11      	ldr	r2, [pc, #68]	; (800094c <HAL_MspInit+0x68>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090c:	61d3      	str	r3, [r2, #28]
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <HAL_MspInit+0x68>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	210f      	movs	r1, #15
 800091e:	f06f 0001 	mvn.w	r0, #1
 8000922:	f000 fafc 	bl	8000f1e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <HAL_MspInit+0x6c>)
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	4a04      	ldr	r2, [pc, #16]	; (8000950 <HAL_MspInit+0x6c>)
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40021000 	.word	0x40021000
 8000950:	40010000 	.word	0x40010000

08000954 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <HAL_RTC_MspInit+0x3c>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d110      	bne.n	8000988 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000966:	f000 fef3 	bl	8001750 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <HAL_RTC_MspInit+0x40>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	4a09      	ldr	r2, [pc, #36]	; (8000994 <HAL_RTC_MspInit+0x40>)
 8000970:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000974:	61d3      	str	r3, [r2, #28]
 8000976:	4b07      	ldr	r3, [pc, #28]	; (8000994 <HAL_RTC_MspInit+0x40>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <HAL_RTC_MspInit+0x44>)
 8000984:	2201      	movs	r2, #1
 8000986:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000988:	bf00      	nop
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40002800 	.word	0x40002800
 8000994:	40021000 	.word	0x40021000
 8000998:	4242043c 	.word	0x4242043c

0800099c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a47      	ldr	r2, [pc, #284]	; (8000ad4 <HAL_SPI_MspInit+0x138>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	f040 8086 	bne.w	8000aca <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009be:	4b46      	ldr	r3, [pc, #280]	; (8000ad8 <HAL_SPI_MspInit+0x13c>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	4a45      	ldr	r2, [pc, #276]	; (8000ad8 <HAL_SPI_MspInit+0x13c>)
 80009c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009c8:	6193      	str	r3, [r2, #24]
 80009ca:	4b43      	ldr	r3, [pc, #268]	; (8000ad8 <HAL_SPI_MspInit+0x13c>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b40      	ldr	r3, [pc, #256]	; (8000ad8 <HAL_SPI_MspInit+0x13c>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	4a3f      	ldr	r2, [pc, #252]	; (8000ad8 <HAL_SPI_MspInit+0x13c>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	6193      	str	r3, [r2, #24]
 80009e2:	4b3d      	ldr	r3, [pc, #244]	; (8000ad8 <HAL_SPI_MspInit+0x13c>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80009ee:	23b0      	movs	r3, #176	; 0xb0
 80009f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	4619      	mov	r1, r3
 8000a00:	4836      	ldr	r0, [pc, #216]	; (8000adc <HAL_SPI_MspInit+0x140>)
 8000a02:	f000 fd1b 	bl	800143c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a06:	2340      	movs	r3, #64	; 0x40
 8000a08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 0310 	add.w	r3, r7, #16
 8000a16:	4619      	mov	r1, r3
 8000a18:	4830      	ldr	r0, [pc, #192]	; (8000adc <HAL_SPI_MspInit+0x140>)
 8000a1a:	f000 fd0f 	bl	800143c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000a1e:	4b30      	ldr	r3, [pc, #192]	; (8000ae0 <HAL_SPI_MspInit+0x144>)
 8000a20:	4a30      	ldr	r2, [pc, #192]	; (8000ae4 <HAL_SPI_MspInit+0x148>)
 8000a22:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a24:	4b2e      	ldr	r3, [pc, #184]	; (8000ae0 <HAL_SPI_MspInit+0x144>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ae0 <HAL_SPI_MspInit+0x144>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a30:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <HAL_SPI_MspInit+0x144>)
 8000a32:	2280      	movs	r2, #128	; 0x80
 8000a34:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a36:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <HAL_SPI_MspInit+0x144>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a3c:	4b28      	ldr	r3, [pc, #160]	; (8000ae0 <HAL_SPI_MspInit+0x144>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000a42:	4b27      	ldr	r3, [pc, #156]	; (8000ae0 <HAL_SPI_MspInit+0x144>)
 8000a44:	2220      	movs	r2, #32
 8000a46:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a48:	4b25      	ldr	r3, [pc, #148]	; (8000ae0 <HAL_SPI_MspInit+0x144>)
 8000a4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a4e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000a50:	4823      	ldr	r0, [pc, #140]	; (8000ae0 <HAL_SPI_MspInit+0x144>)
 8000a52:	f000 fa8f 	bl	8000f74 <HAL_DMA_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8000a5c:	f7ff ff3c 	bl	80008d8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a1f      	ldr	r2, [pc, #124]	; (8000ae0 <HAL_SPI_MspInit+0x144>)
 8000a64:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a66:	4a1e      	ldr	r2, [pc, #120]	; (8000ae0 <HAL_SPI_MspInit+0x144>)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000a6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <HAL_SPI_MspInit+0x14c>)
 8000a6e:	4a1f      	ldr	r2, [pc, #124]	; (8000aec <HAL_SPI_MspInit+0x150>)
 8000a70:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a72:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <HAL_SPI_MspInit+0x14c>)
 8000a74:	2210      	movs	r2, #16
 8000a76:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a78:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <HAL_SPI_MspInit+0x14c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <HAL_SPI_MspInit+0x14c>)
 8000a80:	2280      	movs	r2, #128	; 0x80
 8000a82:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a84:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <HAL_SPI_MspInit+0x14c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a8a:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <HAL_SPI_MspInit+0x14c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <HAL_SPI_MspInit+0x14c>)
 8000a92:	2220      	movs	r2, #32
 8000a94:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <HAL_SPI_MspInit+0x14c>)
 8000a98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a9c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000a9e:	4812      	ldr	r0, [pc, #72]	; (8000ae8 <HAL_SPI_MspInit+0x14c>)
 8000aa0:	f000 fa68 	bl	8000f74 <HAL_DMA_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8000aaa:	f7ff ff15 	bl	80008d8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <HAL_SPI_MspInit+0x14c>)
 8000ab2:	649a      	str	r2, [r3, #72]	; 0x48
 8000ab4:	4a0c      	ldr	r2, [pc, #48]	; (8000ae8 <HAL_SPI_MspInit+0x14c>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2105      	movs	r1, #5
 8000abe:	2023      	movs	r0, #35	; 0x23
 8000ac0:	f000 fa2d 	bl	8000f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000ac4:	2023      	movs	r0, #35	; 0x23
 8000ac6:	f000 fa46 	bl	8000f56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000aca:	bf00      	nop
 8000acc:	3720      	adds	r7, #32
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40013000 	.word	0x40013000
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40010800 	.word	0x40010800
 8000ae0:	200028e8 	.word	0x200028e8
 8000ae4:	4002001c 	.word	0x4002001c
 8000ae8:	2000292c 	.word	0x2000292c
 8000aec:	40020030 	.word	0x40020030

08000af0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0d      	ldr	r2, [pc, #52]	; (8000b34 <HAL_TIM_Base_MspInit+0x44>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d113      	bne.n	8000b2a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <HAL_TIM_Base_MspInit+0x48>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	4a0c      	ldr	r2, [pc, #48]	; (8000b38 <HAL_TIM_Base_MspInit+0x48>)
 8000b08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b0c:	6193      	str	r3, [r2, #24]
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <HAL_TIM_Base_MspInit+0x48>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2105      	movs	r1, #5
 8000b1e:	2018      	movs	r0, #24
 8000b20:	f000 f9fd 	bl	8000f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000b24:	2018      	movs	r0, #24
 8000b26:	f000 fa16 	bl	8000f56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40012c00 	.word	0x40012c00
 8000b38:	40021000 	.word	0x40021000

08000b3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08c      	sub	sp, #48	; 0x30
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	201c      	movs	r0, #28
 8000b52:	f000 f9e4 	bl	8000f1e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8000b56:	201c      	movs	r0, #28
 8000b58:	f000 f9fd 	bl	8000f56 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000b5c:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <HAL_InitTick+0xa4>)
 8000b5e:	69db      	ldr	r3, [r3, #28]
 8000b60:	4a1f      	ldr	r2, [pc, #124]	; (8000be0 <HAL_InitTick+0xa4>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	61d3      	str	r3, [r2, #28]
 8000b68:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <HAL_InitTick+0xa4>)
 8000b6a:	69db      	ldr	r3, [r3, #28]
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b74:	f107 0210 	add.w	r2, r7, #16
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 f9f0 	bl	8001f64 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b84:	f001 f9c6 	bl	8001f14 <HAL_RCC_GetPCLK1Freq>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b90:	4a14      	ldr	r2, [pc, #80]	; (8000be4 <HAL_InitTick+0xa8>)
 8000b92:	fba2 2303 	umull	r2, r3, r2, r3
 8000b96:	0c9b      	lsrs	r3, r3, #18
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_InitTick+0xac>)
 8000b9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ba2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8000ba4:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <HAL_InitTick+0xac>)
 8000ba6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000baa:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000bac:	4a0e      	ldr	r2, [pc, #56]	; (8000be8 <HAL_InitTick+0xac>)
 8000bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <HAL_InitTick+0xac>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <HAL_InitTick+0xac>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000bbe:	480a      	ldr	r0, [pc, #40]	; (8000be8 <HAL_InitTick+0xac>)
 8000bc0:	f001 ffd2 	bl	8002b68 <HAL_TIM_Base_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d104      	bne.n	8000bd4 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000bca:	4807      	ldr	r0, [pc, #28]	; (8000be8 <HAL_InitTick+0xac>)
 8000bcc:	f001 fff7 	bl	8002bbe <HAL_TIM_Base_Start_IT>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	e000      	b.n	8000bd6 <HAL_InitTick+0x9a>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3730      	adds	r7, #48	; 0x30
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40021000 	.word	0x40021000
 8000be4:	431bde83 	.word	0x431bde83
 8000be8:	20002970 	.word	0x20002970

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <HardFault_Handler+0x4>

08000bfe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <MemManage_Handler+0x4>

08000c04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <BusFault_Handler+0x4>

08000c0a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <UsageFault_Handler+0x4>

08000c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr

08000c1c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c20:	2001      	movs	r0, #1
 8000c22:	f000 fd7d 	bl	8001720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000c2e:	2008      	movs	r0, #8
 8000c30:	f000 fd76 	bl	8001720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <DMA1_Channel2_IRQHandler+0x10>)
 8000c3e:	f000 fac9 	bl	80011d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200028e8 	.word	0x200028e8

08000c4c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <DMA1_Channel3_IRQHandler+0x10>)
 8000c52:	f000 fabf 	bl	80011d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000292c 	.word	0x2000292c

08000c60 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <TIM1_BRK_IRQHandler+0x10>)
 8000c66:	f001 ffcd 	bl	8002c04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20002850 	.word	0x20002850

08000c74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <TIM2_IRQHandler+0x10>)
 8000c7a:	f001 ffc3 	bl	8002c04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20002970 	.word	0x20002970

08000c88 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <SPI1_IRQHandler+0x10>)
 8000c8e:	f001 fd4b 	bl	8002728 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20002890 	.word	0x20002890

08000c9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <SystemInit+0x5c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a14      	ldr	r2, [pc, #80]	; (8000cf8 <SystemInit+0x5c>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <SystemInit+0x5c>)
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	4911      	ldr	r1, [pc, #68]	; (8000cf8 <SystemInit+0x5c>)
 8000cb2:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <SystemInit+0x60>)
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <SystemInit+0x5c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <SystemInit+0x5c>)
 8000cbe:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cc6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <SystemInit+0x5c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <SystemInit+0x5c>)
 8000cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cd2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <SystemInit+0x5c>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <SystemInit+0x5c>)
 8000cda:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000cde:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <SystemInit+0x5c>)
 8000ce2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000ce6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <SystemInit+0x64>)
 8000cea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cee:	609a      	str	r2, [r3, #8]
#endif 
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	f8ff0000 	.word	0xf8ff0000
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d04:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d06:	e003      	b.n	8000d10 <LoopCopyDataInit>

08000d08 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d0a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d0c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d0e:	3104      	adds	r1, #4

08000d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d10:	480a      	ldr	r0, [pc, #40]	; (8000d3c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000d14:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d16:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d18:	d3f6      	bcc.n	8000d08 <CopyDataInit>
  ldr r2, =_sbss
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000d1c:	e002      	b.n	8000d24 <LoopFillZerobss>

08000d1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000d20:	f842 3b04 	str.w	r3, [r2], #4

08000d24 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000d26:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d28:	d3f9      	bcc.n	8000d1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d2a:	f7ff ffb7 	bl	8000c9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d2e:	f006 fa0d 	bl	800714c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d32:	f7ff fa1b 	bl	800016c <main>
  bx lr
 8000d36:	4770      	bx	lr
  ldr r3, =_sidata
 8000d38:	0800727c 	.word	0x0800727c
  ldr r0, =_sdata
 8000d3c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d40:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000d44:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000d48:	200029f4 	.word	0x200029f4

08000d4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <ADC1_2_IRQHandler>
	...

08000d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_Init+0x28>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <HAL_Init+0x28>)
 8000d5a:	f043 0310 	orr.w	r3, r3, #16
 8000d5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d60:	2003      	movs	r0, #3
 8000d62:	f000 f8d1 	bl	8000f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d66:	2000      	movs	r0, #0
 8000d68:	f7ff fee8 	bl	8000b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d6c:	f7ff fdba 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40022000 	.word	0x40022000

08000d7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <HAL_IncTick+0x1c>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <HAL_IncTick+0x20>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4a03      	ldr	r2, [pc, #12]	; (8000d9c <HAL_IncTick+0x20>)
 8000d8e:	6013      	str	r3, [r2, #0]
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	200029b0 	.word	0x200029b0

08000da0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b02      	ldr	r3, [pc, #8]	; (8000db0 <HAL_GetTick+0x10>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	200029b0 	.word	0x200029b0

08000db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de6:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	60d3      	str	r3, [r2, #12]
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <__NVIC_GetPriorityGrouping+0x18>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	0a1b      	lsrs	r3, r3, #8
 8000e06:	f003 0307 	and.w	r3, r3, #7
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	db0b      	blt.n	8000e42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	f003 021f 	and.w	r2, r3, #31
 8000e30:	4906      	ldr	r1, [pc, #24]	; (8000e4c <__NVIC_EnableIRQ+0x34>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	095b      	lsrs	r3, r3, #5
 8000e38:	2001      	movs	r0, #1
 8000e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	e000e100 	.word	0xe000e100

08000e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	6039      	str	r1, [r7, #0]
 8000e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	db0a      	blt.n	8000e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	490c      	ldr	r1, [pc, #48]	; (8000e9c <__NVIC_SetPriority+0x4c>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	0112      	lsls	r2, r2, #4
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	440b      	add	r3, r1
 8000e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e78:	e00a      	b.n	8000e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4908      	ldr	r1, [pc, #32]	; (8000ea0 <__NVIC_SetPriority+0x50>)
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	f003 030f 	and.w	r3, r3, #15
 8000e86:	3b04      	subs	r3, #4
 8000e88:	0112      	lsls	r2, r2, #4
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	440b      	add	r3, r1
 8000e8e:	761a      	strb	r2, [r3, #24]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000e100 	.word	0xe000e100
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	; 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f1c3 0307 	rsb	r3, r3, #7
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	bf28      	it	cs
 8000ec2:	2304      	movcs	r3, #4
 8000ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3304      	adds	r3, #4
 8000eca:	2b06      	cmp	r3, #6
 8000ecc:	d902      	bls.n	8000ed4 <NVIC_EncodePriority+0x30>
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3b03      	subs	r3, #3
 8000ed2:	e000      	b.n	8000ed6 <NVIC_EncodePriority+0x32>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef6:	43d9      	mvns	r1, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	4313      	orrs	r3, r2
         );
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3724      	adds	r7, #36	; 0x24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ff4f 	bl	8000db4 <__NVIC_SetPriorityGrouping>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
 8000f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f30:	f7ff ff64 	bl	8000dfc <__NVIC_GetPriorityGrouping>
 8000f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	6978      	ldr	r0, [r7, #20]
 8000f3c:	f7ff ffb2 	bl	8000ea4 <NVIC_EncodePriority>
 8000f40:	4602      	mov	r2, r0
 8000f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff81 	bl	8000e50 <__NVIC_SetPriority>
}
 8000f4e:	bf00      	nop
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff57 	bl	8000e18 <__NVIC_EnableIRQ>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e043      	b.n	8001012 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b22      	ldr	r3, [pc, #136]	; (800101c <HAL_DMA_Init+0xa8>)
 8000f92:	4413      	add	r3, r2
 8000f94:	4a22      	ldr	r2, [pc, #136]	; (8001020 <HAL_DMA_Init+0xac>)
 8000f96:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9a:	091b      	lsrs	r3, r3, #4
 8000f9c:	009a      	lsls	r2, r3, #2
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a1f      	ldr	r2, [pc, #124]	; (8001024 <HAL_DMA_Init+0xb0>)
 8000fa6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2202      	movs	r2, #2
 8000fac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000fbe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000fc2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2201      	movs	r2, #1
 8001004:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	bffdfff8 	.word	0xbffdfff8
 8001020:	cccccccd 	.word	0xcccccccd
 8001024:	40020000 	.word	0x40020000

08001028 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d101      	bne.n	8001048 <HAL_DMA_Start_IT+0x20>
 8001044:	2302      	movs	r3, #2
 8001046:	e04a      	b.n	80010de <HAL_DMA_Start_IT+0xb6>
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2201      	movs	r2, #1
 800104c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001056:	2b01      	cmp	r3, #1
 8001058:	d13a      	bne.n	80010d0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2202      	movs	r2, #2
 800105e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2200      	movs	r2, #0
 8001066:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f022 0201 	bic.w	r2, r2, #1
 8001076:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	68b9      	ldr	r1, [r7, #8]
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f000 f9ae 	bl	80013e0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001088:	2b00      	cmp	r3, #0
 800108a:	d008      	beq.n	800109e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f042 020e 	orr.w	r2, r2, #14
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	e00f      	b.n	80010be <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f022 0204 	bic.w	r2, r2, #4
 80010ac:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f042 020a 	orr.w	r2, r2, #10
 80010bc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f042 0201 	orr.w	r2, r2, #1
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	e005      	b.n	80010dc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80010d8:	2302      	movs	r3, #2
 80010da:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80010dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d005      	beq.n	800110a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2204      	movs	r2, #4
 8001102:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	e051      	b.n	80011ae <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f022 020e 	bic.w	r2, r2, #14
 8001118:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f022 0201 	bic.w	r2, r2, #1
 8001128:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a22      	ldr	r2, [pc, #136]	; (80011b8 <HAL_DMA_Abort_IT+0xd0>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d029      	beq.n	8001188 <HAL_DMA_Abort_IT+0xa0>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a20      	ldr	r2, [pc, #128]	; (80011bc <HAL_DMA_Abort_IT+0xd4>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d022      	beq.n	8001184 <HAL_DMA_Abort_IT+0x9c>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a1f      	ldr	r2, [pc, #124]	; (80011c0 <HAL_DMA_Abort_IT+0xd8>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d01a      	beq.n	800117e <HAL_DMA_Abort_IT+0x96>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a1d      	ldr	r2, [pc, #116]	; (80011c4 <HAL_DMA_Abort_IT+0xdc>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d012      	beq.n	8001178 <HAL_DMA_Abort_IT+0x90>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a1c      	ldr	r2, [pc, #112]	; (80011c8 <HAL_DMA_Abort_IT+0xe0>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d00a      	beq.n	8001172 <HAL_DMA_Abort_IT+0x8a>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a1a      	ldr	r2, [pc, #104]	; (80011cc <HAL_DMA_Abort_IT+0xe4>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d102      	bne.n	800116c <HAL_DMA_Abort_IT+0x84>
 8001166:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800116a:	e00e      	b.n	800118a <HAL_DMA_Abort_IT+0xa2>
 800116c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001170:	e00b      	b.n	800118a <HAL_DMA_Abort_IT+0xa2>
 8001172:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001176:	e008      	b.n	800118a <HAL_DMA_Abort_IT+0xa2>
 8001178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800117c:	e005      	b.n	800118a <HAL_DMA_Abort_IT+0xa2>
 800117e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001182:	e002      	b.n	800118a <HAL_DMA_Abort_IT+0xa2>
 8001184:	2310      	movs	r3, #16
 8001186:	e000      	b.n	800118a <HAL_DMA_Abort_IT+0xa2>
 8001188:	2301      	movs	r3, #1
 800118a:	4a11      	ldr	r2, [pc, #68]	; (80011d0 <HAL_DMA_Abort_IT+0xe8>)
 800118c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2201      	movs	r2, #1
 8001192:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	4798      	blx	r3
    } 
  }
  return status;
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40020008 	.word	0x40020008
 80011bc:	4002001c 	.word	0x4002001c
 80011c0:	40020030 	.word	0x40020030
 80011c4:	40020044 	.word	0x40020044
 80011c8:	40020058 	.word	0x40020058
 80011cc:	4002006c 	.word	0x4002006c
 80011d0:	40020000 	.word	0x40020000

080011d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	2204      	movs	r2, #4
 80011f2:	409a      	lsls	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4013      	ands	r3, r2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d04f      	beq.n	800129c <HAL_DMA_IRQHandler+0xc8>
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	2b00      	cmp	r3, #0
 8001204:	d04a      	beq.n	800129c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0320 	and.w	r3, r3, #32
 8001210:	2b00      	cmp	r3, #0
 8001212:	d107      	bne.n	8001224 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 0204 	bic.w	r2, r2, #4
 8001222:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a66      	ldr	r2, [pc, #408]	; (80013c4 <HAL_DMA_IRQHandler+0x1f0>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d029      	beq.n	8001282 <HAL_DMA_IRQHandler+0xae>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a65      	ldr	r2, [pc, #404]	; (80013c8 <HAL_DMA_IRQHandler+0x1f4>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d022      	beq.n	800127e <HAL_DMA_IRQHandler+0xaa>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a63      	ldr	r2, [pc, #396]	; (80013cc <HAL_DMA_IRQHandler+0x1f8>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d01a      	beq.n	8001278 <HAL_DMA_IRQHandler+0xa4>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a62      	ldr	r2, [pc, #392]	; (80013d0 <HAL_DMA_IRQHandler+0x1fc>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d012      	beq.n	8001272 <HAL_DMA_IRQHandler+0x9e>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a60      	ldr	r2, [pc, #384]	; (80013d4 <HAL_DMA_IRQHandler+0x200>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d00a      	beq.n	800126c <HAL_DMA_IRQHandler+0x98>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a5f      	ldr	r2, [pc, #380]	; (80013d8 <HAL_DMA_IRQHandler+0x204>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d102      	bne.n	8001266 <HAL_DMA_IRQHandler+0x92>
 8001260:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001264:	e00e      	b.n	8001284 <HAL_DMA_IRQHandler+0xb0>
 8001266:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800126a:	e00b      	b.n	8001284 <HAL_DMA_IRQHandler+0xb0>
 800126c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001270:	e008      	b.n	8001284 <HAL_DMA_IRQHandler+0xb0>
 8001272:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001276:	e005      	b.n	8001284 <HAL_DMA_IRQHandler+0xb0>
 8001278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800127c:	e002      	b.n	8001284 <HAL_DMA_IRQHandler+0xb0>
 800127e:	2340      	movs	r3, #64	; 0x40
 8001280:	e000      	b.n	8001284 <HAL_DMA_IRQHandler+0xb0>
 8001282:	2304      	movs	r3, #4
 8001284:	4a55      	ldr	r2, [pc, #340]	; (80013dc <HAL_DMA_IRQHandler+0x208>)
 8001286:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 8094 	beq.w	80013ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800129a:	e08e      	b.n	80013ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	2202      	movs	r2, #2
 80012a2:	409a      	lsls	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4013      	ands	r3, r2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d056      	beq.n	800135a <HAL_DMA_IRQHandler+0x186>
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d051      	beq.n	800135a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0320 	and.w	r3, r3, #32
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d10b      	bne.n	80012dc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 020a 	bic.w	r2, r2, #10
 80012d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a38      	ldr	r2, [pc, #224]	; (80013c4 <HAL_DMA_IRQHandler+0x1f0>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d029      	beq.n	800133a <HAL_DMA_IRQHandler+0x166>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a37      	ldr	r2, [pc, #220]	; (80013c8 <HAL_DMA_IRQHandler+0x1f4>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d022      	beq.n	8001336 <HAL_DMA_IRQHandler+0x162>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a35      	ldr	r2, [pc, #212]	; (80013cc <HAL_DMA_IRQHandler+0x1f8>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d01a      	beq.n	8001330 <HAL_DMA_IRQHandler+0x15c>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a34      	ldr	r2, [pc, #208]	; (80013d0 <HAL_DMA_IRQHandler+0x1fc>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d012      	beq.n	800132a <HAL_DMA_IRQHandler+0x156>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a32      	ldr	r2, [pc, #200]	; (80013d4 <HAL_DMA_IRQHandler+0x200>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d00a      	beq.n	8001324 <HAL_DMA_IRQHandler+0x150>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a31      	ldr	r2, [pc, #196]	; (80013d8 <HAL_DMA_IRQHandler+0x204>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d102      	bne.n	800131e <HAL_DMA_IRQHandler+0x14a>
 8001318:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800131c:	e00e      	b.n	800133c <HAL_DMA_IRQHandler+0x168>
 800131e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001322:	e00b      	b.n	800133c <HAL_DMA_IRQHandler+0x168>
 8001324:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001328:	e008      	b.n	800133c <HAL_DMA_IRQHandler+0x168>
 800132a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800132e:	e005      	b.n	800133c <HAL_DMA_IRQHandler+0x168>
 8001330:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001334:	e002      	b.n	800133c <HAL_DMA_IRQHandler+0x168>
 8001336:	2320      	movs	r3, #32
 8001338:	e000      	b.n	800133c <HAL_DMA_IRQHandler+0x168>
 800133a:	2302      	movs	r3, #2
 800133c:	4a27      	ldr	r2, [pc, #156]	; (80013dc <HAL_DMA_IRQHandler+0x208>)
 800133e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134c:	2b00      	cmp	r3, #0
 800134e:	d034      	beq.n	80013ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001358:	e02f      	b.n	80013ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	2208      	movs	r2, #8
 8001360:	409a      	lsls	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4013      	ands	r3, r2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d028      	beq.n	80013bc <HAL_DMA_IRQHandler+0x1e8>
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	f003 0308 	and.w	r3, r3, #8
 8001370:	2b00      	cmp	r3, #0
 8001372:	d023      	beq.n	80013bc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 020e 	bic.w	r2, r2, #14
 8001382:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800138c:	2101      	movs	r1, #1
 800138e:	fa01 f202 	lsl.w	r2, r1, r2
 8001392:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d004      	beq.n	80013bc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	4798      	blx	r3
    }
  }
  return;
 80013ba:	bf00      	nop
 80013bc:	bf00      	nop
}
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40020008 	.word	0x40020008
 80013c8:	4002001c 	.word	0x4002001c
 80013cc:	40020030 	.word	0x40020030
 80013d0:	40020044 	.word	0x40020044
 80013d4:	40020058 	.word	0x40020058
 80013d8:	4002006c 	.word	0x4002006c
 80013dc:	40020000 	.word	0x40020000

080013e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
 80013ec:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f6:	2101      	movs	r1, #1
 80013f8:	fa01 f202 	lsl.w	r2, r1, r2
 80013fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b10      	cmp	r3, #16
 800140c:	d108      	bne.n	8001420 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800141e:	e007      	b.n	8001430 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68ba      	ldr	r2, [r7, #8]
 8001426:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	60da      	str	r2, [r3, #12]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
	...

0800143c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800143c:	b480      	push	{r7}
 800143e:	b08b      	sub	sp, #44	; 0x2c
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001446:	2300      	movs	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144e:	e127      	b.n	80016a0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001450:	2201      	movs	r2, #1
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	69fa      	ldr	r2, [r7, #28]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	429a      	cmp	r2, r3
 800146a:	f040 8116 	bne.w	800169a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b12      	cmp	r3, #18
 8001474:	d034      	beq.n	80014e0 <HAL_GPIO_Init+0xa4>
 8001476:	2b12      	cmp	r3, #18
 8001478:	d80d      	bhi.n	8001496 <HAL_GPIO_Init+0x5a>
 800147a:	2b02      	cmp	r3, #2
 800147c:	d02b      	beq.n	80014d6 <HAL_GPIO_Init+0x9a>
 800147e:	2b02      	cmp	r3, #2
 8001480:	d804      	bhi.n	800148c <HAL_GPIO_Init+0x50>
 8001482:	2b00      	cmp	r3, #0
 8001484:	d031      	beq.n	80014ea <HAL_GPIO_Init+0xae>
 8001486:	2b01      	cmp	r3, #1
 8001488:	d01c      	beq.n	80014c4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800148a:	e048      	b.n	800151e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800148c:	2b03      	cmp	r3, #3
 800148e:	d043      	beq.n	8001518 <HAL_GPIO_Init+0xdc>
 8001490:	2b11      	cmp	r3, #17
 8001492:	d01b      	beq.n	80014cc <HAL_GPIO_Init+0x90>
          break;
 8001494:	e043      	b.n	800151e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001496:	4a89      	ldr	r2, [pc, #548]	; (80016bc <HAL_GPIO_Init+0x280>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d026      	beq.n	80014ea <HAL_GPIO_Init+0xae>
 800149c:	4a87      	ldr	r2, [pc, #540]	; (80016bc <HAL_GPIO_Init+0x280>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d806      	bhi.n	80014b0 <HAL_GPIO_Init+0x74>
 80014a2:	4a87      	ldr	r2, [pc, #540]	; (80016c0 <HAL_GPIO_Init+0x284>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d020      	beq.n	80014ea <HAL_GPIO_Init+0xae>
 80014a8:	4a86      	ldr	r2, [pc, #536]	; (80016c4 <HAL_GPIO_Init+0x288>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d01d      	beq.n	80014ea <HAL_GPIO_Init+0xae>
          break;
 80014ae:	e036      	b.n	800151e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014b0:	4a85      	ldr	r2, [pc, #532]	; (80016c8 <HAL_GPIO_Init+0x28c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d019      	beq.n	80014ea <HAL_GPIO_Init+0xae>
 80014b6:	4a85      	ldr	r2, [pc, #532]	; (80016cc <HAL_GPIO_Init+0x290>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d016      	beq.n	80014ea <HAL_GPIO_Init+0xae>
 80014bc:	4a84      	ldr	r2, [pc, #528]	; (80016d0 <HAL_GPIO_Init+0x294>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d013      	beq.n	80014ea <HAL_GPIO_Init+0xae>
          break;
 80014c2:	e02c      	b.n	800151e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	623b      	str	r3, [r7, #32]
          break;
 80014ca:	e028      	b.n	800151e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	3304      	adds	r3, #4
 80014d2:	623b      	str	r3, [r7, #32]
          break;
 80014d4:	e023      	b.n	800151e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	3308      	adds	r3, #8
 80014dc:	623b      	str	r3, [r7, #32]
          break;
 80014de:	e01e      	b.n	800151e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	330c      	adds	r3, #12
 80014e6:	623b      	str	r3, [r7, #32]
          break;
 80014e8:	e019      	b.n	800151e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d102      	bne.n	80014f8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014f2:	2304      	movs	r3, #4
 80014f4:	623b      	str	r3, [r7, #32]
          break;
 80014f6:	e012      	b.n	800151e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d105      	bne.n	800150c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001500:	2308      	movs	r3, #8
 8001502:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	611a      	str	r2, [r3, #16]
          break;
 800150a:	e008      	b.n	800151e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800150c:	2308      	movs	r3, #8
 800150e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69fa      	ldr	r2, [r7, #28]
 8001514:	615a      	str	r2, [r3, #20]
          break;
 8001516:	e002      	b.n	800151e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001518:	2300      	movs	r3, #0
 800151a:	623b      	str	r3, [r7, #32]
          break;
 800151c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	2bff      	cmp	r3, #255	; 0xff
 8001522:	d801      	bhi.n	8001528 <HAL_GPIO_Init+0xec>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	e001      	b.n	800152c <HAL_GPIO_Init+0xf0>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3304      	adds	r3, #4
 800152c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	2bff      	cmp	r3, #255	; 0xff
 8001532:	d802      	bhi.n	800153a <HAL_GPIO_Init+0xfe>
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	e002      	b.n	8001540 <HAL_GPIO_Init+0x104>
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	3b08      	subs	r3, #8
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	210f      	movs	r1, #15
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	401a      	ands	r2, r3
 8001552:	6a39      	ldr	r1, [r7, #32]
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	431a      	orrs	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 8096 	beq.w	800169a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800156e:	4b59      	ldr	r3, [pc, #356]	; (80016d4 <HAL_GPIO_Init+0x298>)
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	4a58      	ldr	r2, [pc, #352]	; (80016d4 <HAL_GPIO_Init+0x298>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6193      	str	r3, [r2, #24]
 800157a:	4b56      	ldr	r3, [pc, #344]	; (80016d4 <HAL_GPIO_Init+0x298>)
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001586:	4a54      	ldr	r2, [pc, #336]	; (80016d8 <HAL_GPIO_Init+0x29c>)
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	089b      	lsrs	r3, r3, #2
 800158c:	3302      	adds	r3, #2
 800158e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001592:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	f003 0303 	and.w	r3, r3, #3
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	220f      	movs	r2, #15
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	4013      	ands	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a4b      	ldr	r2, [pc, #300]	; (80016dc <HAL_GPIO_Init+0x2a0>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d013      	beq.n	80015da <HAL_GPIO_Init+0x19e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a4a      	ldr	r2, [pc, #296]	; (80016e0 <HAL_GPIO_Init+0x2a4>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d00d      	beq.n	80015d6 <HAL_GPIO_Init+0x19a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a49      	ldr	r2, [pc, #292]	; (80016e4 <HAL_GPIO_Init+0x2a8>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d007      	beq.n	80015d2 <HAL_GPIO_Init+0x196>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a48      	ldr	r2, [pc, #288]	; (80016e8 <HAL_GPIO_Init+0x2ac>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d101      	bne.n	80015ce <HAL_GPIO_Init+0x192>
 80015ca:	2303      	movs	r3, #3
 80015cc:	e006      	b.n	80015dc <HAL_GPIO_Init+0x1a0>
 80015ce:	2304      	movs	r3, #4
 80015d0:	e004      	b.n	80015dc <HAL_GPIO_Init+0x1a0>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e002      	b.n	80015dc <HAL_GPIO_Init+0x1a0>
 80015d6:	2301      	movs	r3, #1
 80015d8:	e000      	b.n	80015dc <HAL_GPIO_Init+0x1a0>
 80015da:	2300      	movs	r3, #0
 80015dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015de:	f002 0203 	and.w	r2, r2, #3
 80015e2:	0092      	lsls	r2, r2, #2
 80015e4:	4093      	lsls	r3, r2
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015ec:	493a      	ldr	r1, [pc, #232]	; (80016d8 <HAL_GPIO_Init+0x29c>)
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	089b      	lsrs	r3, r3, #2
 80015f2:	3302      	adds	r3, #2
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d006      	beq.n	8001614 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001606:	4b39      	ldr	r3, [pc, #228]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4938      	ldr	r1, [pc, #224]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	600b      	str	r3, [r1, #0]
 8001612:	e006      	b.n	8001622 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001614:	4b35      	ldr	r3, [pc, #212]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	43db      	mvns	r3, r3
 800161c:	4933      	ldr	r1, [pc, #204]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 800161e:	4013      	ands	r3, r2
 8001620:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d006      	beq.n	800163c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800162e:	4b2f      	ldr	r3, [pc, #188]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	492e      	ldr	r1, [pc, #184]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	604b      	str	r3, [r1, #4]
 800163a:	e006      	b.n	800164a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800163c:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	43db      	mvns	r3, r3
 8001644:	4929      	ldr	r1, [pc, #164]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 8001646:	4013      	ands	r3, r2
 8001648:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d006      	beq.n	8001664 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001656:	4b25      	ldr	r3, [pc, #148]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	4924      	ldr	r1, [pc, #144]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	608b      	str	r3, [r1, #8]
 8001662:	e006      	b.n	8001672 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001664:	4b21      	ldr	r3, [pc, #132]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	43db      	mvns	r3, r3
 800166c:	491f      	ldr	r1, [pc, #124]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 800166e:	4013      	ands	r3, r2
 8001670:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d006      	beq.n	800168c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800167e:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	491a      	ldr	r1, [pc, #104]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	4313      	orrs	r3, r2
 8001688:	60cb      	str	r3, [r1, #12]
 800168a:	e006      	b.n	800169a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 800168e:	68da      	ldr	r2, [r3, #12]
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	43db      	mvns	r3, r3
 8001694:	4915      	ldr	r1, [pc, #84]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 8001696:	4013      	ands	r3, r2
 8001698:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	3301      	adds	r3, #1
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	fa22 f303 	lsr.w	r3, r2, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f47f aed0 	bne.w	8001450 <HAL_GPIO_Init+0x14>
  }
}
 80016b0:	bf00      	nop
 80016b2:	372c      	adds	r7, #44	; 0x2c
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	10210000 	.word	0x10210000
 80016c0:	10110000 	.word	0x10110000
 80016c4:	10120000 	.word	0x10120000
 80016c8:	10310000 	.word	0x10310000
 80016cc:	10320000 	.word	0x10320000
 80016d0:	10220000 	.word	0x10220000
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40010000 	.word	0x40010000
 80016dc:	40010800 	.word	0x40010800
 80016e0:	40010c00 	.word	0x40010c00
 80016e4:	40011000 	.word	0x40011000
 80016e8:	40011400 	.word	0x40011400
 80016ec:	40010400 	.word	0x40010400

080016f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	807b      	strh	r3, [r7, #2]
 80016fc:	4613      	mov	r3, r2
 80016fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001700:	787b      	ldrb	r3, [r7, #1]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001706:	887a      	ldrh	r2, [r7, #2]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800170c:	e003      	b.n	8001716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800170e:	887b      	ldrh	r3, [r7, #2]
 8001710:	041a      	lsls	r2, r3, #16
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	611a      	str	r2, [r3, #16]
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800172c:	695a      	ldr	r2, [r3, #20]
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	4013      	ands	r3, r2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d006      	beq.n	8001744 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001736:	4a05      	ldr	r2, [pc, #20]	; (800174c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe fffa 	bl	8000738 <HAL_GPIO_EXTI_Callback>
  }
}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40010400 	.word	0x40010400

08001750 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001756:	2201      	movs	r2, #1
 8001758:	601a      	str	r2, [r3, #0]
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	420e0020 	.word	0x420e0020

08001768 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e26c      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 8087 	beq.w	8001896 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001788:	4b92      	ldr	r3, [pc, #584]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 030c 	and.w	r3, r3, #12
 8001790:	2b04      	cmp	r3, #4
 8001792:	d00c      	beq.n	80017ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001794:	4b8f      	ldr	r3, [pc, #572]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b08      	cmp	r3, #8
 800179e:	d112      	bne.n	80017c6 <HAL_RCC_OscConfig+0x5e>
 80017a0:	4b8c      	ldr	r3, [pc, #560]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ac:	d10b      	bne.n	80017c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ae:	4b89      	ldr	r3, [pc, #548]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d06c      	beq.n	8001894 <HAL_RCC_OscConfig+0x12c>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d168      	bne.n	8001894 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e246      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ce:	d106      	bne.n	80017de <HAL_RCC_OscConfig+0x76>
 80017d0:	4b80      	ldr	r3, [pc, #512]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a7f      	ldr	r2, [pc, #508]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	e02e      	b.n	800183c <HAL_RCC_OscConfig+0xd4>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10c      	bne.n	8001800 <HAL_RCC_OscConfig+0x98>
 80017e6:	4b7b      	ldr	r3, [pc, #492]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a7a      	ldr	r2, [pc, #488]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	4b78      	ldr	r3, [pc, #480]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a77      	ldr	r2, [pc, #476]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	e01d      	b.n	800183c <HAL_RCC_OscConfig+0xd4>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0xbc>
 800180a:	4b72      	ldr	r3, [pc, #456]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a71      	ldr	r2, [pc, #452]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	4b6f      	ldr	r3, [pc, #444]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a6e      	ldr	r2, [pc, #440]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800181c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	e00b      	b.n	800183c <HAL_RCC_OscConfig+0xd4>
 8001824:	4b6b      	ldr	r3, [pc, #428]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a6a      	ldr	r2, [pc, #424]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800182a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	4b68      	ldr	r3, [pc, #416]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a67      	ldr	r2, [pc, #412]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d013      	beq.n	800186c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7ff faac 	bl	8000da0 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800184c:	f7ff faa8 	bl	8000da0 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b64      	cmp	r3, #100	; 0x64
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e1fa      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185e:	4b5d      	ldr	r3, [pc, #372]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0xe4>
 800186a:	e014      	b.n	8001896 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7ff fa98 	bl	8000da0 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001874:	f7ff fa94 	bl	8000da0 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b64      	cmp	r3, #100	; 0x64
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e1e6      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001886:	4b53      	ldr	r3, [pc, #332]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x10c>
 8001892:	e000      	b.n	8001896 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d063      	beq.n	800196a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018a2:	4b4c      	ldr	r3, [pc, #304]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 030c 	and.w	r3, r3, #12
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00b      	beq.n	80018c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018ae:	4b49      	ldr	r3, [pc, #292]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d11c      	bne.n	80018f4 <HAL_RCC_OscConfig+0x18c>
 80018ba:	4b46      	ldr	r3, [pc, #280]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d116      	bne.n	80018f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c6:	4b43      	ldr	r3, [pc, #268]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d005      	beq.n	80018de <HAL_RCC_OscConfig+0x176>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d001      	beq.n	80018de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e1ba      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018de:	4b3d      	ldr	r3, [pc, #244]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	4939      	ldr	r1, [pc, #228]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f2:	e03a      	b.n	800196a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d020      	beq.n	800193e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018fc:	4b36      	ldr	r3, [pc, #216]	; (80019d8 <HAL_RCC_OscConfig+0x270>)
 80018fe:	2201      	movs	r2, #1
 8001900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001902:	f7ff fa4d 	bl	8000da0 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190a:	f7ff fa49 	bl	8000da0 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e19b      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191c:	4b2d      	ldr	r3, [pc, #180]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001928:	4b2a      	ldr	r3, [pc, #168]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	4927      	ldr	r1, [pc, #156]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001938:	4313      	orrs	r3, r2
 800193a:	600b      	str	r3, [r1, #0]
 800193c:	e015      	b.n	800196a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193e:	4b26      	ldr	r3, [pc, #152]	; (80019d8 <HAL_RCC_OscConfig+0x270>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff fa2c 	bl	8000da0 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800194c:	f7ff fa28 	bl	8000da0 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e17a      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195e:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d03a      	beq.n	80019ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d019      	beq.n	80019b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197e:	4b17      	ldr	r3, [pc, #92]	; (80019dc <HAL_RCC_OscConfig+0x274>)
 8001980:	2201      	movs	r2, #1
 8001982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001984:	f7ff fa0c 	bl	8000da0 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800198c:	f7ff fa08 	bl	8000da0 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e15a      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019aa:	2001      	movs	r0, #1
 80019ac:	f000 fb0a 	bl	8001fc4 <RCC_Delay>
 80019b0:	e01c      	b.n	80019ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_RCC_OscConfig+0x274>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b8:	f7ff f9f2 	bl	8000da0 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019be:	e00f      	b.n	80019e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c0:	f7ff f9ee 	bl	8000da0 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d908      	bls.n	80019e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e140      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
 80019d2:	bf00      	nop
 80019d4:	40021000 	.word	0x40021000
 80019d8:	42420000 	.word	0x42420000
 80019dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e0:	4b9e      	ldr	r3, [pc, #632]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1e9      	bne.n	80019c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80a6 	beq.w	8001b46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019fa:	2300      	movs	r3, #0
 80019fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019fe:	4b97      	ldr	r3, [pc, #604]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10d      	bne.n	8001a26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	4b94      	ldr	r3, [pc, #592]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	4a93      	ldr	r2, [pc, #588]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a14:	61d3      	str	r3, [r2, #28]
 8001a16:	4b91      	ldr	r3, [pc, #580]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a22:	2301      	movs	r3, #1
 8001a24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a26:	4b8e      	ldr	r3, [pc, #568]	; (8001c60 <HAL_RCC_OscConfig+0x4f8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d118      	bne.n	8001a64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a32:	4b8b      	ldr	r3, [pc, #556]	; (8001c60 <HAL_RCC_OscConfig+0x4f8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a8a      	ldr	r2, [pc, #552]	; (8001c60 <HAL_RCC_OscConfig+0x4f8>)
 8001a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a3e:	f7ff f9af 	bl	8000da0 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a46:	f7ff f9ab 	bl	8000da0 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b64      	cmp	r3, #100	; 0x64
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e0fd      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a58:	4b81      	ldr	r3, [pc, #516]	; (8001c60 <HAL_RCC_OscConfig+0x4f8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0f0      	beq.n	8001a46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d106      	bne.n	8001a7a <HAL_RCC_OscConfig+0x312>
 8001a6c:	4b7b      	ldr	r3, [pc, #492]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	4a7a      	ldr	r2, [pc, #488]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	6213      	str	r3, [r2, #32]
 8001a78:	e02d      	b.n	8001ad6 <HAL_RCC_OscConfig+0x36e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10c      	bne.n	8001a9c <HAL_RCC_OscConfig+0x334>
 8001a82:	4b76      	ldr	r3, [pc, #472]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	4a75      	ldr	r2, [pc, #468]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a88:	f023 0301 	bic.w	r3, r3, #1
 8001a8c:	6213      	str	r3, [r2, #32]
 8001a8e:	4b73      	ldr	r3, [pc, #460]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	4a72      	ldr	r2, [pc, #456]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a94:	f023 0304 	bic.w	r3, r3, #4
 8001a98:	6213      	str	r3, [r2, #32]
 8001a9a:	e01c      	b.n	8001ad6 <HAL_RCC_OscConfig+0x36e>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b05      	cmp	r3, #5
 8001aa2:	d10c      	bne.n	8001abe <HAL_RCC_OscConfig+0x356>
 8001aa4:	4b6d      	ldr	r3, [pc, #436]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	4a6c      	ldr	r2, [pc, #432]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001aaa:	f043 0304 	orr.w	r3, r3, #4
 8001aae:	6213      	str	r3, [r2, #32]
 8001ab0:	4b6a      	ldr	r3, [pc, #424]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	4a69      	ldr	r2, [pc, #420]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6213      	str	r3, [r2, #32]
 8001abc:	e00b      	b.n	8001ad6 <HAL_RCC_OscConfig+0x36e>
 8001abe:	4b67      	ldr	r3, [pc, #412]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	4a66      	ldr	r2, [pc, #408]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	6213      	str	r3, [r2, #32]
 8001aca:	4b64      	ldr	r3, [pc, #400]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	4a63      	ldr	r2, [pc, #396]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001ad0:	f023 0304 	bic.w	r3, r3, #4
 8001ad4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d015      	beq.n	8001b0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ade:	f7ff f95f 	bl	8000da0 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae4:	e00a      	b.n	8001afc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae6:	f7ff f95b 	bl	8000da0 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e0ab      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001afc:	4b57      	ldr	r3, [pc, #348]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0ee      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x37e>
 8001b08:	e014      	b.n	8001b34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0a:	f7ff f949 	bl	8000da0 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b10:	e00a      	b.n	8001b28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b12:	f7ff f945 	bl	8000da0 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e095      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b28:	4b4c      	ldr	r3, [pc, #304]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1ee      	bne.n	8001b12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b34:	7dfb      	ldrb	r3, [r7, #23]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d105      	bne.n	8001b46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b3a:	4b48      	ldr	r3, [pc, #288]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	4a47      	ldr	r2, [pc, #284]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 8081 	beq.w	8001c52 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b50:	4b42      	ldr	r3, [pc, #264]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 030c 	and.w	r3, r3, #12
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d061      	beq.n	8001c20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d146      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b64:	4b3f      	ldr	r3, [pc, #252]	; (8001c64 <HAL_RCC_OscConfig+0x4fc>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7ff f919 	bl	8000da0 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b72:	f7ff f915 	bl	8000da0 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e067      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b84:	4b35      	ldr	r3, [pc, #212]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f0      	bne.n	8001b72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b98:	d108      	bne.n	8001bac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b9a:	4b30      	ldr	r3, [pc, #192]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	492d      	ldr	r1, [pc, #180]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bac:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a19      	ldr	r1, [r3, #32]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	430b      	orrs	r3, r1
 8001bbe:	4927      	ldr	r1, [pc, #156]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc4:	4b27      	ldr	r3, [pc, #156]	; (8001c64 <HAL_RCC_OscConfig+0x4fc>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bca:	f7ff f8e9 	bl	8000da0 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd2:	f7ff f8e5 	bl	8000da0 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e037      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001be4:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x46a>
 8001bf0:	e02f      	b.n	8001c52 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf2:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <HAL_RCC_OscConfig+0x4fc>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf8:	f7ff f8d2 	bl	8000da0 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c00:	f7ff f8ce 	bl	8000da0 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e020      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0x498>
 8001c1e:	e018      	b.n	8001c52 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e013      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d106      	bne.n	8001c4e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d001      	beq.n	8001c52 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40007000 	.word	0x40007000
 8001c64:	42420060 	.word	0x42420060

08001c68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0d0      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c7c:	4b6a      	ldr	r3, [pc, #424]	; (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d910      	bls.n	8001cac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8a:	4b67      	ldr	r3, [pc, #412]	; (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 0207 	bic.w	r2, r3, #7
 8001c92:	4965      	ldr	r1, [pc, #404]	; (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9a:	4b63      	ldr	r3, [pc, #396]	; (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0b8      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d020      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cc4:	4b59      	ldr	r3, [pc, #356]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	4a58      	ldr	r2, [pc, #352]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cdc:	4b53      	ldr	r3, [pc, #332]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	4a52      	ldr	r2, [pc, #328]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ce6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce8:	4b50      	ldr	r3, [pc, #320]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	494d      	ldr	r1, [pc, #308]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d040      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d107      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0e:	4b47      	ldr	r3, [pc, #284]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d115      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e07f      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d107      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d26:	4b41      	ldr	r3, [pc, #260]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d109      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e073      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d36:	4b3d      	ldr	r3, [pc, #244]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e06b      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d46:	4b39      	ldr	r3, [pc, #228]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f023 0203 	bic.w	r2, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	4936      	ldr	r1, [pc, #216]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d58:	f7ff f822 	bl	8000da0 <HAL_GetTick>
 8001d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5e:	e00a      	b.n	8001d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d60:	f7ff f81e 	bl	8000da0 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e053      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d76:	4b2d      	ldr	r3, [pc, #180]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 020c 	and.w	r2, r3, #12
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d1eb      	bne.n	8001d60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d88:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d210      	bcs.n	8001db8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d96:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 0207 	bic.w	r2, r3, #7
 8001d9e:	4922      	ldr	r1, [pc, #136]	; (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da6:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d001      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e032      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d008      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc4:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	4916      	ldr	r1, [pc, #88]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d009      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001de2:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	490e      	ldr	r1, [pc, #56]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001df6:	f000 f821 	bl	8001e3c <HAL_RCC_GetSysClockFreq>
 8001dfa:	4601      	mov	r1, r0
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <HAL_RCC_ClockConfig+0x1c8>)
 8001e08:	5cd3      	ldrb	r3, [r2, r3]
 8001e0a:	fa21 f303 	lsr.w	r3, r1, r3
 8001e0e:	4a09      	ldr	r2, [pc, #36]	; (8001e34 <HAL_RCC_ClockConfig+0x1cc>)
 8001e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e12:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <HAL_RCC_ClockConfig+0x1d0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fe90 	bl	8000b3c <HAL_InitTick>

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40022000 	.word	0x40022000
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	0800725c 	.word	0x0800725c
 8001e34:	20000000 	.word	0x20000000
 8001e38:	20000004 	.word	0x20000004

08001e3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e3c:	b490      	push	{r4, r7}
 8001e3e:	b08a      	sub	sp, #40	; 0x28
 8001e40:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e42:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e44:	1d3c      	adds	r4, r7, #4
 8001e46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e4c:	4b28      	ldr	r3, [pc, #160]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	2300      	movs	r3, #0
 8001e58:	61bb      	str	r3, [r7, #24]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e66:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d002      	beq.n	8001e7c <HAL_RCC_GetSysClockFreq+0x40>
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d003      	beq.n	8001e82 <HAL_RCC_GetSysClockFreq+0x46>
 8001e7a:	e02d      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e7e:	623b      	str	r3, [r7, #32]
      break;
 8001e80:	e02d      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	0c9b      	lsrs	r3, r3, #18
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e8e:	4413      	add	r3, r2
 8001e90:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e94:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d013      	beq.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ea0:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	0c5b      	lsrs	r3, r3, #17
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001eae:	4413      	add	r3, r2
 8001eb0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001eb4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	4a0f      	ldr	r2, [pc, #60]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001eba:	fb02 f203 	mul.w	r2, r2, r3
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec6:	e004      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	4a0c      	ldr	r2, [pc, #48]	; (8001efc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ecc:	fb02 f303 	mul.w	r3, r2, r3
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	623b      	str	r3, [r7, #32]
      break;
 8001ed6:	e002      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ed8:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001eda:	623b      	str	r3, [r7, #32]
      break;
 8001edc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ede:	6a3b      	ldr	r3, [r7, #32]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3728      	adds	r7, #40	; 0x28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc90      	pop	{r4, r7}
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	080071e8 	.word	0x080071e8
 8001ef0:	080071f8 	.word	0x080071f8
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	007a1200 	.word	0x007a1200
 8001efc:	003d0900 	.word	0x003d0900

08001f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f04:	4b02      	ldr	r3, [pc, #8]	; (8001f10 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f06:	681b      	ldr	r3, [r3, #0]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr
 8001f10:	20000000 	.word	0x20000000

08001f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f18:	f7ff fff2 	bl	8001f00 <HAL_RCC_GetHCLKFreq>
 8001f1c:	4601      	mov	r1, r0
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	0a1b      	lsrs	r3, r3, #8
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	4a03      	ldr	r2, [pc, #12]	; (8001f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f2a:	5cd3      	ldrb	r3, [r2, r3]
 8001f2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40021000 	.word	0x40021000
 8001f38:	0800726c 	.word	0x0800726c

08001f3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f40:	f7ff ffde 	bl	8001f00 <HAL_RCC_GetHCLKFreq>
 8001f44:	4601      	mov	r1, r0
 8001f46:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	0adb      	lsrs	r3, r3, #11
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	4a03      	ldr	r2, [pc, #12]	; (8001f60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f52:	5cd3      	ldrb	r3, [r2, r3]
 8001f54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	0800726c 	.word	0x0800726c

08001f64 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	220f      	movs	r2, #15
 8001f72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <HAL_RCC_GetClockConfig+0x58>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0203 	and.w	r2, r3, #3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f80:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <HAL_RCC_GetClockConfig+0x58>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <HAL_RCC_GetClockConfig+0x58>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <HAL_RCC_GetClockConfig+0x58>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	08db      	lsrs	r3, r3, #3
 8001f9e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0207 	and.w	r2, r3, #7
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40022000 	.word	0x40022000

08001fc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <RCC_Delay+0x34>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <RCC_Delay+0x38>)
 8001fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd6:	0a5b      	lsrs	r3, r3, #9
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	fb02 f303 	mul.w	r3, r2, r3
 8001fde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fe0:	bf00      	nop
  }
  while (Delay --);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1e5a      	subs	r2, r3, #1
 8001fe6:	60fa      	str	r2, [r7, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1f9      	bne.n	8001fe0 <RCC_Delay+0x1c>
}
 8001fec:	bf00      	nop
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	10624dd3 	.word	0x10624dd3

08002000 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	2300      	movs	r3, #0
 800200e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d07d      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800201c:	2300      	movs	r3, #0
 800201e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002020:	4b4f      	ldr	r3, [pc, #316]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10d      	bne.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800202c:	4b4c      	ldr	r3, [pc, #304]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	4a4b      	ldr	r2, [pc, #300]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002036:	61d3      	str	r3, [r2, #28]
 8002038:	4b49      	ldr	r3, [pc, #292]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002044:	2301      	movs	r3, #1
 8002046:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002048:	4b46      	ldr	r3, [pc, #280]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002050:	2b00      	cmp	r3, #0
 8002052:	d118      	bne.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002054:	4b43      	ldr	r3, [pc, #268]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a42      	ldr	r2, [pc, #264]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800205a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002060:	f7fe fe9e 	bl	8000da0 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002066:	e008      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002068:	f7fe fe9a 	bl	8000da0 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b64      	cmp	r3, #100	; 0x64
 8002074:	d901      	bls.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e06d      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207a:	4b3a      	ldr	r3, [pc, #232]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002086:	4b36      	ldr	r3, [pc, #216]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800208e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d02e      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d027      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020a4:	4b2e      	ldr	r3, [pc, #184]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020ae:	4b2e      	ldr	r3, [pc, #184]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020b4:	4b2c      	ldr	r3, [pc, #176]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020ba:	4a29      	ldr	r2, [pc, #164]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d014      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ca:	f7fe fe69 	bl	8000da0 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d0:	e00a      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d2:	f7fe fe65 	bl	8000da0 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e036      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e8:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0ee      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020f4:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	4917      	ldr	r1, [pc, #92]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002102:	4313      	orrs	r3, r2
 8002104:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002106:	7dfb      	ldrb	r3, [r7, #23]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d105      	bne.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800210c:	4b14      	ldr	r3, [pc, #80]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	4a13      	ldr	r2, [pc, #76]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002116:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002124:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	490b      	ldr	r1, [pc, #44]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002132:	4313      	orrs	r3, r2
 8002134:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b00      	cmp	r3, #0
 8002140:	d008      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002142:	4b07      	ldr	r3, [pc, #28]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	4904      	ldr	r1, [pc, #16]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000
 8002164:	40007000 	.word	0x40007000
 8002168:	42420440 	.word	0x42420440

0800216c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800216c:	b590      	push	{r4, r7, lr}
 800216e:	b08d      	sub	sp, #52	; 0x34
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002174:	4b55      	ldr	r3, [pc, #340]	; (80022cc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002176:	f107 040c 	add.w	r4, r7, #12
 800217a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800217c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002180:	4b53      	ldr	r3, [pc, #332]	; (80022d0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
 800218a:	2300      	movs	r3, #0
 800218c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800218e:	2300      	movs	r3, #0
 8002190:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	2300      	movs	r3, #0
 8002198:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d07f      	beq.n	80022a0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80021a0:	2b10      	cmp	r3, #16
 80021a2:	d002      	beq.n	80021aa <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d048      	beq.n	800223a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80021a8:	e08b      	b.n	80022c2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80021aa:	4b4a      	ldr	r3, [pc, #296]	; (80022d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80021b0:	4b48      	ldr	r3, [pc, #288]	; (80022d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d07f      	beq.n	80022bc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	0c9b      	lsrs	r3, r3, #18
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80021c8:	4413      	add	r3, r2
 80021ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021ce:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d018      	beq.n	800220c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021da:	4b3e      	ldr	r3, [pc, #248]	; (80022d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	0c5b      	lsrs	r3, r3, #17
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80021e8:	4413      	add	r3, r2
 80021ea:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00d      	beq.n	8002216 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80021fa:	4a37      	ldr	r2, [pc, #220]	; (80022d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	fb02 f303 	mul.w	r3, r2, r3
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800220a:	e004      	b.n	8002216 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	4a33      	ldr	r2, [pc, #204]	; (80022dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002210:	fb02 f303 	mul.w	r3, r2, r3
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002216:	4b2f      	ldr	r3, [pc, #188]	; (80022d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002222:	d102      	bne.n	800222a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002226:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002228:	e048      	b.n	80022bc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800222a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4a2c      	ldr	r2, [pc, #176]	; (80022e0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002230:	fba2 2303 	umull	r2, r3, r2, r3
 8002234:	085b      	lsrs	r3, r3, #1
 8002236:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002238:	e040      	b.n	80022bc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800223a:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800224a:	d108      	bne.n	800225e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800225a:	62bb      	str	r3, [r7, #40]	; 0x28
 800225c:	e01f      	b.n	800229e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002268:	d109      	bne.n	800227e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800226a:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002276:	f649 4340 	movw	r3, #40000	; 0x9c40
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
 800227c:	e00f      	b.n	800229e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002284:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002288:	d11a      	bne.n	80022c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800228a:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d014      	beq.n	80022c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002296:	f24f 4324 	movw	r3, #62500	; 0xf424
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800229c:	e010      	b.n	80022c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800229e:	e00f      	b.n	80022c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80022a0:	f7ff fe4c 	bl	8001f3c <HAL_RCC_GetPCLK2Freq>
 80022a4:	4602      	mov	r2, r0
 80022a6:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	0b9b      	lsrs	r3, r3, #14
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	3301      	adds	r3, #1
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80022ba:	e002      	b.n	80022c2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80022bc:	bf00      	nop
 80022be:	e000      	b.n	80022c2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80022c0:	bf00      	nop
    }
  }
  return (frequency);
 80022c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3734      	adds	r7, #52	; 0x34
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd90      	pop	{r4, r7, pc}
 80022cc:	080071fc 	.word	0x080071fc
 80022d0:	0800720c 	.word	0x0800720c
 80022d4:	40021000 	.word	0x40021000
 80022d8:	007a1200 	.word	0x007a1200
 80022dc:	003d0900 	.word	0x003d0900
 80022e0:	aaaaaaab 	.word	0xaaaaaaab

080022e4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e084      	b.n	8002404 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	7c5b      	ldrb	r3, [r3, #17]
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	d105      	bne.n	8002310 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7fe fb22 	bl	8000954 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f87a 	bl	8002410 <HAL_RTC_WaitForSynchro>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d004      	beq.n	800232c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2204      	movs	r2, #4
 8002326:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e06b      	b.n	8002404 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f89c 	bl	800246a <RTC_EnterInitMode>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d004      	beq.n	8002342 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2204      	movs	r2, #4
 800233c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e060      	b.n	8002404 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0207 	bic.w	r2, r2, #7
 8002350:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d005      	beq.n	8002366 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800235a:	4b2c      	ldr	r3, [pc, #176]	; (800240c <HAL_RTC_Init+0x128>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a2b      	ldr	r2, [pc, #172]	; (800240c <HAL_RTC_Init+0x128>)
 8002360:	f023 0301 	bic.w	r3, r3, #1
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002366:	4b29      	ldr	r3, [pc, #164]	; (800240c <HAL_RTC_Init+0x128>)
 8002368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	4926      	ldr	r1, [pc, #152]	; (800240c <HAL_RTC_Init+0x128>)
 8002374:	4313      	orrs	r3, r2
 8002376:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002380:	d003      	beq.n	800238a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	e00e      	b.n	80023a8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800238a:	2001      	movs	r0, #1
 800238c:	f7ff feee 	bl	800216c <HAL_RCCEx_GetPeriphCLKFreq>
 8002390:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d104      	bne.n	80023a2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2204      	movs	r2, #4
 800239c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e030      	b.n	8002404 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	3b01      	subs	r3, #1
 80023a6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f023 010f 	bic.w	r1, r3, #15
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	0c1a      	lsrs	r2, r3, #16
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	0c1b      	lsrs	r3, r3, #16
 80023c6:	041b      	lsls	r3, r3, #16
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	b291      	uxth	r1, r2
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	430b      	orrs	r3, r1
 80023d2:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f870 	bl	80024ba <RTC_ExitInitMode>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d004      	beq.n	80023ea <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2204      	movs	r2, #4
 80023e4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e00c      	b.n	8002404 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002402:	2300      	movs	r3, #0
  }
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40006c00 	.word	0x40006c00

08002410 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e01d      	b.n	8002462 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0208 	bic.w	r2, r2, #8
 8002434:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002436:	f7fe fcb3 	bl	8000da0 <HAL_GetTick>
 800243a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800243c:	e009      	b.n	8002452 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800243e:	f7fe fcaf 	bl	8000da0 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800244c:	d901      	bls.n	8002452 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e007      	b.n	8002462 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0308 	and.w	r3, r3, #8
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0ee      	beq.n	800243e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b084      	sub	sp, #16
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002476:	f7fe fc93 	bl	8000da0 <HAL_GetTick>
 800247a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800247c:	e009      	b.n	8002492 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800247e:	f7fe fc8f 	bl	8000da0 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800248c:	d901      	bls.n	8002492 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e00f      	b.n	80024b2 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0320 	and.w	r3, r3, #32
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0ee      	beq.n	800247e <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0210 	orr.w	r2, r2, #16
 80024ae:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b084      	sub	sp, #16
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0210 	bic.w	r2, r2, #16
 80024d4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80024d6:	f7fe fc63 	bl	8000da0 <HAL_GetTick>
 80024da:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80024dc:	e009      	b.n	80024f2 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80024de:	f7fe fc5f 	bl	8000da0 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024ec:	d901      	bls.n	80024f2 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e007      	b.n	8002502 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0320 	and.w	r3, r3, #32
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0ee      	beq.n	80024de <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e053      	b.n	80025c4 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d106      	bne.n	800253c <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7fe fa30 	bl	800099c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002552:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	ea42 0103 	orr.w	r1, r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	0c1a      	lsrs	r2, r3, #16
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f002 0204 	and.w	r2, r2, #4
 80025a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	69da      	ldr	r2, [r3, #28]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	4613      	mov	r3, r2
 80025d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_SPI_Transmit_DMA+0x20>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e093      	b.n	8002714 <HAL_SPI_Transmit_DMA+0x148>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d002      	beq.n	8002606 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002600:	2302      	movs	r3, #2
 8002602:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002604:	e081      	b.n	800270a <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <HAL_SPI_Transmit_DMA+0x46>
 800260c:	88fb      	ldrh	r3, [r7, #6]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d102      	bne.n	8002618 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002616:	e078      	b.n	800270a <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2203      	movs	r2, #3
 800261c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	88fa      	ldrh	r2, [r7, #6]
 8002630:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	88fa      	ldrh	r2, [r7, #6]
 8002636:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800265e:	d107      	bne.n	8002670 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800266e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002674:	4a29      	ldr	r2, [pc, #164]	; (800271c <HAL_SPI_Transmit_DMA+0x150>)
 8002676:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800267c:	4a28      	ldr	r2, [pc, #160]	; (8002720 <HAL_SPI_Transmit_DMA+0x154>)
 800267e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002684:	4a27      	ldr	r2, [pc, #156]	; (8002724 <HAL_SPI_Transmit_DMA+0x158>)
 8002686:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800268c:	2200      	movs	r2, #0
 800268e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	4619      	mov	r1, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	330c      	adds	r3, #12
 80026a0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026a6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80026a8:	f7fe fcbe 	bl	8001028 <HAL_DMA_Start_IT>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00c      	beq.n	80026cc <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b6:	f043 0210 	orr.w	r2, r3, #16
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80026ca:	e01e      	b.n	800270a <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d6:	2b40      	cmp	r3, #64	; 0x40
 80026d8:	d007      	beq.n	80026ea <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026e8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0220 	orr.w	r2, r2, #32
 80026f8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f042 0202 	orr.w	r2, r2, #2
 8002708:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002712:	7dfb      	ldrb	r3, [r7, #23]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	080029d5 	.word	0x080029d5
 8002720:	0800292f 	.word	0x0800292f
 8002724:	080029f1 	.word	0x080029f1

08002728 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	099b      	lsrs	r3, r3, #6
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10f      	bne.n	800276c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00a      	beq.n	800276c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	099b      	lsrs	r3, r3, #6
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d004      	beq.n	800276c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	4798      	blx	r3
    return;
 800276a:	e0bf      	b.n	80028ec <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	085b      	lsrs	r3, r3, #1
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00a      	beq.n	800278e <HAL_SPI_IRQHandler+0x66>
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	09db      	lsrs	r3, r3, #7
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b00      	cmp	r3, #0
 8002782:	d004      	beq.n	800278e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	4798      	blx	r3
    return;
 800278c:	e0ae      	b.n	80028ec <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	095b      	lsrs	r3, r3, #5
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d106      	bne.n	80027a8 <HAL_SPI_IRQHandler+0x80>
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	099b      	lsrs	r3, r3, #6
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 80a2 	beq.w	80028ec <HAL_SPI_IRQHandler+0x1c4>
       && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 809b 	beq.w	80028ec <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	099b      	lsrs	r3, r3, #6
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d023      	beq.n	800280a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d011      	beq.n	80027f2 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d2:	f043 0204 	orr.w	r2, r3, #4
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	e00b      	b.n	800280a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	693b      	ldr	r3, [r7, #16]
        return;
 8002808:	e070      	b.n	80028ec <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	095b      	lsrs	r3, r3, #5
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d014      	beq.n	8002840 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281a:	f043 0201 	orr.w	r2, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002844:	2b00      	cmp	r3, #0
 8002846:	d050      	beq.n	80028ea <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002856:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d104      	bne.n	8002874 <HAL_SPI_IRQHandler+0x14c>
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	d034      	beq.n	80028de <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0203 	bic.w	r2, r2, #3
 8002882:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002888:	2b00      	cmp	r3, #0
 800288a:	d011      	beq.n	80028b0 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002890:	4a18      	ldr	r2, [pc, #96]	; (80028f4 <HAL_SPI_IRQHandler+0x1cc>)
 8002892:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002898:	4618      	mov	r0, r3
 800289a:	f7fe fc25 	bl	80010e8 <HAL_DMA_Abort_IT>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d016      	beq.n	80028e6 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028bc:	4a0d      	ldr	r2, [pc, #52]	; (80028f4 <HAL_SPI_IRQHandler+0x1cc>)
 80028be:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fe fc0f 	bl	80010e8 <HAL_DMA_Abort_IT>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00a      	beq.n	80028e6 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80028dc:	e003      	b.n	80028e6 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f81c 	bl	800291c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80028e4:	e000      	b.n	80028e8 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80028e6:	bf00      	nop
    return;
 80028e8:	bf00      	nop
 80028ea:	bf00      	nop
  }
}
 80028ec:	3720      	adds	r7, #32
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	08002a31 	.word	0x08002a31

080028f8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr

0800290a <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr

0800292e <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b086      	sub	sp, #24
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800293c:	f7fe fa30 	bl	8000da0 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	2b20      	cmp	r3, #32
 800294e:	d03b      	beq.n	80029c8 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0220 	bic.w	r2, r2, #32
 800295e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0202 	bic.w	r2, r2, #2
 800296e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	2164      	movs	r1, #100	; 0x64
 8002974:	6978      	ldr	r0, [r7, #20]
 8002976:	f000 f8d9 	bl	8002b2c <SPI_EndRxTxTransaction>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002984:	f043 0220 	orr.w	r2, r3, #32
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10a      	bne.n	80029aa <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002994:	2300      	movs	r3, #0
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2200      	movs	r2, #0
 80029ae:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80029c0:	6978      	ldr	r0, [r7, #20]
 80029c2:	f7ff ffab 	bl	800291c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80029c6:	e002      	b.n	80029ce <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80029c8:	6978      	ldr	r0, [r7, #20]
 80029ca:	f7ff ff95 	bl	80028f8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f7ff ff91 	bl	800290a <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80029e8:	bf00      	nop
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0203 	bic.w	r2, r2, #3
 8002a0c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a12:	f043 0210 	orr.w	r2, r3, #16
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f7ff ff7a 	bl	800291c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a28:	bf00      	nop
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f7ff ff66 	bl	800291c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a50:	bf00      	nop
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	4613      	mov	r3, r2
 8002a66:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a68:	e04c      	b.n	8002b04 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a70:	d048      	beq.n	8002b04 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002a72:	f7fe f995 	bl	8000da0 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d902      	bls.n	8002a88 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d13d      	bne.n	8002b04 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a96:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aa0:	d111      	bne.n	8002ac6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aaa:	d004      	beq.n	8002ab6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab4:	d107      	bne.n	8002ac6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ac4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ace:	d10f      	bne.n	8002af0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002aee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e00f      	b.n	8002b24 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	bf0c      	ite	eq
 8002b14:	2301      	moveq	r3, #1
 8002b16:	2300      	movne	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d1a3      	bne.n	8002a6a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2180      	movs	r1, #128	; 0x80
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f7ff ff88 	bl	8002a58 <SPI_WaitFlagStateUntilTimeout>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d007      	beq.n	8002b5e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b52:	f043 0220 	orr.w	r2, r3, #32
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e000      	b.n	8002b60 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e01d      	b.n	8002bb6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d106      	bne.n	8002b94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7fd ffae 	bl	8000af0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2202      	movs	r2, #2
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	f000 fa10 	bl	8002fcc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b085      	sub	sp, #20
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 0201 	orr.w	r2, r2, #1
 8002bd4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b06      	cmp	r3, #6
 8002be6:	d007      	beq.n	8002bf8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr

08002c04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d122      	bne.n	8002c60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d11b      	bne.n	8002c60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f06f 0202 	mvn.w	r2, #2
 8002c30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f9a4 	bl	8002f94 <HAL_TIM_IC_CaptureCallback>
 8002c4c:	e005      	b.n	8002c5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f997 	bl	8002f82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 f9a6 	bl	8002fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d122      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d11b      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f06f 0204 	mvn.w	r2, #4
 8002c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2202      	movs	r2, #2
 8002c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f97a 	bl	8002f94 <HAL_TIM_IC_CaptureCallback>
 8002ca0:	e005      	b.n	8002cae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f96d 	bl	8002f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f97c 	bl	8002fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d122      	bne.n	8002d08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d11b      	bne.n	8002d08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f06f 0208 	mvn.w	r2, #8
 8002cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2204      	movs	r2, #4
 8002cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f950 	bl	8002f94 <HAL_TIM_IC_CaptureCallback>
 8002cf4:	e005      	b.n	8002d02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f943 	bl	8002f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f952 	bl	8002fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	2b10      	cmp	r3, #16
 8002d14:	d122      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 0310 	and.w	r3, r3, #16
 8002d20:	2b10      	cmp	r3, #16
 8002d22:	d11b      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f06f 0210 	mvn.w	r2, #16
 8002d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2208      	movs	r2, #8
 8002d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f926 	bl	8002f94 <HAL_TIM_IC_CaptureCallback>
 8002d48:	e005      	b.n	8002d56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f919 	bl	8002f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f928 	bl	8002fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d10e      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d107      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f06f 0201 	mvn.w	r2, #1
 8002d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7fd fd90 	bl	80008a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d92:	2b80      	cmp	r3, #128	; 0x80
 8002d94:	d10e      	bne.n	8002db4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da0:	2b80      	cmp	r3, #128	; 0x80
 8002da2:	d107      	bne.n	8002db4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fa51 	bl	8003256 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbe:	2b40      	cmp	r3, #64	; 0x40
 8002dc0:	d10e      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dcc:	2b40      	cmp	r3, #64	; 0x40
 8002dce:	d107      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f8ec 	bl	8002fb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	d10e      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0320 	and.w	r3, r3, #32
 8002df8:	2b20      	cmp	r3, #32
 8002dfa:	d107      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0220 	mvn.w	r2, #32
 8002e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fa1c 	bl	8003244 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_TIM_ConfigClockSource+0x18>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e0a6      	b.n	8002f7a <HAL_TIM_ConfigClockSource+0x166>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b40      	cmp	r3, #64	; 0x40
 8002e62:	d067      	beq.n	8002f34 <HAL_TIM_ConfigClockSource+0x120>
 8002e64:	2b40      	cmp	r3, #64	; 0x40
 8002e66:	d80b      	bhi.n	8002e80 <HAL_TIM_ConfigClockSource+0x6c>
 8002e68:	2b10      	cmp	r3, #16
 8002e6a:	d073      	beq.n	8002f54 <HAL_TIM_ConfigClockSource+0x140>
 8002e6c:	2b10      	cmp	r3, #16
 8002e6e:	d802      	bhi.n	8002e76 <HAL_TIM_ConfigClockSource+0x62>
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d06f      	beq.n	8002f54 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002e74:	e078      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e76:	2b20      	cmp	r3, #32
 8002e78:	d06c      	beq.n	8002f54 <HAL_TIM_ConfigClockSource+0x140>
 8002e7a:	2b30      	cmp	r3, #48	; 0x30
 8002e7c:	d06a      	beq.n	8002f54 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002e7e:	e073      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e80:	2b70      	cmp	r3, #112	; 0x70
 8002e82:	d00d      	beq.n	8002ea0 <HAL_TIM_ConfigClockSource+0x8c>
 8002e84:	2b70      	cmp	r3, #112	; 0x70
 8002e86:	d804      	bhi.n	8002e92 <HAL_TIM_ConfigClockSource+0x7e>
 8002e88:	2b50      	cmp	r3, #80	; 0x50
 8002e8a:	d033      	beq.n	8002ef4 <HAL_TIM_ConfigClockSource+0xe0>
 8002e8c:	2b60      	cmp	r3, #96	; 0x60
 8002e8e:	d041      	beq.n	8002f14 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002e90:	e06a      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e96:	d066      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x152>
 8002e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e9c:	d017      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002e9e:	e063      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6818      	ldr	r0, [r3, #0]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	6899      	ldr	r1, [r3, #8]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f000 f965 	bl	800317e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ec2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	609a      	str	r2, [r3, #8]
      break;
 8002ecc:	e04c      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	6899      	ldr	r1, [r3, #8]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f000 f94e 	bl	800317e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ef0:	609a      	str	r2, [r3, #8]
      break;
 8002ef2:	e039      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6818      	ldr	r0, [r3, #0]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	6859      	ldr	r1, [r3, #4]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	461a      	mov	r2, r3
 8002f02:	f000 f8c5 	bl	8003090 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2150      	movs	r1, #80	; 0x50
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 f91c 	bl	800314a <TIM_ITRx_SetConfig>
      break;
 8002f12:	e029      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	6859      	ldr	r1, [r3, #4]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	461a      	mov	r2, r3
 8002f22:	f000 f8e3 	bl	80030ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2160      	movs	r1, #96	; 0x60
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 f90c 	bl	800314a <TIM_ITRx_SetConfig>
      break;
 8002f32:	e019      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	461a      	mov	r2, r3
 8002f42:	f000 f8a5 	bl	8003090 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2140      	movs	r1, #64	; 0x40
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 f8fc 	bl	800314a <TIM_ITRx_SetConfig>
      break;
 8002f52:	e009      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4610      	mov	r0, r2
 8002f60:	f000 f8f3 	bl	800314a <TIM_ITRx_SetConfig>
      break;
 8002f64:	e000      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002f66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr

08002f94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr

08002fa6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr
	...

08002fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a29      	ldr	r2, [pc, #164]	; (8003084 <TIM_Base_SetConfig+0xb8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d00b      	beq.n	8002ffc <TIM_Base_SetConfig+0x30>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fea:	d007      	beq.n	8002ffc <TIM_Base_SetConfig+0x30>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a26      	ldr	r2, [pc, #152]	; (8003088 <TIM_Base_SetConfig+0xbc>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d003      	beq.n	8002ffc <TIM_Base_SetConfig+0x30>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a25      	ldr	r2, [pc, #148]	; (800308c <TIM_Base_SetConfig+0xc0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d108      	bne.n	800300e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a1c      	ldr	r2, [pc, #112]	; (8003084 <TIM_Base_SetConfig+0xb8>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d00b      	beq.n	800302e <TIM_Base_SetConfig+0x62>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800301c:	d007      	beq.n	800302e <TIM_Base_SetConfig+0x62>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a19      	ldr	r2, [pc, #100]	; (8003088 <TIM_Base_SetConfig+0xbc>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d003      	beq.n	800302e <TIM_Base_SetConfig+0x62>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a18      	ldr	r2, [pc, #96]	; (800308c <TIM_Base_SetConfig+0xc0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d108      	bne.n	8003040 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a07      	ldr	r2, [pc, #28]	; (8003084 <TIM_Base_SetConfig+0xb8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d103      	bne.n	8003074 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	615a      	str	r2, [r3, #20]
}
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr
 8003084:	40012c00 	.word	0x40012c00
 8003088:	40000400 	.word	0x40000400
 800308c:	40000800 	.word	0x40000800

08003090 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	f023 0201 	bic.w	r2, r3, #1
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f023 030a 	bic.w	r3, r3, #10
 80030cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	621a      	str	r2, [r3, #32]
}
 80030e2:	bf00      	nop
 80030e4:	371c      	adds	r7, #28
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr

080030ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	f023 0210 	bic.w	r2, r3, #16
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003116:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	031b      	lsls	r3, r3, #12
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	4313      	orrs	r3, r2
 8003120:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003128:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	621a      	str	r2, [r3, #32]
}
 8003140:	bf00      	nop
 8003142:	371c      	adds	r7, #28
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr

0800314a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800314a:	b480      	push	{r7}
 800314c:	b085      	sub	sp, #20
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003160:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	f043 0307 	orr.w	r3, r3, #7
 800316c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	609a      	str	r2, [r3, #8]
}
 8003174:	bf00      	nop
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr

0800317e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800317e:	b480      	push	{r7}
 8003180:	b087      	sub	sp, #28
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003198:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	021a      	lsls	r2, r3, #8
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	431a      	orrs	r2, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	609a      	str	r2, [r3, #8]
}
 80031b2:	bf00      	nop
 80031b4:	371c      	adds	r7, #28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e032      	b.n	800323a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800320c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	4313      	orrs	r3, r2
 8003216:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr

08003244 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	bc80      	pop	{r7}
 8003254:	4770      	bx	lr

08003256 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr

08003268 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800326e:	f3ef 8305 	mrs	r3, IPSR
 8003272:	60bb      	str	r3, [r7, #8]
  return(result);
 8003274:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10f      	bne.n	800329a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800327a:	f3ef 8310 	mrs	r3, PRIMASK
 800327e:	607b      	str	r3, [r7, #4]
  return(result);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d109      	bne.n	800329a <osKernelInitialize+0x32>
 8003286:	4b10      	ldr	r3, [pc, #64]	; (80032c8 <osKernelInitialize+0x60>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d109      	bne.n	80032a2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800328e:	f3ef 8311 	mrs	r3, BASEPRI
 8003292:	603b      	str	r3, [r7, #0]
  return(result);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800329a:	f06f 0305 	mvn.w	r3, #5
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	e00c      	b.n	80032bc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80032a2:	4b09      	ldr	r3, [pc, #36]	; (80032c8 <osKernelInitialize+0x60>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d105      	bne.n	80032b6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80032aa:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <osKernelInitialize+0x60>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	e002      	b.n	80032bc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80032b6:	f04f 33ff 	mov.w	r3, #4294967295
 80032ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80032bc:	68fb      	ldr	r3, [r7, #12]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr
 80032c8:	2000035c 	.word	0x2000035c

080032cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032d2:	f3ef 8305 	mrs	r3, IPSR
 80032d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80032d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10f      	bne.n	80032fe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032de:	f3ef 8310 	mrs	r3, PRIMASK
 80032e2:	607b      	str	r3, [r7, #4]
  return(result);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d109      	bne.n	80032fe <osKernelStart+0x32>
 80032ea:	4b11      	ldr	r3, [pc, #68]	; (8003330 <osKernelStart+0x64>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d109      	bne.n	8003306 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032f2:	f3ef 8311 	mrs	r3, BASEPRI
 80032f6:	603b      	str	r3, [r7, #0]
  return(result);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <osKernelStart+0x3a>
    stat = osErrorISR;
 80032fe:	f06f 0305 	mvn.w	r3, #5
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	e00e      	b.n	8003324 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003306:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <osKernelStart+0x64>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d107      	bne.n	800331e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800330e:	4b08      	ldr	r3, [pc, #32]	; (8003330 <osKernelStart+0x64>)
 8003310:	2202      	movs	r2, #2
 8003312:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003314:	f002 f826 	bl	8005364 <vTaskStartScheduler>
      stat = osOK;
 8003318:	2300      	movs	r3, #0
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	e002      	b.n	8003324 <osKernelStart+0x58>
    } else {
      stat = osError;
 800331e:	f04f 33ff 	mov.w	r3, #4294967295
 8003322:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003324:	68fb      	ldr	r3, [r7, #12]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	2000035c 	.word	0x2000035c

08003334 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003334:	b580      	push	{r7, lr}
 8003336:	b092      	sub	sp, #72	; 0x48
 8003338:	af04      	add	r7, sp, #16
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003344:	f3ef 8305 	mrs	r3, IPSR
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800334c:	2b00      	cmp	r3, #0
 800334e:	f040 8094 	bne.w	800347a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003352:	f3ef 8310 	mrs	r3, PRIMASK
 8003356:	623b      	str	r3, [r7, #32]
  return(result);
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	2b00      	cmp	r3, #0
 800335c:	f040 808d 	bne.w	800347a <osThreadNew+0x146>
 8003360:	4b48      	ldr	r3, [pc, #288]	; (8003484 <osThreadNew+0x150>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b02      	cmp	r3, #2
 8003366:	d106      	bne.n	8003376 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003368:	f3ef 8311 	mrs	r3, BASEPRI
 800336c:	61fb      	str	r3, [r7, #28]
  return(result);
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	2b00      	cmp	r3, #0
 8003372:	f040 8082 	bne.w	800347a <osThreadNew+0x146>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d07e      	beq.n	800347a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800337c:	2380      	movs	r3, #128	; 0x80
 800337e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003380:	2318      	movs	r3, #24
 8003382:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003384:	2300      	movs	r3, #0
 8003386:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003388:	f107 031b 	add.w	r3, r7, #27
 800338c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800338e:	f04f 33ff 	mov.w	r3, #4294967295
 8003392:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d045      	beq.n	8003426 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <osThreadNew+0x74>
        name = attr->name;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d002      	beq.n	80033b6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80033b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <osThreadNew+0x9a>
 80033bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033be:	2b38      	cmp	r3, #56	; 0x38
 80033c0:	d805      	bhi.n	80033ce <osThreadNew+0x9a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <osThreadNew+0x9e>
        return (NULL);
 80033ce:	2300      	movs	r3, #0
 80033d0:	e054      	b.n	800347c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	089b      	lsrs	r3, r3, #2
 80033e0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00e      	beq.n	8003408 <osThreadNew+0xd4>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	2b5f      	cmp	r3, #95	; 0x5f
 80033f0:	d90a      	bls.n	8003408 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d006      	beq.n	8003408 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <osThreadNew+0xd4>
        mem = 1;
 8003402:	2301      	movs	r3, #1
 8003404:	62bb      	str	r3, [r7, #40]	; 0x28
 8003406:	e010      	b.n	800342a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10c      	bne.n	800342a <osThreadNew+0xf6>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d108      	bne.n	800342a <osThreadNew+0xf6>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d104      	bne.n	800342a <osThreadNew+0xf6>
          mem = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	62bb      	str	r3, [r7, #40]	; 0x28
 8003424:	e001      	b.n	800342a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003426:	2300      	movs	r3, #0
 8003428:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800342a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342c:	2b01      	cmp	r3, #1
 800342e:	d110      	bne.n	8003452 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003438:	9202      	str	r2, [sp, #8]
 800343a:	9301      	str	r3, [sp, #4]
 800343c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003444:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f001 fdf5 	bl	8005036 <xTaskCreateStatic>
 800344c:	4603      	mov	r3, r0
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	e013      	b.n	800347a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003454:	2b00      	cmp	r3, #0
 8003456:	d110      	bne.n	800347a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345a:	b29a      	uxth	r2, r3
 800345c:	f107 0314 	add.w	r3, r7, #20
 8003460:	9301      	str	r3, [sp, #4]
 8003462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f001 fe3c 	bl	80050e8 <xTaskCreate>
 8003470:	4603      	mov	r3, r0
 8003472:	2b01      	cmp	r3, #1
 8003474:	d001      	beq.n	800347a <osThreadNew+0x146>
          hTask = NULL;
 8003476:	2300      	movs	r3, #0
 8003478:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800347a:	697b      	ldr	r3, [r7, #20]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3738      	adds	r7, #56	; 0x38
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	2000035c 	.word	0x2000035c

08003488 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003488:	b580      	push	{r7, lr}
 800348a:	b08c      	sub	sp, #48	; 0x30
 800348c:	af02      	add	r7, sp, #8
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003494:	2300      	movs	r3, #0
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003498:	f3ef 8305 	mrs	r3, IPSR
 800349c:	61bb      	str	r3, [r7, #24]
  return(result);
 800349e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f040 8088 	bne.w	80035b6 <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034a6:	f3ef 8310 	mrs	r3, PRIMASK
 80034aa:	617b      	str	r3, [r7, #20]
  return(result);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f040 8081 	bne.w	80035b6 <osSemaphoreNew+0x12e>
 80034b4:	4b42      	ldr	r3, [pc, #264]	; (80035c0 <osSemaphoreNew+0x138>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d105      	bne.n	80034c8 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80034bc:	f3ef 8311 	mrs	r3, BASEPRI
 80034c0:	613b      	str	r3, [r7, #16]
  return(result);
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d176      	bne.n	80035b6 <osSemaphoreNew+0x12e>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d073      	beq.n	80035b6 <osSemaphoreNew+0x12e>
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d86f      	bhi.n	80035b6 <osSemaphoreNew+0x12e>
    mem = -1;
 80034d6:	f04f 33ff 	mov.w	r3, #4294967295
 80034da:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d015      	beq.n	800350e <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d006      	beq.n	80034f8 <osSemaphoreNew+0x70>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	2b4f      	cmp	r3, #79	; 0x4f
 80034f0:	d902      	bls.n	80034f8 <osSemaphoreNew+0x70>
        mem = 1;
 80034f2:	2301      	movs	r3, #1
 80034f4:	623b      	str	r3, [r7, #32]
 80034f6:	e00c      	b.n	8003512 <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d108      	bne.n	8003512 <osSemaphoreNew+0x8a>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d104      	bne.n	8003512 <osSemaphoreNew+0x8a>
          mem = 0;
 8003508:	2300      	movs	r3, #0
 800350a:	623b      	str	r3, [r7, #32]
 800350c:	e001      	b.n	8003512 <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800350e:	2300      	movs	r3, #0
 8003510:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003518:	d04d      	beq.n	80035b6 <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d129      	bne.n	8003574 <osSemaphoreNew+0xec>
        if (mem == 1) {
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d10b      	bne.n	800353e <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	2303      	movs	r3, #3
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	4613      	mov	r3, r2
 8003530:	2200      	movs	r2, #0
 8003532:	2100      	movs	r1, #0
 8003534:	2001      	movs	r0, #1
 8003536:	f000 fa4d 	bl	80039d4 <xQueueGenericCreateStatic>
 800353a:	6278      	str	r0, [r7, #36]	; 0x24
 800353c:	e005      	b.n	800354a <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800353e:	2203      	movs	r2, #3
 8003540:	2100      	movs	r1, #0
 8003542:	2001      	movs	r0, #1
 8003544:	f000 fab8 	bl	8003ab8 <xQueueGenericCreate>
 8003548:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	2b00      	cmp	r3, #0
 800354e:	d022      	beq.n	8003596 <osSemaphoreNew+0x10e>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d01f      	beq.n	8003596 <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003556:	2300      	movs	r3, #0
 8003558:	2200      	movs	r2, #0
 800355a:	2100      	movs	r1, #0
 800355c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800355e:	f000 fb71 	bl	8003c44 <xQueueGenericSend>
 8003562:	4603      	mov	r3, r0
 8003564:	2b01      	cmp	r3, #1
 8003566:	d016      	beq.n	8003596 <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 8003568:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800356a:	f000 ffe4 	bl	8004536 <vQueueDelete>
            hSemaphore = NULL;
 800356e:	2300      	movs	r3, #0
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
 8003572:	e010      	b.n	8003596 <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d108      	bne.n	800358c <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	461a      	mov	r2, r3
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 faf8 	bl	8003b78 <xQueueCreateCountingSemaphoreStatic>
 8003588:	6278      	str	r0, [r7, #36]	; 0x24
 800358a:	e004      	b.n	8003596 <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800358c:	68b9      	ldr	r1, [r7, #8]
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 fb27 	bl	8003be2 <xQueueCreateCountingSemaphore>
 8003594:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00c      	beq.n	80035b6 <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <osSemaphoreNew+0x122>
          name = attr->name;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	61fb      	str	r3, [r7, #28]
 80035a8:	e001      	b.n	80035ae <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80035ae:	69f9      	ldr	r1, [r7, #28]
 80035b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035b2:	f001 f909 	bl	80047c8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3728      	adds	r7, #40	; 0x28
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	2000035c 	.word	0x2000035c

080035c4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d103      	bne.n	80035e4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80035dc:	f06f 0303 	mvn.w	r3, #3
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	e04b      	b.n	800367c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035e4:	f3ef 8305 	mrs	r3, IPSR
 80035e8:	617b      	str	r3, [r7, #20]
  return(result);
 80035ea:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10f      	bne.n	8003610 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035f0:	f3ef 8310 	mrs	r3, PRIMASK
 80035f4:	613b      	str	r3, [r7, #16]
  return(result);
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d109      	bne.n	8003610 <osSemaphoreAcquire+0x4c>
 80035fc:	4b22      	ldr	r3, [pc, #136]	; (8003688 <osSemaphoreAcquire+0xc4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b02      	cmp	r3, #2
 8003602:	d128      	bne.n	8003656 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003604:	f3ef 8311 	mrs	r3, BASEPRI
 8003608:	60fb      	str	r3, [r7, #12]
  return(result);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d022      	beq.n	8003656 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8003616:	f06f 0303 	mvn.w	r3, #3
 800361a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800361c:	e02d      	b.n	800367a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800361e:	2300      	movs	r3, #0
 8003620:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003622:	f107 0308 	add.w	r3, r7, #8
 8003626:	461a      	mov	r2, r3
 8003628:	2100      	movs	r1, #0
 800362a:	69b8      	ldr	r0, [r7, #24]
 800362c:	f000 ff06 	bl	800443c <xQueueReceiveFromISR>
 8003630:	4603      	mov	r3, r0
 8003632:	2b01      	cmp	r3, #1
 8003634:	d003      	beq.n	800363e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8003636:	f06f 0302 	mvn.w	r3, #2
 800363a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800363c:	e01d      	b.n	800367a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d01a      	beq.n	800367a <osSemaphoreAcquire+0xb6>
 8003644:	4b11      	ldr	r3, [pc, #68]	; (800368c <osSemaphoreAcquire+0xc8>)
 8003646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8003654:	e011      	b.n	800367a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003656:	6839      	ldr	r1, [r7, #0]
 8003658:	69b8      	ldr	r0, [r7, #24]
 800365a:	f000 fde7 	bl	800422c <xQueueSemaphoreTake>
 800365e:	4603      	mov	r3, r0
 8003660:	2b01      	cmp	r3, #1
 8003662:	d00b      	beq.n	800367c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800366a:	f06f 0301 	mvn.w	r3, #1
 800366e:	61fb      	str	r3, [r7, #28]
 8003670:	e004      	b.n	800367c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8003672:	f06f 0302 	mvn.w	r3, #2
 8003676:	61fb      	str	r3, [r7, #28]
 8003678:	e000      	b.n	800367c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800367a:	bf00      	nop
      }
    }
  }

  return (stat);
 800367c:	69fb      	ldr	r3, [r7, #28]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3720      	adds	r7, #32
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	2000035c 	.word	0x2000035c
 800368c:	e000ed04 	.word	0xe000ed04

08003690 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800369c:	2300      	movs	r3, #0
 800369e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d103      	bne.n	80036ae <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80036a6:	f06f 0303 	mvn.w	r3, #3
 80036aa:	61fb      	str	r3, [r7, #28]
 80036ac:	e03e      	b.n	800372c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036ae:	f3ef 8305 	mrs	r3, IPSR
 80036b2:	617b      	str	r3, [r7, #20]
  return(result);
 80036b4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10f      	bne.n	80036da <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ba:	f3ef 8310 	mrs	r3, PRIMASK
 80036be:	613b      	str	r3, [r7, #16]
  return(result);
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d109      	bne.n	80036da <osSemaphoreRelease+0x4a>
 80036c6:	4b1c      	ldr	r3, [pc, #112]	; (8003738 <osSemaphoreRelease+0xa8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d120      	bne.n	8003710 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036ce:	f3ef 8311 	mrs	r3, BASEPRI
 80036d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d01a      	beq.n	8003710 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80036da:	2300      	movs	r3, #0
 80036dc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80036de:	f107 0308 	add.w	r3, r7, #8
 80036e2:	4619      	mov	r1, r3
 80036e4:	69b8      	ldr	r0, [r7, #24]
 80036e6:	f000 fc3b 	bl	8003f60 <xQueueGiveFromISR>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d003      	beq.n	80036f8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80036f0:	f06f 0302 	mvn.w	r3, #2
 80036f4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80036f6:	e018      	b.n	800372a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d015      	beq.n	800372a <osSemaphoreRelease+0x9a>
 80036fe:	4b0f      	ldr	r3, [pc, #60]	; (800373c <osSemaphoreRelease+0xac>)
 8003700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800370e:	e00c      	b.n	800372a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003710:	2300      	movs	r3, #0
 8003712:	2200      	movs	r2, #0
 8003714:	2100      	movs	r1, #0
 8003716:	69b8      	ldr	r0, [r7, #24]
 8003718:	f000 fa94 	bl	8003c44 <xQueueGenericSend>
 800371c:	4603      	mov	r3, r0
 800371e:	2b01      	cmp	r3, #1
 8003720:	d004      	beq.n	800372c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8003722:	f06f 0302 	mvn.w	r3, #2
 8003726:	61fb      	str	r3, [r7, #28]
 8003728:	e000      	b.n	800372c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800372a:	bf00      	nop
    }
  }

  return (stat);
 800372c:	69fb      	ldr	r3, [r7, #28]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3720      	adds	r7, #32
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	2000035c 	.word	0x2000035c
 800373c:	e000ed04 	.word	0xe000ed04

08003740 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4a06      	ldr	r2, [pc, #24]	; (8003768 <vApplicationGetIdleTaskMemory+0x28>)
 8003750:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	4a05      	ldr	r2, [pc, #20]	; (800376c <vApplicationGetIdleTaskMemory+0x2c>)
 8003756:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2280      	movs	r2, #128	; 0x80
 800375c:	601a      	str	r2, [r3, #0]
}
 800375e:	bf00      	nop
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr
 8003768:	20000360 	.word	0x20000360
 800376c:	200003c0 	.word	0x200003c0

08003770 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4a07      	ldr	r2, [pc, #28]	; (800379c <vApplicationGetTimerTaskMemory+0x2c>)
 8003780:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	4a06      	ldr	r2, [pc, #24]	; (80037a0 <vApplicationGetTimerTaskMemory+0x30>)
 8003786:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800378e:	601a      	str	r2, [r3, #0]
}
 8003790:	bf00      	nop
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	200005c0 	.word	0x200005c0
 80037a0:	20000620 	.word	0x20000620

080037a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f103 0208 	add.w	r2, r3, #8
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f04f 32ff 	mov.w	r2, #4294967295
 80037bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f103 0208 	add.w	r2, r3, #8
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f103 0208 	add.w	r2, r3, #8
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr

080037e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bc80      	pop	{r7}
 80037f8:	4770      	bx	lr

080037fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037fa:	b480      	push	{r7}
 80037fc:	b085      	sub	sp, #20
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	601a      	str	r2, [r3, #0]
}
 8003836:	bf00      	nop
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr

08003840 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003856:	d103      	bne.n	8003860 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	e00c      	b.n	800387a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3308      	adds	r3, #8
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	e002      	b.n	800386e <vListInsert+0x2e>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	429a      	cmp	r2, r3
 8003878:	d2f6      	bcs.n	8003868 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	601a      	str	r2, [r3, #0]
}
 80038a6:	bf00      	nop
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr

080038b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6892      	ldr	r2, [r2, #8]
 80038c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6852      	ldr	r2, [r2, #4]
 80038d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d103      	bne.n	80038e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	1e5a      	subs	r2, r3, #1
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr
	...

08003904 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d109      	bne.n	800392c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	60bb      	str	r3, [r7, #8]
 800392a:	e7fe      	b.n	800392a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800392c:	f003 f944 	bl	8006bb8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003938:	68f9      	ldr	r1, [r7, #12]
 800393a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800393c:	fb01 f303 	mul.w	r3, r1, r3
 8003940:	441a      	add	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395c:	3b01      	subs	r3, #1
 800395e:	68f9      	ldr	r1, [r7, #12]
 8003960:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003962:	fb01 f303 	mul.w	r3, r1, r3
 8003966:	441a      	add	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	22ff      	movs	r2, #255	; 0xff
 8003970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	22ff      	movs	r2, #255	; 0xff
 8003978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d114      	bne.n	80039ac <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d01a      	beq.n	80039c0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	3310      	adds	r3, #16
 800398e:	4618      	mov	r0, r3
 8003990:	f001 ff8a 	bl	80058a8 <xTaskRemoveFromEventList>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d012      	beq.n	80039c0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800399a:	4b0d      	ldr	r3, [pc, #52]	; (80039d0 <xQueueGenericReset+0xcc>)
 800399c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	f3bf 8f4f 	dsb	sy
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	e009      	b.n	80039c0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	3310      	adds	r3, #16
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff fef7 	bl	80037a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	3324      	adds	r3, #36	; 0x24
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff fef2 	bl	80037a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80039c0:	f003 f928 	bl	8006c14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80039c4:	2301      	movs	r3, #1
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	e000ed04 	.word	0xe000ed04

080039d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08e      	sub	sp, #56	; 0x38
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d109      	bne.n	80039fc <xQueueGenericCreateStatic+0x28>
 80039e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ec:	f383 8811 	msr	BASEPRI, r3
 80039f0:	f3bf 8f6f 	isb	sy
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039fa:	e7fe      	b.n	80039fa <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d109      	bne.n	8003a16 <xQueueGenericCreateStatic+0x42>
 8003a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a06:	f383 8811 	msr	BASEPRI, r3
 8003a0a:	f3bf 8f6f 	isb	sy
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	627b      	str	r3, [r7, #36]	; 0x24
 8003a14:	e7fe      	b.n	8003a14 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <xQueueGenericCreateStatic+0x4e>
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <xQueueGenericCreateStatic+0x52>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <xQueueGenericCreateStatic+0x54>
 8003a26:	2300      	movs	r3, #0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d109      	bne.n	8003a40 <xQueueGenericCreateStatic+0x6c>
 8003a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	623b      	str	r3, [r7, #32]
 8003a3e:	e7fe      	b.n	8003a3e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d102      	bne.n	8003a4c <xQueueGenericCreateStatic+0x78>
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <xQueueGenericCreateStatic+0x7c>
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e000      	b.n	8003a52 <xQueueGenericCreateStatic+0x7e>
 8003a50:	2300      	movs	r3, #0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d109      	bne.n	8003a6a <xQueueGenericCreateStatic+0x96>
 8003a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5a:	f383 8811 	msr	BASEPRI, r3
 8003a5e:	f3bf 8f6f 	isb	sy
 8003a62:	f3bf 8f4f 	dsb	sy
 8003a66:	61fb      	str	r3, [r7, #28]
 8003a68:	e7fe      	b.n	8003a68 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a6a:	2350      	movs	r3, #80	; 0x50
 8003a6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2b50      	cmp	r3, #80	; 0x50
 8003a72:	d009      	beq.n	8003a88 <xQueueGenericCreateStatic+0xb4>
 8003a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	e7fe      	b.n	8003a86 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00d      	beq.n	8003aae <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a9a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	68b9      	ldr	r1, [r7, #8]
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 f842 	bl	8003b32 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3730      	adds	r7, #48	; 0x30
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08a      	sub	sp, #40	; 0x28
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d109      	bne.n	8003ae0 <xQueueGenericCreate+0x28>
 8003acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	e7fe      	b.n	8003ade <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d102      	bne.n	8003aec <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	e004      	b.n	8003af6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	fb02 f303 	mul.w	r3, r2, r3
 8003af4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	3350      	adds	r3, #80	; 0x50
 8003afa:	4618      	mov	r0, r3
 8003afc:	f003 f952 	bl	8006da4 <pvPortMalloc>
 8003b00:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00f      	beq.n	8003b28 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	3350      	adds	r3, #80	; 0x50
 8003b0c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b16:	79fa      	ldrb	r2, [r7, #7]
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	68b9      	ldr	r1, [r7, #8]
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f805 	bl	8003b32 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003b28:	69bb      	ldr	r3, [r7, #24]
	}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3720      	adds	r7, #32
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b084      	sub	sp, #16
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	607a      	str	r2, [r7, #4]
 8003b3e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d103      	bne.n	8003b4e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	e002      	b.n	8003b54 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b60:	2101      	movs	r1, #1
 8003b62:	69b8      	ldr	r0, [r7, #24]
 8003b64:	f7ff fece 	bl	8003904 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	78fa      	ldrb	r2, [r7, #3]
 8003b6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b70:	bf00      	nop
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08a      	sub	sp, #40	; 0x28
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d109      	bne.n	8003b9e <xQueueCreateCountingSemaphoreStatic+0x26>
 8003b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8e:	f383 8811 	msr	BASEPRI, r3
 8003b92:	f3bf 8f6f 	isb	sy
 8003b96:	f3bf 8f4f 	dsb	sy
 8003b9a:	61bb      	str	r3, [r7, #24]
 8003b9c:	e7fe      	b.n	8003b9c <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d909      	bls.n	8003bba <xQueueCreateCountingSemaphoreStatic+0x42>
 8003ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003baa:	f383 8811 	msr	BASEPRI, r3
 8003bae:	f3bf 8f6f 	isb	sy
 8003bb2:	f3bf 8f4f 	dsb	sy
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	e7fe      	b.n	8003bb8 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003bba:	2302      	movs	r3, #2
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f7ff ff05 	bl	80039d4 <xQueueGenericCreateStatic>
 8003bca:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003bd8:	69fb      	ldr	r3, [r7, #28]
	}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3720      	adds	r7, #32
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b086      	sub	sp, #24
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d109      	bne.n	8003c06 <xQueueCreateCountingSemaphore+0x24>
 8003bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf6:	f383 8811 	msr	BASEPRI, r3
 8003bfa:	f3bf 8f6f 	isb	sy
 8003bfe:	f3bf 8f4f 	dsb	sy
 8003c02:	613b      	str	r3, [r7, #16]
 8003c04:	e7fe      	b.n	8003c04 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d909      	bls.n	8003c22 <xQueueCreateCountingSemaphore+0x40>
 8003c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c12:	f383 8811 	msr	BASEPRI, r3
 8003c16:	f3bf 8f6f 	isb	sy
 8003c1a:	f3bf 8f4f 	dsb	sy
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	e7fe      	b.n	8003c20 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003c22:	2202      	movs	r2, #2
 8003c24:	2100      	movs	r1, #0
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff ff46 	bl	8003ab8 <xQueueGenericCreate>
 8003c2c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003c3a:	697b      	ldr	r3, [r7, #20]
	}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08e      	sub	sp, #56	; 0x38
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c52:	2300      	movs	r3, #0
 8003c54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d109      	bne.n	8003c74 <xQueueGenericSend+0x30>
 8003c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c64:	f383 8811 	msr	BASEPRI, r3
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c72:	e7fe      	b.n	8003c72 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d103      	bne.n	8003c82 <xQueueGenericSend+0x3e>
 8003c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <xQueueGenericSend+0x42>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <xQueueGenericSend+0x44>
 8003c86:	2300      	movs	r3, #0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d109      	bne.n	8003ca0 <xQueueGenericSend+0x5c>
 8003c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c90:	f383 8811 	msr	BASEPRI, r3
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9e:	e7fe      	b.n	8003c9e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d103      	bne.n	8003cae <xQueueGenericSend+0x6a>
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <xQueueGenericSend+0x6e>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e000      	b.n	8003cb4 <xQueueGenericSend+0x70>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d109      	bne.n	8003ccc <xQueueGenericSend+0x88>
 8003cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbc:	f383 8811 	msr	BASEPRI, r3
 8003cc0:	f3bf 8f6f 	isb	sy
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	623b      	str	r3, [r7, #32]
 8003cca:	e7fe      	b.n	8003cca <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ccc:	f001 ffb4 	bl	8005c38 <xTaskGetSchedulerState>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d102      	bne.n	8003cdc <xQueueGenericSend+0x98>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <xQueueGenericSend+0x9c>
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e000      	b.n	8003ce2 <xQueueGenericSend+0x9e>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <xQueueGenericSend+0xb6>
 8003ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cea:	f383 8811 	msr	BASEPRI, r3
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	61fb      	str	r3, [r7, #28]
 8003cf8:	e7fe      	b.n	8003cf8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003cfa:	f002 ff5d 	bl	8006bb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d302      	bcc.n	8003d10 <xQueueGenericSend+0xcc>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d129      	bne.n	8003d64 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	68b9      	ldr	r1, [r7, #8]
 8003d14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d16:	f000 fc47 	bl	80045a8 <prvCopyDataToQueue>
 8003d1a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d010      	beq.n	8003d46 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d26:	3324      	adds	r3, #36	; 0x24
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f001 fdbd 	bl	80058a8 <xTaskRemoveFromEventList>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d013      	beq.n	8003d5c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d34:	4b3f      	ldr	r3, [pc, #252]	; (8003e34 <xQueueGenericSend+0x1f0>)
 8003d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	f3bf 8f4f 	dsb	sy
 8003d40:	f3bf 8f6f 	isb	sy
 8003d44:	e00a      	b.n	8003d5c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d007      	beq.n	8003d5c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003d4c:	4b39      	ldr	r3, [pc, #228]	; (8003e34 <xQueueGenericSend+0x1f0>)
 8003d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d5c:	f002 ff5a 	bl	8006c14 <vPortExitCritical>
				return pdPASS;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e063      	b.n	8003e2c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d103      	bne.n	8003d72 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d6a:	f002 ff53 	bl	8006c14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	e05c      	b.n	8003e2c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d106      	bne.n	8003d86 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d78:	f107 0314 	add.w	r3, r7, #20
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f001 fdf5 	bl	800596c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d82:	2301      	movs	r3, #1
 8003d84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d86:	f002 ff45 	bl	8006c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d8a:	f001 fb51 	bl	8005430 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d8e:	f002 ff13 	bl	8006bb8 <vPortEnterCritical>
 8003d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d98:	b25b      	sxtb	r3, r3
 8003d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9e:	d103      	bne.n	8003da8 <xQueueGenericSend+0x164>
 8003da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003daa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dae:	b25b      	sxtb	r3, r3
 8003db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db4:	d103      	bne.n	8003dbe <xQueueGenericSend+0x17a>
 8003db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dbe:	f002 ff29 	bl	8006c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003dc2:	1d3a      	adds	r2, r7, #4
 8003dc4:	f107 0314 	add.w	r3, r7, #20
 8003dc8:	4611      	mov	r1, r2
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f001 fde4 	bl	8005998 <xTaskCheckForTimeOut>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d124      	bne.n	8003e20 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003dd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dd8:	f000 fcde 	bl	8004798 <prvIsQueueFull>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d018      	beq.n	8003e14 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de4:	3310      	adds	r3, #16
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	4611      	mov	r1, r2
 8003dea:	4618      	mov	r0, r3
 8003dec:	f001 fd0e 	bl	800580c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003df0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003df2:	f000 fc69 	bl	80046c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003df6:	f001 fb29 	bl	800544c <xTaskResumeAll>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f47f af7c 	bne.w	8003cfa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003e02:	4b0c      	ldr	r3, [pc, #48]	; (8003e34 <xQueueGenericSend+0x1f0>)
 8003e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	e772      	b.n	8003cfa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003e14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e16:	f000 fc57 	bl	80046c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e1a:	f001 fb17 	bl	800544c <xTaskResumeAll>
 8003e1e:	e76c      	b.n	8003cfa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003e20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e22:	f000 fc51 	bl	80046c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e26:	f001 fb11 	bl	800544c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003e2a:	2300      	movs	r3, #0
		}
	}
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3738      	adds	r7, #56	; 0x38
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	e000ed04 	.word	0xe000ed04

08003e38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b08e      	sub	sp, #56	; 0x38
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d109      	bne.n	8003e64 <xQueueGenericSendFromISR+0x2c>
 8003e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
 8003e62:	e7fe      	b.n	8003e62 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d103      	bne.n	8003e72 <xQueueGenericSendFromISR+0x3a>
 8003e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <xQueueGenericSendFromISR+0x3e>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <xQueueGenericSendFromISR+0x40>
 8003e76:	2300      	movs	r3, #0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d109      	bne.n	8003e90 <xQueueGenericSendFromISR+0x58>
 8003e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	623b      	str	r3, [r7, #32]
 8003e8e:	e7fe      	b.n	8003e8e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d103      	bne.n	8003e9e <xQueueGenericSendFromISR+0x66>
 8003e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <xQueueGenericSendFromISR+0x6a>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e000      	b.n	8003ea4 <xQueueGenericSendFromISR+0x6c>
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d109      	bne.n	8003ebc <xQueueGenericSendFromISR+0x84>
 8003ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eac:	f383 8811 	msr	BASEPRI, r3
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	61fb      	str	r3, [r7, #28]
 8003eba:	e7fe      	b.n	8003eba <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ebc:	f002 ff36 	bl	8006d2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003ec0:	f3ef 8211 	mrs	r2, BASEPRI
 8003ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	61ba      	str	r2, [r7, #24]
 8003ed6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003ed8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003eda:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d302      	bcc.n	8003eee <xQueueGenericSendFromISR+0xb6>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d12c      	bne.n	8003f48 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ef4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	68b9      	ldr	r1, [r7, #8]
 8003efc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003efe:	f000 fb53 	bl	80045a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003f02:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0a:	d112      	bne.n	8003f32 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d016      	beq.n	8003f42 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f16:	3324      	adds	r3, #36	; 0x24
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f001 fcc5 	bl	80058a8 <xTaskRemoveFromEventList>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00e      	beq.n	8003f42 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00b      	beq.n	8003f42 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	e007      	b.n	8003f42 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003f32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f36:	3301      	adds	r3, #1
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	b25a      	sxtb	r2, r3
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003f42:	2301      	movs	r3, #1
 8003f44:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003f46:	e001      	b.n	8003f4c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3738      	adds	r7, #56	; 0x38
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b08e      	sub	sp, #56	; 0x38
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d109      	bne.n	8003f88 <xQueueGiveFromISR+0x28>
	__asm volatile
 8003f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	623b      	str	r3, [r7, #32]
 8003f86:	e7fe      	b.n	8003f86 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d009      	beq.n	8003fa4 <xQueueGiveFromISR+0x44>
 8003f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f94:	f383 8811 	msr	BASEPRI, r3
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	61fb      	str	r3, [r7, #28]
 8003fa2:	e7fe      	b.n	8003fa2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d103      	bne.n	8003fb4 <xQueueGiveFromISR+0x54>
 8003fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <xQueueGiveFromISR+0x58>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e000      	b.n	8003fba <xQueueGiveFromISR+0x5a>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d109      	bne.n	8003fd2 <xQueueGiveFromISR+0x72>
 8003fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc2:	f383 8811 	msr	BASEPRI, r3
 8003fc6:	f3bf 8f6f 	isb	sy
 8003fca:	f3bf 8f4f 	dsb	sy
 8003fce:	61bb      	str	r3, [r7, #24]
 8003fd0:	e7fe      	b.n	8003fd0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003fd2:	f002 feab 	bl	8006d2c <vPortValidateInterruptPriority>
	__asm volatile
 8003fd6:	f3ef 8211 	mrs	r2, BASEPRI
 8003fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	617a      	str	r2, [r7, #20]
 8003fec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003fee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d22b      	bcs.n	800405a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004004:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800400c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004012:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004014:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401c:	d112      	bne.n	8004044 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800401e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	2b00      	cmp	r3, #0
 8004024:	d016      	beq.n	8004054 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004028:	3324      	adds	r3, #36	; 0x24
 800402a:	4618      	mov	r0, r3
 800402c:	f001 fc3c 	bl	80058a8 <xTaskRemoveFromEventList>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00e      	beq.n	8004054 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00b      	beq.n	8004054 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2201      	movs	r2, #1
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	e007      	b.n	8004054 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004048:	3301      	adds	r3, #1
 800404a:	b2db      	uxtb	r3, r3
 800404c:	b25a      	sxtb	r2, r3
 800404e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004054:	2301      	movs	r3, #1
 8004056:	637b      	str	r3, [r7, #52]	; 0x34
 8004058:	e001      	b.n	800405e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800405a:	2300      	movs	r3, #0
 800405c:	637b      	str	r3, [r7, #52]	; 0x34
 800405e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004060:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800406a:	4618      	mov	r0, r3
 800406c:	3738      	adds	r7, #56	; 0x38
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08c      	sub	sp, #48	; 0x30
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004080:	2300      	movs	r3, #0
 8004082:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408a:	2b00      	cmp	r3, #0
 800408c:	d109      	bne.n	80040a2 <xQueueReceive+0x2e>
	__asm volatile
 800408e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004092:	f383 8811 	msr	BASEPRI, r3
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	623b      	str	r3, [r7, #32]
 80040a0:	e7fe      	b.n	80040a0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d103      	bne.n	80040b0 <xQueueReceive+0x3c>
 80040a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <xQueueReceive+0x40>
 80040b0:	2301      	movs	r3, #1
 80040b2:	e000      	b.n	80040b6 <xQueueReceive+0x42>
 80040b4:	2300      	movs	r3, #0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d109      	bne.n	80040ce <xQueueReceive+0x5a>
 80040ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040be:	f383 8811 	msr	BASEPRI, r3
 80040c2:	f3bf 8f6f 	isb	sy
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	61fb      	str	r3, [r7, #28]
 80040cc:	e7fe      	b.n	80040cc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040ce:	f001 fdb3 	bl	8005c38 <xTaskGetSchedulerState>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d102      	bne.n	80040de <xQueueReceive+0x6a>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <xQueueReceive+0x6e>
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <xQueueReceive+0x70>
 80040e2:	2300      	movs	r3, #0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d109      	bne.n	80040fc <xQueueReceive+0x88>
 80040e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	61bb      	str	r3, [r7, #24]
 80040fa:	e7fe      	b.n	80040fa <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80040fc:	f002 fd5c 	bl	8006bb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004104:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	2b00      	cmp	r3, #0
 800410a:	d01f      	beq.n	800414c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800410c:	68b9      	ldr	r1, [r7, #8]
 800410e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004110:	f000 fab4 	bl	800467c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	1e5a      	subs	r2, r3, #1
 8004118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800411c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00f      	beq.n	8004144 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004126:	3310      	adds	r3, #16
 8004128:	4618      	mov	r0, r3
 800412a:	f001 fbbd 	bl	80058a8 <xTaskRemoveFromEventList>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d007      	beq.n	8004144 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004134:	4b3c      	ldr	r3, [pc, #240]	; (8004228 <xQueueReceive+0x1b4>)
 8004136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004144:	f002 fd66 	bl	8006c14 <vPortExitCritical>
				return pdPASS;
 8004148:	2301      	movs	r3, #1
 800414a:	e069      	b.n	8004220 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d103      	bne.n	800415a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004152:	f002 fd5f 	bl	8006c14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004156:	2300      	movs	r3, #0
 8004158:	e062      	b.n	8004220 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800415a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415c:	2b00      	cmp	r3, #0
 800415e:	d106      	bne.n	800416e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004160:	f107 0310 	add.w	r3, r7, #16
 8004164:	4618      	mov	r0, r3
 8004166:	f001 fc01 	bl	800596c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800416a:	2301      	movs	r3, #1
 800416c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800416e:	f002 fd51 	bl	8006c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004172:	f001 f95d 	bl	8005430 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004176:	f002 fd1f 	bl	8006bb8 <vPortEnterCritical>
 800417a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004180:	b25b      	sxtb	r3, r3
 8004182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004186:	d103      	bne.n	8004190 <xQueueReceive+0x11c>
 8004188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004192:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004196:	b25b      	sxtb	r3, r3
 8004198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419c:	d103      	bne.n	80041a6 <xQueueReceive+0x132>
 800419e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041a6:	f002 fd35 	bl	8006c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041aa:	1d3a      	adds	r2, r7, #4
 80041ac:	f107 0310 	add.w	r3, r7, #16
 80041b0:	4611      	mov	r1, r2
 80041b2:	4618      	mov	r0, r3
 80041b4:	f001 fbf0 	bl	8005998 <xTaskCheckForTimeOut>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d123      	bne.n	8004206 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041c0:	f000 fad4 	bl	800476c <prvIsQueueEmpty>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d017      	beq.n	80041fa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80041ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041cc:	3324      	adds	r3, #36	; 0x24
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	4611      	mov	r1, r2
 80041d2:	4618      	mov	r0, r3
 80041d4:	f001 fb1a 	bl	800580c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80041d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041da:	f000 fa75 	bl	80046c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80041de:	f001 f935 	bl	800544c <xTaskResumeAll>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d189      	bne.n	80040fc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80041e8:	4b0f      	ldr	r3, [pc, #60]	; (8004228 <xQueueReceive+0x1b4>)
 80041ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	e780      	b.n	80040fc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80041fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041fc:	f000 fa64 	bl	80046c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004200:	f001 f924 	bl	800544c <xTaskResumeAll>
 8004204:	e77a      	b.n	80040fc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004208:	f000 fa5e 	bl	80046c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800420c:	f001 f91e 	bl	800544c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004212:	f000 faab 	bl	800476c <prvIsQueueEmpty>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	f43f af6f 	beq.w	80040fc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800421e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004220:	4618      	mov	r0, r3
 8004222:	3730      	adds	r7, #48	; 0x30
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	e000ed04 	.word	0xe000ed04

0800422c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08e      	sub	sp, #56	; 0x38
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004236:	2300      	movs	r3, #0
 8004238:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800423e:	2300      	movs	r3, #0
 8004240:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004244:	2b00      	cmp	r3, #0
 8004246:	d109      	bne.n	800425c <xQueueSemaphoreTake+0x30>
 8004248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424c:	f383 8811 	msr	BASEPRI, r3
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	623b      	str	r3, [r7, #32]
 800425a:	e7fe      	b.n	800425a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800425c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	2b00      	cmp	r3, #0
 8004262:	d009      	beq.n	8004278 <xQueueSemaphoreTake+0x4c>
 8004264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	61fb      	str	r3, [r7, #28]
 8004276:	e7fe      	b.n	8004276 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004278:	f001 fcde 	bl	8005c38 <xTaskGetSchedulerState>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d102      	bne.n	8004288 <xQueueSemaphoreTake+0x5c>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <xQueueSemaphoreTake+0x60>
 8004288:	2301      	movs	r3, #1
 800428a:	e000      	b.n	800428e <xQueueSemaphoreTake+0x62>
 800428c:	2300      	movs	r3, #0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d109      	bne.n	80042a6 <xQueueSemaphoreTake+0x7a>
 8004292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	61bb      	str	r3, [r7, #24]
 80042a4:	e7fe      	b.n	80042a4 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80042a6:	f002 fc87 	bl	8006bb8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80042aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ae:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80042b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d024      	beq.n	8004300 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80042b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b8:	1e5a      	subs	r2, r3, #1
 80042ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042bc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d104      	bne.n	80042d0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80042c6:	f001 fe33 	bl	8005f30 <pvTaskIncrementMutexHeldCount>
 80042ca:	4602      	mov	r2, r0
 80042cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ce:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00f      	beq.n	80042f8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042da:	3310      	adds	r3, #16
 80042dc:	4618      	mov	r0, r3
 80042de:	f001 fae3 	bl	80058a8 <xTaskRemoveFromEventList>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d007      	beq.n	80042f8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80042e8:	4b53      	ldr	r3, [pc, #332]	; (8004438 <xQueueSemaphoreTake+0x20c>)
 80042ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80042f8:	f002 fc8c 	bl	8006c14 <vPortExitCritical>
				return pdPASS;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e096      	b.n	800442e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d110      	bne.n	8004328 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004308:	2b00      	cmp	r3, #0
 800430a:	d009      	beq.n	8004320 <xQueueSemaphoreTake+0xf4>
 800430c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	617b      	str	r3, [r7, #20]
 800431e:	e7fe      	b.n	800431e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004320:	f002 fc78 	bl	8006c14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004324:	2300      	movs	r3, #0
 8004326:	e082      	b.n	800442e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432a:	2b00      	cmp	r3, #0
 800432c:	d106      	bne.n	800433c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800432e:	f107 030c 	add.w	r3, r7, #12
 8004332:	4618      	mov	r0, r3
 8004334:	f001 fb1a 	bl	800596c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004338:	2301      	movs	r3, #1
 800433a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800433c:	f002 fc6a 	bl	8006c14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004340:	f001 f876 	bl	8005430 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004344:	f002 fc38 	bl	8006bb8 <vPortEnterCritical>
 8004348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800434e:	b25b      	sxtb	r3, r3
 8004350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004354:	d103      	bne.n	800435e <xQueueSemaphoreTake+0x132>
 8004356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800435e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004360:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004364:	b25b      	sxtb	r3, r3
 8004366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436a:	d103      	bne.n	8004374 <xQueueSemaphoreTake+0x148>
 800436c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004374:	f002 fc4e 	bl	8006c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004378:	463a      	mov	r2, r7
 800437a:	f107 030c 	add.w	r3, r7, #12
 800437e:	4611      	mov	r1, r2
 8004380:	4618      	mov	r0, r3
 8004382:	f001 fb09 	bl	8005998 <xTaskCheckForTimeOut>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d132      	bne.n	80043f2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800438c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800438e:	f000 f9ed 	bl	800476c <prvIsQueueEmpty>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d026      	beq.n	80043e6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d109      	bne.n	80043b4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80043a0:	f002 fc0a 	bl	8006bb8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80043a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f001 fc63 	bl	8005c74 <xTaskPriorityInherit>
 80043ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80043b0:	f002 fc30 	bl	8006c14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80043b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b6:	3324      	adds	r3, #36	; 0x24
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	4611      	mov	r1, r2
 80043bc:	4618      	mov	r0, r3
 80043be:	f001 fa25 	bl	800580c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043c4:	f000 f980 	bl	80046c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043c8:	f001 f840 	bl	800544c <xTaskResumeAll>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f47f af69 	bne.w	80042a6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80043d4:	4b18      	ldr	r3, [pc, #96]	; (8004438 <xQueueSemaphoreTake+0x20c>)
 80043d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	f3bf 8f6f 	isb	sy
 80043e4:	e75f      	b.n	80042a6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80043e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043e8:	f000 f96e 	bl	80046c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043ec:	f001 f82e 	bl	800544c <xTaskResumeAll>
 80043f0:	e759      	b.n	80042a6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80043f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043f4:	f000 f968 	bl	80046c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043f8:	f001 f828 	bl	800544c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043fe:	f000 f9b5 	bl	800476c <prvIsQueueEmpty>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	f43f af4e 	beq.w	80042a6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00d      	beq.n	800442c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8004410:	f002 fbd2 	bl	8006bb8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004414:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004416:	f000 f8b0 	bl	800457a <prvGetDisinheritPriorityAfterTimeout>
 800441a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800441c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004422:	4618      	mov	r0, r3
 8004424:	f001 fd00 	bl	8005e28 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004428:	f002 fbf4 	bl	8006c14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800442c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800442e:	4618      	mov	r0, r3
 8004430:	3738      	adds	r7, #56	; 0x38
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	e000ed04 	.word	0xe000ed04

0800443c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b08e      	sub	sp, #56	; 0x38
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800444c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444e:	2b00      	cmp	r3, #0
 8004450:	d109      	bne.n	8004466 <xQueueReceiveFromISR+0x2a>
 8004452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	623b      	str	r3, [r7, #32]
 8004464:	e7fe      	b.n	8004464 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d103      	bne.n	8004474 <xQueueReceiveFromISR+0x38>
 800446c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <xQueueReceiveFromISR+0x3c>
 8004474:	2301      	movs	r3, #1
 8004476:	e000      	b.n	800447a <xQueueReceiveFromISR+0x3e>
 8004478:	2300      	movs	r3, #0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d109      	bne.n	8004492 <xQueueReceiveFromISR+0x56>
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	61fb      	str	r3, [r7, #28]
 8004490:	e7fe      	b.n	8004490 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004492:	f002 fc4b 	bl	8006d2c <vPortValidateInterruptPriority>
	__asm volatile
 8004496:	f3ef 8211 	mrs	r2, BASEPRI
 800449a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	61ba      	str	r2, [r7, #24]
 80044ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80044ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80044b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d02f      	beq.n	800451e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044c8:	68b9      	ldr	r1, [r7, #8]
 80044ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044cc:	f000 f8d6 	bl	800467c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80044d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d2:	1e5a      	subs	r2, r3, #1
 80044d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80044d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80044dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e0:	d112      	bne.n	8004508 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d016      	beq.n	8004518 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ec:	3310      	adds	r3, #16
 80044ee:	4618      	mov	r0, r3
 80044f0:	f001 f9da 	bl	80058a8 <xTaskRemoveFromEventList>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00e      	beq.n	8004518 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00b      	beq.n	8004518 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	e007      	b.n	8004518 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800450c:	3301      	adds	r3, #1
 800450e:	b2db      	uxtb	r3, r3
 8004510:	b25a      	sxtb	r2, r3
 8004512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004518:	2301      	movs	r3, #1
 800451a:	637b      	str	r3, [r7, #52]	; 0x34
 800451c:	e001      	b.n	8004522 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800451e:	2300      	movs	r3, #0
 8004520:	637b      	str	r3, [r7, #52]	; 0x34
 8004522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004524:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800452c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800452e:	4618      	mov	r0, r3
 8004530:	3738      	adds	r7, #56	; 0x38
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d109      	bne.n	800455c <vQueueDelete+0x26>
	__asm volatile
 8004548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	e7fe      	b.n	800455a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 f95b 	bl	8004818 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004568:	2b00      	cmp	r3, #0
 800456a:	d102      	bne.n	8004572 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f002 fcdb 	bl	8006f28 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004572:	bf00      	nop
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800457a:	b480      	push	{r7}
 800457c:	b085      	sub	sp, #20
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	2b00      	cmp	r3, #0
 8004588:	d006      	beq.n	8004598 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	e001      	b.n	800459c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004598:	2300      	movs	r3, #0
 800459a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800459c:	68fb      	ldr	r3, [r7, #12]
	}
 800459e:	4618      	mov	r0, r3
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bc80      	pop	{r7}
 80045a6:	4770      	bx	lr

080045a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80045b4:	2300      	movs	r3, #0
 80045b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10d      	bne.n	80045e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d14d      	bne.n	800466a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f001 fbbc 	bl	8005d50 <xTaskPriorityDisinherit>
 80045d8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	605a      	str	r2, [r3, #4]
 80045e0:	e043      	b.n	800466a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d119      	bne.n	800461c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6898      	ldr	r0, [r3, #8]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f0:	461a      	mov	r2, r3
 80045f2:	68b9      	ldr	r1, [r7, #8]
 80045f4:	f002 fdce 	bl	8007194 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004600:	441a      	add	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	429a      	cmp	r2, r3
 8004610:	d32b      	bcc.n	800466a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	609a      	str	r2, [r3, #8]
 800461a:	e026      	b.n	800466a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	68d8      	ldr	r0, [r3, #12]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	461a      	mov	r2, r3
 8004626:	68b9      	ldr	r1, [r7, #8]
 8004628:	f002 fdb4 	bl	8007194 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	425b      	negs	r3, r3
 8004636:	441a      	add	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d207      	bcs.n	8004658 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	425b      	negs	r3, r3
 8004652:	441a      	add	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d105      	bne.n	800466a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d002      	beq.n	800466a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	3b01      	subs	r3, #1
 8004668:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004672:	697b      	ldr	r3, [r7, #20]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	2b00      	cmp	r3, #0
 800468c:	d018      	beq.n	80046c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68da      	ldr	r2, [r3, #12]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	441a      	add	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d303      	bcc.n	80046b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68d9      	ldr	r1, [r3, #12]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	461a      	mov	r2, r3
 80046ba:	6838      	ldr	r0, [r7, #0]
 80046bc:	f002 fd6a 	bl	8007194 <memcpy>
	}
}
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80046d0:	f002 fa72 	bl	8006bb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046dc:	e011      	b.n	8004702 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d012      	beq.n	800470c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3324      	adds	r3, #36	; 0x24
 80046ea:	4618      	mov	r0, r3
 80046ec:	f001 f8dc 	bl	80058a8 <xTaskRemoveFromEventList>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80046f6:	f001 f9af 	bl	8005a58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004706:	2b00      	cmp	r3, #0
 8004708:	dce9      	bgt.n	80046de <prvUnlockQueue+0x16>
 800470a:	e000      	b.n	800470e <prvUnlockQueue+0x46>
					break;
 800470c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	22ff      	movs	r2, #255	; 0xff
 8004712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004716:	f002 fa7d 	bl	8006c14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800471a:	f002 fa4d 	bl	8006bb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004724:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004726:	e011      	b.n	800474c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d012      	beq.n	8004756 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3310      	adds	r3, #16
 8004734:	4618      	mov	r0, r3
 8004736:	f001 f8b7 	bl	80058a8 <xTaskRemoveFromEventList>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004740:	f001 f98a 	bl	8005a58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004744:	7bbb      	ldrb	r3, [r7, #14]
 8004746:	3b01      	subs	r3, #1
 8004748:	b2db      	uxtb	r3, r3
 800474a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800474c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004750:	2b00      	cmp	r3, #0
 8004752:	dce9      	bgt.n	8004728 <prvUnlockQueue+0x60>
 8004754:	e000      	b.n	8004758 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004756:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	22ff      	movs	r2, #255	; 0xff
 800475c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004760:	f002 fa58 	bl	8006c14 <vPortExitCritical>
}
 8004764:	bf00      	nop
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004774:	f002 fa20 	bl	8006bb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477c:	2b00      	cmp	r3, #0
 800477e:	d102      	bne.n	8004786 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004780:	2301      	movs	r3, #1
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	e001      	b.n	800478a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800478a:	f002 fa43 	bl	8006c14 <vPortExitCritical>

	return xReturn;
 800478e:	68fb      	ldr	r3, [r7, #12]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047a0:	f002 fa0a 	bl	8006bb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d102      	bne.n	80047b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80047b0:	2301      	movs	r3, #1
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	e001      	b.n	80047ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80047b6:	2300      	movs	r3, #0
 80047b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047ba:	f002 fa2b 	bl	8006c14 <vPortExitCritical>

	return xReturn;
 80047be:	68fb      	ldr	r3, [r7, #12]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	e014      	b.n	8004802 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80047d8:	4a0e      	ldr	r2, [pc, #56]	; (8004814 <vQueueAddToRegistry+0x4c>)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10b      	bne.n	80047fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80047e4:	490b      	ldr	r1, [pc, #44]	; (8004814 <vQueueAddToRegistry+0x4c>)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80047ee:	4a09      	ldr	r2, [pc, #36]	; (8004814 <vQueueAddToRegistry+0x4c>)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	4413      	add	r3, r2
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80047fa:	e005      	b.n	8004808 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	3301      	adds	r3, #1
 8004800:	60fb      	str	r3, [r7, #12]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2b07      	cmp	r3, #7
 8004806:	d9e7      	bls.n	80047d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004808:	bf00      	nop
 800480a:	3714      	adds	r7, #20
 800480c:	46bd      	mov	sp, r7
 800480e:	bc80      	pop	{r7}
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	200029b4 	.word	0x200029b4

08004818 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004820:	2300      	movs	r3, #0
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	e016      	b.n	8004854 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004826:	4a0f      	ldr	r2, [pc, #60]	; (8004864 <vQueueUnregisterQueue+0x4c>)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	4413      	add	r3, r2
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	429a      	cmp	r2, r3
 8004834:	d10b      	bne.n	800484e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004836:	4a0b      	ldr	r2, [pc, #44]	; (8004864 <vQueueUnregisterQueue+0x4c>)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2100      	movs	r1, #0
 800483c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004840:	4a08      	ldr	r2, [pc, #32]	; (8004864 <vQueueUnregisterQueue+0x4c>)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	00db      	lsls	r3, r3, #3
 8004846:	4413      	add	r3, r2
 8004848:	2200      	movs	r2, #0
 800484a:	605a      	str	r2, [r3, #4]
				break;
 800484c:	e005      	b.n	800485a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	3301      	adds	r3, #1
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b07      	cmp	r3, #7
 8004858:	d9e5      	bls.n	8004826 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800485a:	bf00      	nop
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	bc80      	pop	{r7}
 8004862:	4770      	bx	lr
 8004864:	200029b4 	.word	0x200029b4

08004868 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004878:	f002 f99e 	bl	8006bb8 <vPortEnterCritical>
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004882:	b25b      	sxtb	r3, r3
 8004884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004888:	d103      	bne.n	8004892 <vQueueWaitForMessageRestricted+0x2a>
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004898:	b25b      	sxtb	r3, r3
 800489a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489e:	d103      	bne.n	80048a8 <vQueueWaitForMessageRestricted+0x40>
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048a8:	f002 f9b4 	bl	8006c14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d106      	bne.n	80048c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	3324      	adds	r3, #36	; 0x24
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	68b9      	ldr	r1, [r7, #8]
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 ffc9 	bl	8005854 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80048c2:	6978      	ldr	r0, [r7, #20]
 80048c4:	f7ff ff00 	bl	80046c8 <prvUnlockQueue>
	}
 80048c8:	bf00      	nop
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08a      	sub	sp, #40	; 0x28
 80048d4:	af02      	add	r7, sp, #8
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b04      	cmp	r3, #4
 80048e0:	d809      	bhi.n	80048f6 <xStreamBufferGenericCreate+0x26>
 80048e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	61bb      	str	r3, [r7, #24]
 80048f4:	e7fe      	b.n	80048f4 <xStreamBufferGenericCreate+0x24>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d909      	bls.n	8004912 <xStreamBufferGenericCreate+0x42>
 80048fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	617b      	str	r3, [r7, #20]
 8004910:	e7fe      	b.n	8004910 <xStreamBufferGenericCreate+0x40>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <xStreamBufferGenericCreate+0x4c>
		{
			xTriggerLevelBytes = ( size_t ) 1; /*lint !e9044 Parameter modified to ensure it doesn't have a dangerous value. */
 8004918:	2301      	movs	r3, #1
 800491a:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	3301      	adds	r3, #1
 8004920:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	3324      	adds	r3, #36	; 0x24
 8004926:	4618      	mov	r0, r3
 8004928:	f002 fa3c 	bl	8006da4 <pvPortMalloc>
 800492c:	61f8      	str	r0, [r7, #28]

		if( pucAllocatedMemory != NULL )
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d009      	beq.n	8004948 <xStreamBufferGenericCreate+0x78>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	69f8      	ldr	r0, [r7, #28]
 8004944:	f000 fb3f 	bl	8004fc6 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t * ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8004948:	69fb      	ldr	r3, [r7, #28]
	}
 800494a:	4618      	mov	r0, r3
 800494c:	3720      	adds	r7, #32
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <xStreamBufferReset>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b08a      	sub	sp, #40	; 0x28
 8004956:	af02      	add	r7, sp, #8
 8004958:	6078      	str	r0, [r7, #4]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	617b      	str	r3, [r7, #20]
BaseType_t xReturn = pdFAIL, xIsMessageBuffer;
 800495e:	2300      	movs	r3, #0
 8004960:	61fb      	str	r3, [r7, #28]

#if( configUSE_TRACE_FACILITY == 1 )
	UBaseType_t uxStreamBufferNumber;
#endif

	configASSERT( pxStreamBuffer );
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d109      	bne.n	800497c <xStreamBufferReset+0x2a>
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	e7fe      	b.n	800497a <xStreamBufferReset+0x28>

	#if( configUSE_TRACE_FACILITY == 1 )
	{
		/* Store the stream buffer number so it can be restored after the
		reset. */
		uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	613b      	str	r3, [r7, #16]
	}
	#endif

	/* Can only reset a message buffer if there are no tasks blocked on it. */
	if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d11f      	bne.n	80049ca <xStreamBufferReset+0x78>
	{
		if( pxStreamBuffer->xTaskWaitingToSend == NULL )
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d11b      	bne.n	80049ca <xStreamBufferReset+0x78>
		{
			if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	7f1b      	ldrb	r3, [r3, #28]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <xStreamBufferReset+0x52>
			{
				xIsMessageBuffer = pdTRUE;
 800499e:	2301      	movs	r3, #1
 80049a0:	61bb      	str	r3, [r7, #24]
 80049a2:	e001      	b.n	80049a8 <xStreamBufferReset+0x56>
			}
			else
			{
				xIsMessageBuffer = pdFALSE;
 80049a4:	2300      	movs	r3, #0
 80049a6:	61bb      	str	r3, [r7, #24]
			}

			prvInitialiseNewStreamBuffer( pxStreamBuffer,
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	6999      	ldr	r1, [r3, #24]
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	689a      	ldr	r2, [r3, #8]
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	68d8      	ldr	r0, [r3, #12]
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	4603      	mov	r3, r0
 80049ba:	6978      	ldr	r0, [r7, #20]
 80049bc:	f000 fb03 	bl	8004fc6 <prvInitialiseNewStreamBuffer>
										  pxStreamBuffer->pucBuffer,
										  pxStreamBuffer->xLength,
										  pxStreamBuffer->xTriggerLevelBytes,
										  xIsMessageBuffer );
			xReturn = pdPASS;
 80049c0:	2301      	movs	r3, #1
 80049c2:	61fb      	str	r3, [r7, #28]

			#if( configUSE_TRACE_FACILITY == 1 )
			{
				pxStreamBuffer->uxStreamBufferNumber = uxStreamBufferNumber;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	621a      	str	r2, [r3, #32]

			traceSTREAM_BUFFER_RESET( xStreamBuffer );
		}
	}

	return xReturn;
 80049ca:	69fb      	ldr	r3, [r7, #28]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3720      	adds	r7, #32
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d109      	bne.n	80049fa <xStreamBufferSpacesAvailable+0x26>
 80049e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	e7fe      	b.n	80049f8 <xStreamBufferSpacesAvailable+0x24>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	689a      	ldr	r2, [r3, #8]
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4413      	add	r3, r2
 8004a04:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	3b01      	subs	r3, #1
 8004a14:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d304      	bcc.n	8004a2a <xStreamBufferSpacesAvailable+0x56>
	{
		xSpace -= pxStreamBuffer->xLength;
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8004a2a:	697b      	ldr	r3, [r7, #20]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	371c      	adds	r7, #28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bc80      	pop	{r7}
 8004a34:	4770      	bx	lr

08004a36 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b090      	sub	sp, #64	; 0x40
 8004a3a:	af02      	add	r7, sp, #8
 8004a3c:	60f8      	str	r0, [r7, #12]
 8004a3e:	60b9      	str	r1, [r7, #8]
 8004a40:	607a      	str	r2, [r7, #4]
 8004a42:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	633b      	str	r3, [r7, #48]	; 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvTxData );
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d109      	bne.n	8004a66 <xStreamBufferSendFromISR+0x30>
 8004a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	623b      	str	r3, [r7, #32]
 8004a64:	e7fe      	b.n	8004a64 <xStreamBufferSendFromISR+0x2e>
	configASSERT( pxStreamBuffer );
 8004a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d109      	bne.n	8004a80 <xStreamBufferSendFromISR+0x4a>
 8004a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a70:	f383 8811 	msr	BASEPRI, r3
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	61fb      	str	r3, [r7, #28]
 8004a7e:	e7fe      	b.n	8004a7e <xStreamBufferSendFromISR+0x48>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8004a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a82:	7f1b      	ldrb	r3, [r3, #28]
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d002      	beq.n	8004a92 <xStreamBufferSendFromISR+0x5c>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8004a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a8e:	3304      	adds	r3, #4
 8004a90:	637b      	str	r3, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8004a92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a94:	f7ff ff9e 	bl	80049d4 <xStreamBufferSpacesAvailable>
 8004a98:	62f8      	str	r0, [r7, #44]	; 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8004a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	68b9      	ldr	r1, [r7, #8]
 8004aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004aa6:	f000 f834 	bl	8004b12 <prvWriteMessageToBuffer>
 8004aaa:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8004aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d02a      	beq.n	8004b08 <xStreamBufferSendFromISR+0xd2>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8004ab2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ab4:	f000 fa68 	bl	8004f88 <prvBytesInBuffer>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d322      	bcc.n	8004b08 <xStreamBufferSendFromISR+0xd2>
	__asm volatile
 8004ac2:	f3ef 8211 	mrs	r2, BASEPRI
 8004ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aca:	f383 8811 	msr	BASEPRI, r3
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	61ba      	str	r2, [r7, #24]
 8004ad8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004ada:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00b      	beq.n	8004afe <xStreamBufferSendFromISR+0xc8>
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae8:	6918      	ldr	r0, [r3, #16]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	2300      	movs	r3, #0
 8004af0:	2200      	movs	r2, #0
 8004af2:	2100      	movs	r1, #0
 8004af4:	f001 fb2c 	bl	8006150 <xTaskGenericNotifyFromISR>
 8004af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afa:	2200      	movs	r2, #0
 8004afc:	611a      	str	r2, [r3, #16]
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f383 8811 	msr	BASEPRI, r3
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 8004b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3738      	adds	r7, #56	; 0x38
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b086      	sub	sp, #24
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	60f8      	str	r0, [r7, #12]
 8004b1a:	60b9      	str	r1, [r7, #8]
 8004b1c:	607a      	str	r2, [r7, #4]
 8004b1e:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d102      	bne.n	8004b2c <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8004b26:	2300      	movs	r3, #0
 8004b28:	617b      	str	r3, [r7, #20]
 8004b2a:	e01d      	b.n	8004b68 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	7f1b      	ldrb	r3, [r3, #28]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d108      	bne.n	8004b4a <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace ); /*lint !e9044 Function parameter modified to ensure it is capped to available space. */
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	4293      	cmp	r3, r2
 8004b42:	bf28      	it	cs
 8004b44:	4613      	movcs	r3, r2
 8004b46:	607b      	str	r3, [r7, #4]
 8004b48:	e00e      	b.n	8004b68 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d308      	bcc.n	8004b64 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8004b52:	2301      	movs	r3, #1
 8004b54:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8004b56:	1d3b      	adds	r3, r7, #4
 8004b58:	2204      	movs	r2, #4
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f000 f92d 	bl	8004dbc <prvWriteBytesToBuffer>
 8004b62:	e001      	b.n	8004b68 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8004b64:	2300      	movs	r3, #0
 8004b66:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d007      	beq.n	8004b7e <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	461a      	mov	r2, r3
 8004b72:	68b9      	ldr	r1, [r7, #8]
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 f921 	bl	8004dbc <prvWriteBytesToBuffer>
 8004b7a:	6138      	str	r0, [r7, #16]
 8004b7c:	e001      	b.n	8004b82 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8004b82:	693b      	ldr	r3, [r7, #16]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b08e      	sub	sp, #56	; 0x38
 8004b90:	af02      	add	r7, sp, #8
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d109      	bne.n	8004bbc <xStreamBufferReceive+0x30>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	61fb      	str	r3, [r7, #28]
 8004bba:	e7fe      	b.n	8004bba <xStreamBufferReceive+0x2e>
	configASSERT( pxStreamBuffer );
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d109      	bne.n	8004bd6 <xStreamBufferReceive+0x4a>
 8004bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	61bb      	str	r3, [r7, #24]
 8004bd4:	e7fe      	b.n	8004bd4 <xStreamBufferReceive+0x48>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	7f1b      	ldrb	r3, [r3, #28]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <xStreamBufferReceive+0x5c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8004be2:	2304      	movs	r3, #4
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
 8004be6:	e001      	b.n	8004bec <xStreamBufferReceive+0x60>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d034      	beq.n	8004c5c <xStreamBufferReceive+0xd0>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8004bf2:	f001 ffe1 	bl	8006bb8 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8004bf6:	6a38      	ldr	r0, [r7, #32]
 8004bf8:	f000 f9c6 	bl	8004f88 <prvBytesInBuffer>
 8004bfc:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8004bfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d815      	bhi.n	8004c32 <xStreamBufferReceive+0xa6>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8004c06:	2000      	movs	r0, #0
 8004c08:	f001 fb6a 	bl	80062e0 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d009      	beq.n	8004c28 <xStreamBufferReceive+0x9c>
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	617b      	str	r3, [r7, #20]
 8004c26:	e7fe      	b.n	8004c26 <xStreamBufferReceive+0x9a>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8004c28:	f000 fff8 	bl	8005c1c <xTaskGetCurrentTaskHandle>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004c32:	f001 ffef 	bl	8006c14 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8004c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d812      	bhi.n	8004c64 <xStreamBufferReceive+0xd8>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, UINT32_MAX, NULL, xTicksToWait );
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f04f 31ff 	mov.w	r1, #4294967295
 8004c46:	2000      	movs	r0, #0
 8004c48:	f001 f986 	bl	8005f58 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8004c52:	6a38      	ldr	r0, [r7, #32]
 8004c54:	f000 f998 	bl	8004f88 <prvBytesInBuffer>
 8004c58:	62b8      	str	r0, [r7, #40]	; 0x28
 8004c5a:	e003      	b.n	8004c64 <xStreamBufferReceive+0xd8>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8004c5c:	6a38      	ldr	r0, [r7, #32]
 8004c5e:	f000 f993 	bl	8004f88 <prvBytesInBuffer>
 8004c62:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8004c64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d91d      	bls.n	8004ca8 <xStreamBufferReceive+0x11c>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	68b9      	ldr	r1, [r7, #8]
 8004c76:	6a38      	ldr	r0, [r7, #32]
 8004c78:	f000 f81b 	bl	8004cb2 <prvReadMessageFromBuffer>
 8004c7c:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8004c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d011      	beq.n	8004ca8 <xStreamBufferReceive+0x11c>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8004c84:	f000 fbd4 	bl	8005430 <vTaskSuspendAll>
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d009      	beq.n	8004ca4 <xStreamBufferReceive+0x118>
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	6958      	ldr	r0, [r3, #20]
 8004c94:	2300      	movs	r3, #0
 8004c96:	2200      	movs	r2, #0
 8004c98:	2100      	movs	r1, #0
 8004c9a:	f001 f9b7 	bl	800600c <xTaskGenericNotify>
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	615a      	str	r2, [r3, #20]
 8004ca4:	f000 fbd2 	bl	800544c <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8004ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3730      	adds	r7, #48	; 0x30
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b088      	sub	sp, #32
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	60f8      	str	r0, [r7, #12]
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	607a      	str	r2, [r7, #4]
 8004cbe:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8004cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d017      	beq.n	8004cf6 <prvReadMessageFromBuffer+0x44>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	61fb      	str	r3, [r7, #28]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8004ccc:	f107 0114 	add.w	r1, r7, #20
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 f8e0 	bl	8004e9a <prvReadBytesFromBuffer>

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d207      	bcs.n	8004cfa <prvReadMessageFromBuffer+0x48>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	69fa      	ldr	r2, [r7, #28]
 8004cee:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	e001      	b.n	8004cfa <prvReadMessageFromBuffer+0x48>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	617b      	str	r3, [r7, #20]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	68b9      	ldr	r1, [r7, #8]
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 f8ca 	bl	8004e9a <prvReadBytesFromBuffer>
 8004d06:	61b8      	str	r0, [r7, #24]

	return xReceivedLength;
 8004d08:	69bb      	ldr	r3, [r7, #24]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3720      	adds	r7, #32
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <xStreamBufferIsEmpty>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer )
{
 8004d12:	b480      	push	{r7}
 8004d14:	b087      	sub	sp, #28
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	613b      	str	r3, [r7, #16]
BaseType_t xReturn;
size_t xTail;

	configASSERT( pxStreamBuffer );
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d109      	bne.n	8004d38 <xStreamBufferIsEmpty+0x26>
 8004d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d28:	f383 8811 	msr	BASEPRI, r3
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	60bb      	str	r3, [r7, #8]
 8004d36:	e7fe      	b.n	8004d36 <xStreamBufferIsEmpty+0x24>

	/* True if no bytes are available. */
	xTail = pxStreamBuffer->xTail;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	60fb      	str	r3, [r7, #12]
	if( pxStreamBuffer->xHead == xTail )
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d102      	bne.n	8004d4e <xStreamBufferIsEmpty+0x3c>
	{
		xReturn = pdTRUE;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	617b      	str	r3, [r7, #20]
 8004d4c:	e001      	b.n	8004d52 <xStreamBufferIsEmpty+0x40>
	}
	else
	{
		xReturn = pdFALSE;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004d52:	697b      	ldr	r3, [r7, #20]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	371c      	adds	r7, #28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bc80      	pop	{r7}
 8004d5c:	4770      	bx	lr

08004d5e <xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b086      	sub	sp, #24
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
size_t xBytesToStoreMessageLength;
const StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxStreamBuffer );
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d109      	bne.n	8004d84 <xStreamBufferIsFull+0x26>
 8004d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	60bb      	str	r3, [r7, #8]
 8004d82:	e7fe      	b.n	8004d82 <xStreamBufferIsFull+0x24>

	/* This generic version of the receive function is used by both message
	buffers, which store discrete messages, and stream buffers, which store a
	continuous stream of bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	7f1b      	ldrb	r3, [r3, #28]
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d002      	beq.n	8004d96 <xStreamBufferIsFull+0x38>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8004d90:	2304      	movs	r3, #4
 8004d92:	613b      	str	r3, [r7, #16]
 8004d94:	e001      	b.n	8004d9a <xStreamBufferIsFull+0x3c>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	613b      	str	r3, [r7, #16]
	}

	/* True if the available space equals zero. */
	if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7ff fe1a 	bl	80049d4 <xStreamBufferSpacesAvailable>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d302      	bcc.n	8004dae <xStreamBufferIsFull+0x50>
	{
		xReturn = pdTRUE;
 8004da8:	2301      	movs	r3, #1
 8004daa:	617b      	str	r3, [r7, #20]
 8004dac:	e001      	b.n	8004db2 <xStreamBufferIsFull+0x54>
	}
	else
	{
		xReturn = pdFALSE;
 8004dae:	2300      	movs	r3, #0
 8004db0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004db2:	697b      	ldr	r3, [r7, #20]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3718      	adds	r7, #24
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08a      	sub	sp, #40	; 0x28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d109      	bne.n	8004de2 <prvWriteBytesToBuffer+0x26>
 8004dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	61fb      	str	r3, [r7, #28]
 8004de0:	e7fe      	b.n	8004de0 <prvWriteBytesToBuffer+0x24>

	xNextHead = pxStreamBuffer->xHead;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	4293      	cmp	r3, r2
 8004df4:	bf28      	it	cs
 8004df6:	4613      	movcs	r3, r2
 8004df8:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8004dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	441a      	add	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d909      	bls.n	8004e1c <prvWriteBytesToBuffer+0x60>
 8004e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	61bb      	str	r3, [r7, #24]
 8004e1a:	e7fe      	b.n	8004e1a <prvWriteBytesToBuffer+0x5e>
	memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	699a      	ldr	r2, [r3, #24]
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	4413      	add	r3, r2
 8004e24:	6a3a      	ldr	r2, [r7, #32]
 8004e26:	68b9      	ldr	r1, [r7, #8]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f002 f9b3 	bl	8007194 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d91b      	bls.n	8004e6e <prvWriteBytesToBuffer+0xb2>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	1ad2      	subs	r2, r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d909      	bls.n	8004e58 <prvWriteBytesToBuffer+0x9c>
 8004e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	617b      	str	r3, [r7, #20]
 8004e56:	e7fe      	b.n	8004e56 <prvWriteBytesToBuffer+0x9a>
		memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6998      	ldr	r0, [r3, #24]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	18d1      	adds	r1, r2, r3
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	461a      	mov	r2, r3
 8004e6a:	f002 f993 	bl	8007194 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8004e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4413      	add	r3, r2
 8004e74:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d304      	bcc.n	8004e8a <prvWriteBytesToBuffer+0xce>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e8e:	605a      	str	r2, [r3, #4]

	return xCount;
 8004e90:	687b      	ldr	r3, [r7, #4]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3728      	adds	r7, #40	; 0x28
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b08a      	sub	sp, #40	; 0x28
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	60f8      	str	r0, [r7, #12]
 8004ea2:	60b9      	str	r1, [r7, #8]
 8004ea4:	607a      	str	r2, [r7, #4]
 8004ea6:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	4293      	cmp	r3, r2
 8004eae:	bf28      	it	cs
 8004eb0:	4613      	movcs	r3, r2
 8004eb2:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d061      	beq.n	8004f7e <prvReadBytesFromBuffer+0xe4>
	{
		xNextTail = pxStreamBuffer->xTail;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	6a3a      	ldr	r2, [r7, #32]
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	bf28      	it	cs
 8004ece:	4613      	movcs	r3, r2
 8004ed0:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d909      	bls.n	8004eee <prvReadBytesFromBuffer+0x54>
 8004eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	61bb      	str	r3, [r7, #24]
 8004eec:	e7fe      	b.n	8004eec <prvReadBytesFromBuffer+0x52>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8004eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	441a      	add	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d909      	bls.n	8004f10 <prvReadBytesFromBuffer+0x76>
 8004efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	617b      	str	r3, [r7, #20]
 8004f0e:	e7fe      	b.n	8004f0e <prvReadBytesFromBuffer+0x74>
		memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	699a      	ldr	r2, [r3, #24]
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	4413      	add	r3, r2
 8004f18:	69fa      	ldr	r2, [r7, #28]
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	68b8      	ldr	r0, [r7, #8]
 8004f1e:	f002 f939 	bl	8007194 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8004f22:	6a3a      	ldr	r2, [r7, #32]
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d918      	bls.n	8004f5c <prvReadBytesFromBuffer+0xc2>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8004f2a:	6a3a      	ldr	r2, [r7, #32]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d909      	bls.n	8004f46 <prvReadBytesFromBuffer+0xac>
 8004f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	613b      	str	r3, [r7, #16]
 8004f44:	e7fe      	b.n	8004f44 <prvReadBytesFromBuffer+0xaa>
			memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	18d0      	adds	r0, r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6999      	ldr	r1, [r3, #24]
 8004f50:	6a3a      	ldr	r2, [r7, #32]
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	461a      	mov	r2, r3
 8004f58:	f002 f91c 	bl	8007194 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8004f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	4413      	add	r3, r2
 8004f62:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d304      	bcc.n	8004f78 <prvReadBytesFromBuffer+0xde>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7c:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3728      	adds	r7, #40	; 0x28
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	4413      	add	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d304      	bcc.n	8004fba <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8004fba:	68fb      	ldr	r3, [r7, #12]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bc80      	pop	{r7}
 8004fc4:	4770      	bx	lr

08004fc6 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  BaseType_t xIsMessageBuffer )
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b086      	sub	sp, #24
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	60f8      	str	r0, [r7, #12]
 8004fce:	60b9      	str	r1, [r7, #8]
 8004fd0:	607a      	str	r2, [r7, #4]
 8004fd2:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8004fd4:	2355      	movs	r3, #85	; 0x55
 8004fd6:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6979      	ldr	r1, [r7, #20]
 8004fdc:	68b8      	ldr	r0, [r7, #8]
 8004fde:	f002 f8e4 	bl	80071aa <memset>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d009      	beq.n	8004ffe <prvInitialiseNewStreamBuffer+0x38>
 8004fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	613b      	str	r3, [r7, #16]
 8004ffc:	e7fe      	b.n	8004ffc <prvInitialiseNewStreamBuffer+0x36>
	}
	#endif

	memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8004ffe:	2224      	movs	r2, #36	; 0x24
 8005000:	2100      	movs	r1, #0
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f002 f8d1 	bl	80071aa <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	60da      	str	r2, [r3, #12]

	if( xIsMessageBuffer != pdFALSE )
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d006      	beq.n	800502e <prvInitialiseNewStreamBuffer+0x68>
	{
		pxStreamBuffer->ucFlags |= sbFLAGS_IS_MESSAGE_BUFFER;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	7f1b      	ldrb	r3, [r3, #28]
 8005024:	f043 0301 	orr.w	r3, r3, #1
 8005028:	b2da      	uxtb	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	771a      	strb	r2, [r3, #28]
	}
}
 800502e:	bf00      	nop
 8005030:	3718      	adds	r7, #24
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005036:	b580      	push	{r7, lr}
 8005038:	b08e      	sub	sp, #56	; 0x38
 800503a:	af04      	add	r7, sp, #16
 800503c:	60f8      	str	r0, [r7, #12]
 800503e:	60b9      	str	r1, [r7, #8]
 8005040:	607a      	str	r2, [r7, #4]
 8005042:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005046:	2b00      	cmp	r3, #0
 8005048:	d109      	bne.n	800505e <xTaskCreateStatic+0x28>
 800504a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	623b      	str	r3, [r7, #32]
 800505c:	e7fe      	b.n	800505c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800505e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005060:	2b00      	cmp	r3, #0
 8005062:	d109      	bne.n	8005078 <xTaskCreateStatic+0x42>
 8005064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	61fb      	str	r3, [r7, #28]
 8005076:	e7fe      	b.n	8005076 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005078:	2360      	movs	r3, #96	; 0x60
 800507a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	2b60      	cmp	r3, #96	; 0x60
 8005080:	d009      	beq.n	8005096 <xTaskCreateStatic+0x60>
 8005082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	61bb      	str	r3, [r7, #24]
 8005094:	e7fe      	b.n	8005094 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005098:	2b00      	cmp	r3, #0
 800509a:	d01e      	beq.n	80050da <xTaskCreateStatic+0xa4>
 800509c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d01b      	beq.n	80050da <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050aa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050b4:	2300      	movs	r3, #0
 80050b6:	9303      	str	r3, [sp, #12]
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	9302      	str	r3, [sp, #8]
 80050bc:	f107 0314 	add.w	r3, r7, #20
 80050c0:	9301      	str	r3, [sp, #4]
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	68b9      	ldr	r1, [r7, #8]
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 f850 	bl	8005172 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050d4:	f000 f8d6 	bl	8005284 <prvAddNewTaskToReadyList>
 80050d8:	e001      	b.n	80050de <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80050da:	2300      	movs	r3, #0
 80050dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80050de:	697b      	ldr	r3, [r7, #20]
	}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3728      	adds	r7, #40	; 0x28
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08c      	sub	sp, #48	; 0x30
 80050ec:	af04      	add	r7, sp, #16
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	603b      	str	r3, [r7, #0]
 80050f4:	4613      	mov	r3, r2
 80050f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050f8:	88fb      	ldrh	r3, [r7, #6]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4618      	mov	r0, r3
 80050fe:	f001 fe51 	bl	8006da4 <pvPortMalloc>
 8005102:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00e      	beq.n	8005128 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800510a:	2060      	movs	r0, #96	; 0x60
 800510c:	f001 fe4a 	bl	8006da4 <pvPortMalloc>
 8005110:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	631a      	str	r2, [r3, #48]	; 0x30
 800511e:	e005      	b.n	800512c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005120:	6978      	ldr	r0, [r7, #20]
 8005122:	f001 ff01 	bl	8006f28 <vPortFree>
 8005126:	e001      	b.n	800512c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005128:	2300      	movs	r3, #0
 800512a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d017      	beq.n	8005162 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800513a:	88fa      	ldrh	r2, [r7, #6]
 800513c:	2300      	movs	r3, #0
 800513e:	9303      	str	r3, [sp, #12]
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	9302      	str	r3, [sp, #8]
 8005144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005146:	9301      	str	r3, [sp, #4]
 8005148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	68b9      	ldr	r1, [r7, #8]
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 f80e 	bl	8005172 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005156:	69f8      	ldr	r0, [r7, #28]
 8005158:	f000 f894 	bl	8005284 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800515c:	2301      	movs	r3, #1
 800515e:	61bb      	str	r3, [r7, #24]
 8005160:	e002      	b.n	8005168 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005162:	f04f 33ff 	mov.w	r3, #4294967295
 8005166:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005168:	69bb      	ldr	r3, [r7, #24]
	}
 800516a:	4618      	mov	r0, r3
 800516c:	3720      	adds	r7, #32
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b088      	sub	sp, #32
 8005176:	af00      	add	r7, sp, #0
 8005178:	60f8      	str	r0, [r7, #12]
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	607a      	str	r2, [r7, #4]
 800517e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005182:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	461a      	mov	r2, r3
 800518a:	21a5      	movs	r1, #165	; 0xa5
 800518c:	f002 f80d 	bl	80071aa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800519a:	3b01      	subs	r3, #1
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	f023 0307 	bic.w	r3, r3, #7
 80051a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	f003 0307 	and.w	r3, r3, #7
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d009      	beq.n	80051c8 <prvInitialiseNewTask+0x56>
 80051b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	e7fe      	b.n	80051c6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051c8:	2300      	movs	r3, #0
 80051ca:	61fb      	str	r3, [r7, #28]
 80051cc:	e012      	b.n	80051f4 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	4413      	add	r3, r2
 80051d4:	7819      	ldrb	r1, [r3, #0]
 80051d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	4413      	add	r3, r2
 80051dc:	3334      	adds	r3, #52	; 0x34
 80051de:	460a      	mov	r2, r1
 80051e0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	4413      	add	r3, r2
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d006      	beq.n	80051fc <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	3301      	adds	r3, #1
 80051f2:	61fb      	str	r3, [r7, #28]
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	2b0f      	cmp	r3, #15
 80051f8:	d9e9      	bls.n	80051ce <prvInitialiseNewTask+0x5c>
 80051fa:	e000      	b.n	80051fe <prvInitialiseNewTask+0x8c>
		{
			break;
 80051fc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	2b37      	cmp	r3, #55	; 0x37
 800520a:	d901      	bls.n	8005210 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800520c:	2337      	movs	r3, #55	; 0x37
 800520e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005214:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800521a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800521c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521e:	2200      	movs	r2, #0
 8005220:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005224:	3304      	adds	r3, #4
 8005226:	4618      	mov	r0, r3
 8005228:	f7fe fadb 	bl	80037e2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800522c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522e:	3318      	adds	r3, #24
 8005230:	4618      	mov	r0, r3
 8005232:	f7fe fad6 	bl	80037e2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800523a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800523c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800524a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800524c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524e:	2200      	movs	r2, #0
 8005250:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005254:	2200      	movs	r2, #0
 8005256:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525a:	2200      	movs	r2, #0
 800525c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005260:	683a      	ldr	r2, [r7, #0]
 8005262:	68f9      	ldr	r1, [r7, #12]
 8005264:	69b8      	ldr	r0, [r7, #24]
 8005266:	f001 fbbf 	bl	80069e8 <pxPortInitialiseStack>
 800526a:	4602      	mov	r2, r0
 800526c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800527a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800527c:	bf00      	nop
 800527e:	3720      	adds	r7, #32
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800528c:	f001 fc94 	bl	8006bb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005290:	4b2d      	ldr	r3, [pc, #180]	; (8005348 <prvAddNewTaskToReadyList+0xc4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3301      	adds	r3, #1
 8005296:	4a2c      	ldr	r2, [pc, #176]	; (8005348 <prvAddNewTaskToReadyList+0xc4>)
 8005298:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800529a:	4b2c      	ldr	r3, [pc, #176]	; (800534c <prvAddNewTaskToReadyList+0xc8>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d109      	bne.n	80052b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052a2:	4a2a      	ldr	r2, [pc, #168]	; (800534c <prvAddNewTaskToReadyList+0xc8>)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052a8:	4b27      	ldr	r3, [pc, #156]	; (8005348 <prvAddNewTaskToReadyList+0xc4>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d110      	bne.n	80052d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052b0:	f000 fbf6 	bl	8005aa0 <prvInitialiseTaskLists>
 80052b4:	e00d      	b.n	80052d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052b6:	4b26      	ldr	r3, [pc, #152]	; (8005350 <prvAddNewTaskToReadyList+0xcc>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d109      	bne.n	80052d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052be:	4b23      	ldr	r3, [pc, #140]	; (800534c <prvAddNewTaskToReadyList+0xc8>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d802      	bhi.n	80052d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052cc:	4a1f      	ldr	r2, [pc, #124]	; (800534c <prvAddNewTaskToReadyList+0xc8>)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052d2:	4b20      	ldr	r3, [pc, #128]	; (8005354 <prvAddNewTaskToReadyList+0xd0>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	3301      	adds	r3, #1
 80052d8:	4a1e      	ldr	r2, [pc, #120]	; (8005354 <prvAddNewTaskToReadyList+0xd0>)
 80052da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80052dc:	4b1d      	ldr	r3, [pc, #116]	; (8005354 <prvAddNewTaskToReadyList+0xd0>)
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e8:	4b1b      	ldr	r3, [pc, #108]	; (8005358 <prvAddNewTaskToReadyList+0xd4>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d903      	bls.n	80052f8 <prvAddNewTaskToReadyList+0x74>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f4:	4a18      	ldr	r2, [pc, #96]	; (8005358 <prvAddNewTaskToReadyList+0xd4>)
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052fc:	4613      	mov	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4a15      	ldr	r2, [pc, #84]	; (800535c <prvAddNewTaskToReadyList+0xd8>)
 8005306:	441a      	add	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3304      	adds	r3, #4
 800530c:	4619      	mov	r1, r3
 800530e:	4610      	mov	r0, r2
 8005310:	f7fe fa73 	bl	80037fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005314:	f001 fc7e 	bl	8006c14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005318:	4b0d      	ldr	r3, [pc, #52]	; (8005350 <prvAddNewTaskToReadyList+0xcc>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00e      	beq.n	800533e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005320:	4b0a      	ldr	r3, [pc, #40]	; (800534c <prvAddNewTaskToReadyList+0xc8>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532a:	429a      	cmp	r2, r3
 800532c:	d207      	bcs.n	800533e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800532e:	4b0c      	ldr	r3, [pc, #48]	; (8005360 <prvAddNewTaskToReadyList+0xdc>)
 8005330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800533e:	bf00      	nop
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	20000ef4 	.word	0x20000ef4
 800534c:	20000a20 	.word	0x20000a20
 8005350:	20000f00 	.word	0x20000f00
 8005354:	20000f10 	.word	0x20000f10
 8005358:	20000efc 	.word	0x20000efc
 800535c:	20000a24 	.word	0x20000a24
 8005360:	e000ed04 	.word	0xe000ed04

08005364 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b08a      	sub	sp, #40	; 0x28
 8005368:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800536a:	2300      	movs	r3, #0
 800536c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800536e:	2300      	movs	r3, #0
 8005370:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005372:	463a      	mov	r2, r7
 8005374:	1d39      	adds	r1, r7, #4
 8005376:	f107 0308 	add.w	r3, r7, #8
 800537a:	4618      	mov	r0, r3
 800537c:	f7fe f9e0 	bl	8003740 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005380:	6839      	ldr	r1, [r7, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	9202      	str	r2, [sp, #8]
 8005388:	9301      	str	r3, [sp, #4]
 800538a:	2300      	movs	r3, #0
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	2300      	movs	r3, #0
 8005390:	460a      	mov	r2, r1
 8005392:	4921      	ldr	r1, [pc, #132]	; (8005418 <vTaskStartScheduler+0xb4>)
 8005394:	4821      	ldr	r0, [pc, #132]	; (800541c <vTaskStartScheduler+0xb8>)
 8005396:	f7ff fe4e 	bl	8005036 <xTaskCreateStatic>
 800539a:	4602      	mov	r2, r0
 800539c:	4b20      	ldr	r3, [pc, #128]	; (8005420 <vTaskStartScheduler+0xbc>)
 800539e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80053a0:	4b1f      	ldr	r3, [pc, #124]	; (8005420 <vTaskStartScheduler+0xbc>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80053a8:	2301      	movs	r3, #1
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	e001      	b.n	80053b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80053ae:	2300      	movs	r3, #0
 80053b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d102      	bne.n	80053be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80053b8:	f001 f80c 	bl	80063d4 <xTimerCreateTimerTask>
 80053bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d117      	bne.n	80053f4 <vTaskStartScheduler+0x90>
 80053c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80053d6:	4b13      	ldr	r3, [pc, #76]	; (8005424 <vTaskStartScheduler+0xc0>)
 80053d8:	f04f 32ff 	mov.w	r2, #4294967295
 80053dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053de:	4b12      	ldr	r3, [pc, #72]	; (8005428 <vTaskStartScheduler+0xc4>)
 80053e0:	2201      	movs	r2, #1
 80053e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80053e4:	4b11      	ldr	r3, [pc, #68]	; (800542c <vTaskStartScheduler+0xc8>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80053ea:	f7fa feb1 	bl	8000150 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80053ee:	f001 fb73 	bl	8006ad8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80053f2:	e00d      	b.n	8005410 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fa:	d109      	bne.n	8005410 <vTaskStartScheduler+0xac>
 80053fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	e7fe      	b.n	800540e <vTaskStartScheduler+0xaa>
}
 8005410:	bf00      	nop
 8005412:	3718      	adds	r7, #24
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	08007210 	.word	0x08007210
 800541c:	08005a71 	.word	0x08005a71
 8005420:	20000f18 	.word	0x20000f18
 8005424:	20000f14 	.word	0x20000f14
 8005428:	20000f00 	.word	0x20000f00
 800542c:	20000ef8 	.word	0x20000ef8

08005430 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005434:	4b04      	ldr	r3, [pc, #16]	; (8005448 <vTaskSuspendAll+0x18>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	3301      	adds	r3, #1
 800543a:	4a03      	ldr	r2, [pc, #12]	; (8005448 <vTaskSuspendAll+0x18>)
 800543c:	6013      	str	r3, [r2, #0]
}
 800543e:	bf00      	nop
 8005440:	46bd      	mov	sp, r7
 8005442:	bc80      	pop	{r7}
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	20000f1c 	.word	0x20000f1c

0800544c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005452:	2300      	movs	r3, #0
 8005454:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005456:	2300      	movs	r3, #0
 8005458:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800545a:	4b41      	ldr	r3, [pc, #260]	; (8005560 <xTaskResumeAll+0x114>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d109      	bne.n	8005476 <xTaskResumeAll+0x2a>
 8005462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005466:	f383 8811 	msr	BASEPRI, r3
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	603b      	str	r3, [r7, #0]
 8005474:	e7fe      	b.n	8005474 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005476:	f001 fb9f 	bl	8006bb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800547a:	4b39      	ldr	r3, [pc, #228]	; (8005560 <xTaskResumeAll+0x114>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3b01      	subs	r3, #1
 8005480:	4a37      	ldr	r2, [pc, #220]	; (8005560 <xTaskResumeAll+0x114>)
 8005482:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005484:	4b36      	ldr	r3, [pc, #216]	; (8005560 <xTaskResumeAll+0x114>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d162      	bne.n	8005552 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800548c:	4b35      	ldr	r3, [pc, #212]	; (8005564 <xTaskResumeAll+0x118>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d05e      	beq.n	8005552 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005494:	e02f      	b.n	80054f6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005496:	4b34      	ldr	r3, [pc, #208]	; (8005568 <xTaskResumeAll+0x11c>)
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	3318      	adds	r3, #24
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fe fa04 	bl	80038b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	3304      	adds	r3, #4
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7fe f9ff 	bl	80038b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b6:	4b2d      	ldr	r3, [pc, #180]	; (800556c <xTaskResumeAll+0x120>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d903      	bls.n	80054c6 <xTaskResumeAll+0x7a>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c2:	4a2a      	ldr	r2, [pc, #168]	; (800556c <xTaskResumeAll+0x120>)
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ca:	4613      	mov	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4a27      	ldr	r2, [pc, #156]	; (8005570 <xTaskResumeAll+0x124>)
 80054d4:	441a      	add	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	3304      	adds	r3, #4
 80054da:	4619      	mov	r1, r3
 80054dc:	4610      	mov	r0, r2
 80054de:	f7fe f98c 	bl	80037fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e6:	4b23      	ldr	r3, [pc, #140]	; (8005574 <xTaskResumeAll+0x128>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d302      	bcc.n	80054f6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80054f0:	4b21      	ldr	r3, [pc, #132]	; (8005578 <xTaskResumeAll+0x12c>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054f6:	4b1c      	ldr	r3, [pc, #112]	; (8005568 <xTaskResumeAll+0x11c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1cb      	bne.n	8005496 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005504:	f000 fb66 	bl	8005bd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005508:	4b1c      	ldr	r3, [pc, #112]	; (800557c <xTaskResumeAll+0x130>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d010      	beq.n	8005536 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005514:	f000 f844 	bl	80055a0 <xTaskIncrementTick>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d002      	beq.n	8005524 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800551e:	4b16      	ldr	r3, [pc, #88]	; (8005578 <xTaskResumeAll+0x12c>)
 8005520:	2201      	movs	r2, #1
 8005522:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3b01      	subs	r3, #1
 8005528:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1f1      	bne.n	8005514 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005530:	4b12      	ldr	r3, [pc, #72]	; (800557c <xTaskResumeAll+0x130>)
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005536:	4b10      	ldr	r3, [pc, #64]	; (8005578 <xTaskResumeAll+0x12c>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d009      	beq.n	8005552 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800553e:	2301      	movs	r3, #1
 8005540:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005542:	4b0f      	ldr	r3, [pc, #60]	; (8005580 <xTaskResumeAll+0x134>)
 8005544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005552:	f001 fb5f 	bl	8006c14 <vPortExitCritical>

	return xAlreadyYielded;
 8005556:	68bb      	ldr	r3, [r7, #8]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	20000f1c 	.word	0x20000f1c
 8005564:	20000ef4 	.word	0x20000ef4
 8005568:	20000eb4 	.word	0x20000eb4
 800556c:	20000efc 	.word	0x20000efc
 8005570:	20000a24 	.word	0x20000a24
 8005574:	20000a20 	.word	0x20000a20
 8005578:	20000f08 	.word	0x20000f08
 800557c:	20000f04 	.word	0x20000f04
 8005580:	e000ed04 	.word	0xe000ed04

08005584 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800558a:	4b04      	ldr	r3, [pc, #16]	; (800559c <xTaskGetTickCount+0x18>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005590:	687b      	ldr	r3, [r7, #4]
}
 8005592:	4618      	mov	r0, r3
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	bc80      	pop	{r7}
 800559a:	4770      	bx	lr
 800559c:	20000ef8 	.word	0x20000ef8

080055a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055a6:	2300      	movs	r3, #0
 80055a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055aa:	4b51      	ldr	r3, [pc, #324]	; (80056f0 <xTaskIncrementTick+0x150>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f040 808d 	bne.w	80056ce <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80055b4:	4b4f      	ldr	r3, [pc, #316]	; (80056f4 <xTaskIncrementTick+0x154>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	3301      	adds	r3, #1
 80055ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80055bc:	4a4d      	ldr	r2, [pc, #308]	; (80056f4 <xTaskIncrementTick+0x154>)
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d11f      	bne.n	8005608 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80055c8:	4b4b      	ldr	r3, [pc, #300]	; (80056f8 <xTaskIncrementTick+0x158>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d009      	beq.n	80055e6 <xTaskIncrementTick+0x46>
 80055d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	e7fe      	b.n	80055e4 <xTaskIncrementTick+0x44>
 80055e6:	4b44      	ldr	r3, [pc, #272]	; (80056f8 <xTaskIncrementTick+0x158>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	4b43      	ldr	r3, [pc, #268]	; (80056fc <xTaskIncrementTick+0x15c>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a41      	ldr	r2, [pc, #260]	; (80056f8 <xTaskIncrementTick+0x158>)
 80055f2:	6013      	str	r3, [r2, #0]
 80055f4:	4a41      	ldr	r2, [pc, #260]	; (80056fc <xTaskIncrementTick+0x15c>)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6013      	str	r3, [r2, #0]
 80055fa:	4b41      	ldr	r3, [pc, #260]	; (8005700 <xTaskIncrementTick+0x160>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3301      	adds	r3, #1
 8005600:	4a3f      	ldr	r2, [pc, #252]	; (8005700 <xTaskIncrementTick+0x160>)
 8005602:	6013      	str	r3, [r2, #0]
 8005604:	f000 fae6 	bl	8005bd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005608:	4b3e      	ldr	r3, [pc, #248]	; (8005704 <xTaskIncrementTick+0x164>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	429a      	cmp	r2, r3
 8005610:	d34e      	bcc.n	80056b0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005612:	4b39      	ldr	r3, [pc, #228]	; (80056f8 <xTaskIncrementTick+0x158>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <xTaskIncrementTick+0x80>
 800561c:	2301      	movs	r3, #1
 800561e:	e000      	b.n	8005622 <xTaskIncrementTick+0x82>
 8005620:	2300      	movs	r3, #0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d004      	beq.n	8005630 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005626:	4b37      	ldr	r3, [pc, #220]	; (8005704 <xTaskIncrementTick+0x164>)
 8005628:	f04f 32ff 	mov.w	r2, #4294967295
 800562c:	601a      	str	r2, [r3, #0]
					break;
 800562e:	e03f      	b.n	80056b0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005630:	4b31      	ldr	r3, [pc, #196]	; (80056f8 <xTaskIncrementTick+0x158>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	429a      	cmp	r2, r3
 8005646:	d203      	bcs.n	8005650 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005648:	4a2e      	ldr	r2, [pc, #184]	; (8005704 <xTaskIncrementTick+0x164>)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6013      	str	r3, [r2, #0]
						break;
 800564e:	e02f      	b.n	80056b0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	3304      	adds	r3, #4
 8005654:	4618      	mov	r0, r3
 8005656:	f7fe f92b 	bl	80038b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565e:	2b00      	cmp	r3, #0
 8005660:	d004      	beq.n	800566c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	3318      	adds	r3, #24
 8005666:	4618      	mov	r0, r3
 8005668:	f7fe f922 	bl	80038b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005670:	4b25      	ldr	r3, [pc, #148]	; (8005708 <xTaskIncrementTick+0x168>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	429a      	cmp	r2, r3
 8005676:	d903      	bls.n	8005680 <xTaskIncrementTick+0xe0>
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567c:	4a22      	ldr	r2, [pc, #136]	; (8005708 <xTaskIncrementTick+0x168>)
 800567e:	6013      	str	r3, [r2, #0]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005684:	4613      	mov	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4a1f      	ldr	r2, [pc, #124]	; (800570c <xTaskIncrementTick+0x16c>)
 800568e:	441a      	add	r2, r3
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	3304      	adds	r3, #4
 8005694:	4619      	mov	r1, r3
 8005696:	4610      	mov	r0, r2
 8005698:	f7fe f8af 	bl	80037fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a0:	4b1b      	ldr	r3, [pc, #108]	; (8005710 <xTaskIncrementTick+0x170>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d3b3      	bcc.n	8005612 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80056aa:	2301      	movs	r3, #1
 80056ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056ae:	e7b0      	b.n	8005612 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80056b0:	4b17      	ldr	r3, [pc, #92]	; (8005710 <xTaskIncrementTick+0x170>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b6:	4915      	ldr	r1, [pc, #84]	; (800570c <xTaskIncrementTick+0x16c>)
 80056b8:	4613      	mov	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	440b      	add	r3, r1
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d907      	bls.n	80056d8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80056c8:	2301      	movs	r3, #1
 80056ca:	617b      	str	r3, [r7, #20]
 80056cc:	e004      	b.n	80056d8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80056ce:	4b11      	ldr	r3, [pc, #68]	; (8005714 <xTaskIncrementTick+0x174>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3301      	adds	r3, #1
 80056d4:	4a0f      	ldr	r2, [pc, #60]	; (8005714 <xTaskIncrementTick+0x174>)
 80056d6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80056d8:	4b0f      	ldr	r3, [pc, #60]	; (8005718 <xTaskIncrementTick+0x178>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80056e0:	2301      	movs	r3, #1
 80056e2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80056e4:	697b      	ldr	r3, [r7, #20]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20000f1c 	.word	0x20000f1c
 80056f4:	20000ef8 	.word	0x20000ef8
 80056f8:	20000eac 	.word	0x20000eac
 80056fc:	20000eb0 	.word	0x20000eb0
 8005700:	20000f0c 	.word	0x20000f0c
 8005704:	20000f14 	.word	0x20000f14
 8005708:	20000efc 	.word	0x20000efc
 800570c:	20000a24 	.word	0x20000a24
 8005710:	20000a20 	.word	0x20000a20
 8005714:	20000f04 	.word	0x20000f04
 8005718:	20000f08 	.word	0x20000f08

0800571c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005722:	4b33      	ldr	r3, [pc, #204]	; (80057f0 <vTaskSwitchContext+0xd4>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800572a:	4b32      	ldr	r3, [pc, #200]	; (80057f4 <vTaskSwitchContext+0xd8>)
 800572c:	2201      	movs	r2, #1
 800572e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005730:	e059      	b.n	80057e6 <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8005732:	4b30      	ldr	r3, [pc, #192]	; (80057f4 <vTaskSwitchContext+0xd8>)
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8005738:	f7fa fd10 	bl	800015c <getRunTimeCounterValue>
 800573c:	4602      	mov	r2, r0
 800573e:	4b2e      	ldr	r3, [pc, #184]	; (80057f8 <vTaskSwitchContext+0xdc>)
 8005740:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8005742:	4b2d      	ldr	r3, [pc, #180]	; (80057f8 <vTaskSwitchContext+0xdc>)
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	4b2d      	ldr	r3, [pc, #180]	; (80057fc <vTaskSwitchContext+0xe0>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d909      	bls.n	8005762 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800574e:	4b2c      	ldr	r3, [pc, #176]	; (8005800 <vTaskSwitchContext+0xe4>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005754:	4a28      	ldr	r2, [pc, #160]	; (80057f8 <vTaskSwitchContext+0xdc>)
 8005756:	6810      	ldr	r0, [r2, #0]
 8005758:	4a28      	ldr	r2, [pc, #160]	; (80057fc <vTaskSwitchContext+0xe0>)
 800575a:	6812      	ldr	r2, [r2, #0]
 800575c:	1a82      	subs	r2, r0, r2
 800575e:	440a      	add	r2, r1
 8005760:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 8005762:	4b25      	ldr	r3, [pc, #148]	; (80057f8 <vTaskSwitchContext+0xdc>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a25      	ldr	r2, [pc, #148]	; (80057fc <vTaskSwitchContext+0xe0>)
 8005768:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800576a:	4b26      	ldr	r3, [pc, #152]	; (8005804 <vTaskSwitchContext+0xe8>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	e00f      	b.n	8005792 <vTaskSwitchContext+0x76>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d109      	bne.n	800578c <vTaskSwitchContext+0x70>
 8005778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577c:	f383 8811 	msr	BASEPRI, r3
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	607b      	str	r3, [r7, #4]
 800578a:	e7fe      	b.n	800578a <vTaskSwitchContext+0x6e>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	3b01      	subs	r3, #1
 8005790:	60fb      	str	r3, [r7, #12]
 8005792:	491d      	ldr	r1, [pc, #116]	; (8005808 <vTaskSwitchContext+0xec>)
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	4613      	mov	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	440b      	add	r3, r1
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d0e5      	beq.n	8005772 <vTaskSwitchContext+0x56>
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	4613      	mov	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4a15      	ldr	r2, [pc, #84]	; (8005808 <vTaskSwitchContext+0xec>)
 80057b2:	4413      	add	r3, r2
 80057b4:	60bb      	str	r3, [r7, #8]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	605a      	str	r2, [r3, #4]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	3308      	adds	r3, #8
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d104      	bne.n	80057d6 <vTaskSwitchContext+0xba>
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	605a      	str	r2, [r3, #4]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	4a08      	ldr	r2, [pc, #32]	; (8005800 <vTaskSwitchContext+0xe4>)
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	4a08      	ldr	r2, [pc, #32]	; (8005804 <vTaskSwitchContext+0xe8>)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6013      	str	r3, [r2, #0]
}
 80057e6:	bf00      	nop
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	20000f1c 	.word	0x20000f1c
 80057f4:	20000f08 	.word	0x20000f08
 80057f8:	20000f24 	.word	0x20000f24
 80057fc:	20000f20 	.word	0x20000f20
 8005800:	20000a20 	.word	0x20000a20
 8005804:	20000efc 	.word	0x20000efc
 8005808:	20000a24 	.word	0x20000a24

0800580c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d109      	bne.n	8005830 <vTaskPlaceOnEventList+0x24>
 800581c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005820:	f383 8811 	msr	BASEPRI, r3
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	60fb      	str	r3, [r7, #12]
 800582e:	e7fe      	b.n	800582e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005830:	4b07      	ldr	r3, [pc, #28]	; (8005850 <vTaskPlaceOnEventList+0x44>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	3318      	adds	r3, #24
 8005836:	4619      	mov	r1, r3
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7fe f801 	bl	8003840 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800583e:	2101      	movs	r1, #1
 8005840:	6838      	ldr	r0, [r7, #0]
 8005842:	f000 fd73 	bl	800632c <prvAddCurrentTaskToDelayedList>
}
 8005846:	bf00      	nop
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	20000a20 	.word	0x20000a20

08005854 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d109      	bne.n	800587a <vTaskPlaceOnEventListRestricted+0x26>
 8005866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	e7fe      	b.n	8005878 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800587a:	4b0a      	ldr	r3, [pc, #40]	; (80058a4 <vTaskPlaceOnEventListRestricted+0x50>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3318      	adds	r3, #24
 8005880:	4619      	mov	r1, r3
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f7fd ffb9 	bl	80037fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d002      	beq.n	8005894 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800588e:	f04f 33ff 	mov.w	r3, #4294967295
 8005892:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005894:	6879      	ldr	r1, [r7, #4]
 8005896:	68b8      	ldr	r0, [r7, #8]
 8005898:	f000 fd48 	bl	800632c <prvAddCurrentTaskToDelayedList>
	}
 800589c:	bf00      	nop
 800589e:	3718      	adds	r7, #24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	20000a20 	.word	0x20000a20

080058a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d109      	bne.n	80058d2 <xTaskRemoveFromEventList+0x2a>
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	e7fe      	b.n	80058d0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	3318      	adds	r3, #24
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fd ffea 	bl	80038b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058dc:	4b1d      	ldr	r3, [pc, #116]	; (8005954 <xTaskRemoveFromEventList+0xac>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d11d      	bne.n	8005920 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	3304      	adds	r3, #4
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7fd ffe1 	bl	80038b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f2:	4b19      	ldr	r3, [pc, #100]	; (8005958 <xTaskRemoveFromEventList+0xb0>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d903      	bls.n	8005902 <xTaskRemoveFromEventList+0x5a>
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fe:	4a16      	ldr	r2, [pc, #88]	; (8005958 <xTaskRemoveFromEventList+0xb0>)
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005906:	4613      	mov	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4a13      	ldr	r2, [pc, #76]	; (800595c <xTaskRemoveFromEventList+0xb4>)
 8005910:	441a      	add	r2, r3
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	3304      	adds	r3, #4
 8005916:	4619      	mov	r1, r3
 8005918:	4610      	mov	r0, r2
 800591a:	f7fd ff6e 	bl	80037fa <vListInsertEnd>
 800591e:	e005      	b.n	800592c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	3318      	adds	r3, #24
 8005924:	4619      	mov	r1, r3
 8005926:	480e      	ldr	r0, [pc, #56]	; (8005960 <xTaskRemoveFromEventList+0xb8>)
 8005928:	f7fd ff67 	bl	80037fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005930:	4b0c      	ldr	r3, [pc, #48]	; (8005964 <xTaskRemoveFromEventList+0xbc>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005936:	429a      	cmp	r2, r3
 8005938:	d905      	bls.n	8005946 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800593a:	2301      	movs	r3, #1
 800593c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800593e:	4b0a      	ldr	r3, [pc, #40]	; (8005968 <xTaskRemoveFromEventList+0xc0>)
 8005940:	2201      	movs	r2, #1
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	e001      	b.n	800594a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005946:	2300      	movs	r3, #0
 8005948:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800594a:	697b      	ldr	r3, [r7, #20]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3718      	adds	r7, #24
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	20000f1c 	.word	0x20000f1c
 8005958:	20000efc 	.word	0x20000efc
 800595c:	20000a24 	.word	0x20000a24
 8005960:	20000eb4 	.word	0x20000eb4
 8005964:	20000a20 	.word	0x20000a20
 8005968:	20000f08 	.word	0x20000f08

0800596c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005974:	4b06      	ldr	r3, [pc, #24]	; (8005990 <vTaskInternalSetTimeOutState+0x24>)
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800597c:	4b05      	ldr	r3, [pc, #20]	; (8005994 <vTaskInternalSetTimeOutState+0x28>)
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	605a      	str	r2, [r3, #4]
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	bc80      	pop	{r7}
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	20000f0c 	.word	0x20000f0c
 8005994:	20000ef8 	.word	0x20000ef8

08005998 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d109      	bne.n	80059bc <xTaskCheckForTimeOut+0x24>
 80059a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	613b      	str	r3, [r7, #16]
 80059ba:	e7fe      	b.n	80059ba <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d109      	bne.n	80059d6 <xTaskCheckForTimeOut+0x3e>
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	e7fe      	b.n	80059d4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80059d6:	f001 f8ef 	bl	8006bb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80059da:	4b1d      	ldr	r3, [pc, #116]	; (8005a50 <xTaskCheckForTimeOut+0xb8>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f2:	d102      	bne.n	80059fa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80059f4:	2300      	movs	r3, #0
 80059f6:	61fb      	str	r3, [r7, #28]
 80059f8:	e023      	b.n	8005a42 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	4b15      	ldr	r3, [pc, #84]	; (8005a54 <xTaskCheckForTimeOut+0xbc>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d007      	beq.n	8005a16 <xTaskCheckForTimeOut+0x7e>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d302      	bcc.n	8005a16 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a10:	2301      	movs	r3, #1
 8005a12:	61fb      	str	r3, [r7, #28]
 8005a14:	e015      	b.n	8005a42 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d20b      	bcs.n	8005a38 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	1ad2      	subs	r2, r2, r3
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f7ff ff9d 	bl	800596c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a32:	2300      	movs	r3, #0
 8005a34:	61fb      	str	r3, [r7, #28]
 8005a36:	e004      	b.n	8005a42 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a42:	f001 f8e7 	bl	8006c14 <vPortExitCritical>

	return xReturn;
 8005a46:	69fb      	ldr	r3, [r7, #28]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3720      	adds	r7, #32
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	20000ef8 	.word	0x20000ef8
 8005a54:	20000f0c 	.word	0x20000f0c

08005a58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a5c:	4b03      	ldr	r3, [pc, #12]	; (8005a6c <vTaskMissedYield+0x14>)
 8005a5e:	2201      	movs	r2, #1
 8005a60:	601a      	str	r2, [r3, #0]
}
 8005a62:	bf00      	nop
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bc80      	pop	{r7}
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	20000f08 	.word	0x20000f08

08005a70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a78:	f000 f852 	bl	8005b20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a7c:	4b06      	ldr	r3, [pc, #24]	; (8005a98 <prvIdleTask+0x28>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d9f9      	bls.n	8005a78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a84:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <prvIdleTask+0x2c>)
 8005a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	f3bf 8f4f 	dsb	sy
 8005a90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a94:	e7f0      	b.n	8005a78 <prvIdleTask+0x8>
 8005a96:	bf00      	nop
 8005a98:	20000a24 	.word	0x20000a24
 8005a9c:	e000ed04 	.word	0xe000ed04

08005aa0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	607b      	str	r3, [r7, #4]
 8005aaa:	e00c      	b.n	8005ac6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4413      	add	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4a12      	ldr	r2, [pc, #72]	; (8005b00 <prvInitialiseTaskLists+0x60>)
 8005ab8:	4413      	add	r3, r2
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fd fe72 	bl	80037a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	607b      	str	r3, [r7, #4]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b37      	cmp	r3, #55	; 0x37
 8005aca:	d9ef      	bls.n	8005aac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005acc:	480d      	ldr	r0, [pc, #52]	; (8005b04 <prvInitialiseTaskLists+0x64>)
 8005ace:	f7fd fe69 	bl	80037a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ad2:	480d      	ldr	r0, [pc, #52]	; (8005b08 <prvInitialiseTaskLists+0x68>)
 8005ad4:	f7fd fe66 	bl	80037a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ad8:	480c      	ldr	r0, [pc, #48]	; (8005b0c <prvInitialiseTaskLists+0x6c>)
 8005ada:	f7fd fe63 	bl	80037a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ade:	480c      	ldr	r0, [pc, #48]	; (8005b10 <prvInitialiseTaskLists+0x70>)
 8005ae0:	f7fd fe60 	bl	80037a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ae4:	480b      	ldr	r0, [pc, #44]	; (8005b14 <prvInitialiseTaskLists+0x74>)
 8005ae6:	f7fd fe5d 	bl	80037a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005aea:	4b0b      	ldr	r3, [pc, #44]	; (8005b18 <prvInitialiseTaskLists+0x78>)
 8005aec:	4a05      	ldr	r2, [pc, #20]	; (8005b04 <prvInitialiseTaskLists+0x64>)
 8005aee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005af0:	4b0a      	ldr	r3, [pc, #40]	; (8005b1c <prvInitialiseTaskLists+0x7c>)
 8005af2:	4a05      	ldr	r2, [pc, #20]	; (8005b08 <prvInitialiseTaskLists+0x68>)
 8005af4:	601a      	str	r2, [r3, #0]
}
 8005af6:	bf00      	nop
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	20000a24 	.word	0x20000a24
 8005b04:	20000e84 	.word	0x20000e84
 8005b08:	20000e98 	.word	0x20000e98
 8005b0c:	20000eb4 	.word	0x20000eb4
 8005b10:	20000ec8 	.word	0x20000ec8
 8005b14:	20000ee0 	.word	0x20000ee0
 8005b18:	20000eac 	.word	0x20000eac
 8005b1c:	20000eb0 	.word	0x20000eb0

08005b20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b26:	e019      	b.n	8005b5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b28:	f001 f846 	bl	8006bb8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005b2c:	4b0f      	ldr	r3, [pc, #60]	; (8005b6c <prvCheckTasksWaitingTermination+0x4c>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	3304      	adds	r3, #4
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7fd feb9 	bl	80038b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b3e:	4b0c      	ldr	r3, [pc, #48]	; (8005b70 <prvCheckTasksWaitingTermination+0x50>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3b01      	subs	r3, #1
 8005b44:	4a0a      	ldr	r2, [pc, #40]	; (8005b70 <prvCheckTasksWaitingTermination+0x50>)
 8005b46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b48:	4b0a      	ldr	r3, [pc, #40]	; (8005b74 <prvCheckTasksWaitingTermination+0x54>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	4a09      	ldr	r2, [pc, #36]	; (8005b74 <prvCheckTasksWaitingTermination+0x54>)
 8005b50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b52:	f001 f85f 	bl	8006c14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f80e 	bl	8005b78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b5c:	4b05      	ldr	r3, [pc, #20]	; (8005b74 <prvCheckTasksWaitingTermination+0x54>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1e1      	bne.n	8005b28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b64:	bf00      	nop
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	20000ec8 	.word	0x20000ec8
 8005b70:	20000ef4 	.word	0x20000ef4
 8005b74:	20000edc 	.word	0x20000edc

08005b78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d108      	bne.n	8005b9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f001 f9ca 	bl	8006f28 <vPortFree>
				vPortFree( pxTCB );
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f001 f9c7 	bl	8006f28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b9a:	e017      	b.n	8005bcc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d103      	bne.n	8005bae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f001 f9be 	bl	8006f28 <vPortFree>
	}
 8005bac:	e00e      	b.n	8005bcc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d009      	beq.n	8005bcc <prvDeleteTCB+0x54>
 8005bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbc:	f383 8811 	msr	BASEPRI, r3
 8005bc0:	f3bf 8f6f 	isb	sy
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	e7fe      	b.n	8005bca <prvDeleteTCB+0x52>
	}
 8005bcc:	bf00      	nop
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bda:	4b0e      	ldr	r3, [pc, #56]	; (8005c14 <prvResetNextTaskUnblockTime+0x40>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <prvResetNextTaskUnblockTime+0x14>
 8005be4:	2301      	movs	r3, #1
 8005be6:	e000      	b.n	8005bea <prvResetNextTaskUnblockTime+0x16>
 8005be8:	2300      	movs	r3, #0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d004      	beq.n	8005bf8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005bee:	4b0a      	ldr	r3, [pc, #40]	; (8005c18 <prvResetNextTaskUnblockTime+0x44>)
 8005bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8005bf4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005bf6:	e008      	b.n	8005c0a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005bf8:	4b06      	ldr	r3, [pc, #24]	; (8005c14 <prvResetNextTaskUnblockTime+0x40>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	4a04      	ldr	r2, [pc, #16]	; (8005c18 <prvResetNextTaskUnblockTime+0x44>)
 8005c08:	6013      	str	r3, [r2, #0]
}
 8005c0a:	bf00      	nop
 8005c0c:	370c      	adds	r7, #12
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bc80      	pop	{r7}
 8005c12:	4770      	bx	lr
 8005c14:	20000eac 	.word	0x20000eac
 8005c18:	20000f14 	.word	0x20000f14

08005c1c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005c22:	4b04      	ldr	r3, [pc, #16]	; (8005c34 <xTaskGetCurrentTaskHandle+0x18>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005c28:	687b      	ldr	r3, [r7, #4]
	}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bc80      	pop	{r7}
 8005c32:	4770      	bx	lr
 8005c34:	20000a20 	.word	0x20000a20

08005c38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c3e:	4b0b      	ldr	r3, [pc, #44]	; (8005c6c <xTaskGetSchedulerState+0x34>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d102      	bne.n	8005c4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c46:	2301      	movs	r3, #1
 8005c48:	607b      	str	r3, [r7, #4]
 8005c4a:	e008      	b.n	8005c5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c4c:	4b08      	ldr	r3, [pc, #32]	; (8005c70 <xTaskGetSchedulerState+0x38>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d102      	bne.n	8005c5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c54:	2302      	movs	r3, #2
 8005c56:	607b      	str	r3, [r7, #4]
 8005c58:	e001      	b.n	8005c5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c5e:	687b      	ldr	r3, [r7, #4]
	}
 8005c60:	4618      	mov	r0, r3
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bc80      	pop	{r7}
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	20000f00 	.word	0x20000f00
 8005c70:	20000f1c 	.word	0x20000f1c

08005c74 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005c80:	2300      	movs	r3, #0
 8005c82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d056      	beq.n	8005d38 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c8e:	4b2d      	ldr	r3, [pc, #180]	; (8005d44 <xTaskPriorityInherit+0xd0>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d246      	bcs.n	8005d26 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	db06      	blt.n	8005cae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ca0:	4b28      	ldr	r3, [pc, #160]	; (8005d44 <xTaskPriorityInherit+0xd0>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	6959      	ldr	r1, [r3, #20]
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4a22      	ldr	r2, [pc, #136]	; (8005d48 <xTaskPriorityInherit+0xd4>)
 8005cc0:	4413      	add	r3, r2
 8005cc2:	4299      	cmp	r1, r3
 8005cc4:	d101      	bne.n	8005cca <xTaskPriorityInherit+0x56>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e000      	b.n	8005ccc <xTaskPriorityInherit+0x58>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d022      	beq.n	8005d16 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7fd fdeb 	bl	80038b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005cda:	4b1a      	ldr	r3, [pc, #104]	; (8005d44 <xTaskPriorityInherit+0xd0>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce8:	4b18      	ldr	r3, [pc, #96]	; (8005d4c <xTaskPriorityInherit+0xd8>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d903      	bls.n	8005cf8 <xTaskPriorityInherit+0x84>
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf4:	4a15      	ldr	r2, [pc, #84]	; (8005d4c <xTaskPriorityInherit+0xd8>)
 8005cf6:	6013      	str	r3, [r2, #0]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4a10      	ldr	r2, [pc, #64]	; (8005d48 <xTaskPriorityInherit+0xd4>)
 8005d06:	441a      	add	r2, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4610      	mov	r0, r2
 8005d10:	f7fd fd73 	bl	80037fa <vListInsertEnd>
 8005d14:	e004      	b.n	8005d20 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d16:	4b0b      	ldr	r3, [pc, #44]	; (8005d44 <xTaskPriorityInherit+0xd0>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005d20:	2301      	movs	r3, #1
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	e008      	b.n	8005d38 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d2a:	4b06      	ldr	r3, [pc, #24]	; (8005d44 <xTaskPriorityInherit+0xd0>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d201      	bcs.n	8005d38 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005d34:	2301      	movs	r3, #1
 8005d36:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d38:	68fb      	ldr	r3, [r7, #12]
	}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	20000a20 	.word	0x20000a20
 8005d48:	20000a24 	.word	0x20000a24
 8005d4c:	20000efc 	.word	0x20000efc

08005d50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d054      	beq.n	8005e10 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d66:	4b2d      	ldr	r3, [pc, #180]	; (8005e1c <xTaskPriorityDisinherit+0xcc>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d009      	beq.n	8005d84 <xTaskPriorityDisinherit+0x34>
 8005d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	60fb      	str	r3, [r7, #12]
 8005d82:	e7fe      	b.n	8005d82 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d109      	bne.n	8005da0 <xTaskPriorityDisinherit+0x50>
 8005d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	60bb      	str	r3, [r7, #8]
 8005d9e:	e7fe      	b.n	8005d9e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da4:	1e5a      	subs	r2, r3, #1
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d02c      	beq.n	8005e10 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d128      	bne.n	8005e10 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7fd fd74 	bl	80038b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de0:	4b0f      	ldr	r3, [pc, #60]	; (8005e20 <xTaskPriorityDisinherit+0xd0>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d903      	bls.n	8005df0 <xTaskPriorityDisinherit+0xa0>
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dec:	4a0c      	ldr	r2, [pc, #48]	; (8005e20 <xTaskPriorityDisinherit+0xd0>)
 8005dee:	6013      	str	r3, [r2, #0]
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df4:	4613      	mov	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4a09      	ldr	r2, [pc, #36]	; (8005e24 <xTaskPriorityDisinherit+0xd4>)
 8005dfe:	441a      	add	r2, r3
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	3304      	adds	r3, #4
 8005e04:	4619      	mov	r1, r3
 8005e06:	4610      	mov	r0, r2
 8005e08:	f7fd fcf7 	bl	80037fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e10:	697b      	ldr	r3, [r7, #20]
	}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3718      	adds	r7, #24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000a20 	.word	0x20000a20
 8005e20:	20000efc 	.word	0x20000efc
 8005e24:	20000a24 	.word	0x20000a24

08005e28 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b088      	sub	sp, #32
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005e36:	2301      	movs	r3, #1
 8005e38:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d06d      	beq.n	8005f1c <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d109      	bne.n	8005e5c <vTaskPriorityDisinheritAfterTimeout+0x34>
 8005e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4c:	f383 8811 	msr	BASEPRI, r3
 8005e50:	f3bf 8f6f 	isb	sy
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	60fb      	str	r3, [r7, #12]
 8005e5a:	e7fe      	b.n	8005e5a <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d902      	bls.n	8005e6c <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	61fb      	str	r3, [r7, #28]
 8005e6a:	e002      	b.n	8005e72 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e70:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e76:	69fa      	ldr	r2, [r7, #28]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d04f      	beq.n	8005f1c <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d14a      	bne.n	8005f1c <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005e86:	4b27      	ldr	r3, [pc, #156]	; (8005f24 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d109      	bne.n	8005ea4 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8005e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	60bb      	str	r3, [r7, #8]
 8005ea2:	e7fe      	b.n	8005ea2 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	69fa      	ldr	r2, [r7, #28]
 8005eae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	db04      	blt.n	8005ec2 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	6959      	ldr	r1, [r3, #20]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4413      	add	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4a15      	ldr	r2, [pc, #84]	; (8005f28 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005ed2:	4413      	add	r3, r2
 8005ed4:	4299      	cmp	r1, r3
 8005ed6:	d101      	bne.n	8005edc <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e000      	b.n	8005ede <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8005edc:	2300      	movs	r3, #0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d01c      	beq.n	8005f1c <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	3304      	adds	r3, #4
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fd fce2 	bl	80038b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef0:	4b0e      	ldr	r3, [pc, #56]	; (8005f2c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d903      	bls.n	8005f00 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efc:	4a0b      	ldr	r2, [pc, #44]	; (8005f2c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f04:	4613      	mov	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4a06      	ldr	r2, [pc, #24]	; (8005f28 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005f0e:	441a      	add	r2, r3
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	3304      	adds	r3, #4
 8005f14:	4619      	mov	r1, r3
 8005f16:	4610      	mov	r0, r2
 8005f18:	f7fd fc6f 	bl	80037fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f1c:	bf00      	nop
 8005f1e:	3720      	adds	r7, #32
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	20000a20 	.word	0x20000a20
 8005f28:	20000a24 	.word	0x20000a24
 8005f2c:	20000efc 	.word	0x20000efc

08005f30 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005f30:	b480      	push	{r7}
 8005f32:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005f34:	4b07      	ldr	r3, [pc, #28]	; (8005f54 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d004      	beq.n	8005f46 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005f3c:	4b05      	ldr	r3, [pc, #20]	; (8005f54 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f42:	3201      	adds	r2, #1
 8005f44:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005f46:	4b03      	ldr	r3, [pc, #12]	; (8005f54 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f48:	681b      	ldr	r3, [r3, #0]
	}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bc80      	pop	{r7}
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	20000a20 	.word	0x20000a20

08005f58 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
 8005f64:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8005f66:	f000 fe27 	bl	8006bb8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005f6a:	4b26      	ldr	r3, [pc, #152]	; (8006004 <xTaskNotifyWait+0xac>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d01a      	beq.n	8005fae <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005f78:	4b22      	ldr	r3, [pc, #136]	; (8006004 <xTaskNotifyWait+0xac>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	43d2      	mvns	r2, r2
 8005f82:	400a      	ands	r2, r1
 8005f84:	659a      	str	r2, [r3, #88]	; 0x58

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005f86:	4b1f      	ldr	r3, [pc, #124]	; (8006004 <xTaskNotifyWait+0xac>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

				if( xTicksToWait > ( TickType_t ) 0 )
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00b      	beq.n	8005fae <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f96:	2101      	movs	r1, #1
 8005f98:	6838      	ldr	r0, [r7, #0]
 8005f9a:	f000 f9c7 	bl	800632c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005f9e:	4b1a      	ldr	r3, [pc, #104]	; (8006008 <xTaskNotifyWait+0xb0>)
 8005fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005fae:	f000 fe31 	bl	8006c14 <vPortExitCritical>

		taskENTER_CRITICAL();
 8005fb2:	f000 fe01 	bl	8006bb8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d004      	beq.n	8005fc6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005fbc:	4b11      	ldr	r3, [pc, #68]	; (8006004 <xTaskNotifyWait+0xac>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005fc6:	4b0f      	ldr	r3, [pc, #60]	; (8006004 <xTaskNotifyWait+0xac>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d002      	beq.n	8005fda <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	617b      	str	r3, [r7, #20]
 8005fd8:	e008      	b.n	8005fec <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005fda:	4b0a      	ldr	r3, [pc, #40]	; (8006004 <xTaskNotifyWait+0xac>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	43d2      	mvns	r2, r2
 8005fe4:	400a      	ands	r2, r1
 8005fe6:	659a      	str	r2, [r3, #88]	; 0x58
				xReturn = pdTRUE;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fec:	4b05      	ldr	r3, [pc, #20]	; (8006004 <xTaskNotifyWait+0xac>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		}
		taskEXIT_CRITICAL();
 8005ff6:	f000 fe0d 	bl	8006c14 <vPortExitCritical>

		return xReturn;
 8005ffa:	697b      	ldr	r3, [r7, #20]
	}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3718      	adds	r7, #24
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	20000a20 	.word	0x20000a20
 8006008:	e000ed04 	.word	0xe000ed04

0800600c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800600c:	b580      	push	{r7, lr}
 800600e:	b08a      	sub	sp, #40	; 0x28
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	603b      	str	r3, [r7, #0]
 8006018:	4613      	mov	r3, r2
 800601a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800601c:	2301      	movs	r3, #1
 800601e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d109      	bne.n	800603a <xTaskGenericNotify+0x2e>
 8006026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	61bb      	str	r3, [r7, #24]
 8006038:	e7fe      	b.n	8006038 <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800603e:	f000 fdbb 	bl	8006bb8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d003      	beq.n	8006050 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006056:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	2202      	movs	r2, #2
 800605c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

			switch( eAction )
 8006060:	79fb      	ldrb	r3, [r7, #7]
 8006062:	2b04      	cmp	r3, #4
 8006064:	d827      	bhi.n	80060b6 <xTaskGenericNotify+0xaa>
 8006066:	a201      	add	r2, pc, #4	; (adr r2, 800606c <xTaskGenericNotify+0x60>)
 8006068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606c:	080060b7 	.word	0x080060b7
 8006070:	08006081 	.word	0x08006081
 8006074:	0800608f 	.word	0x0800608f
 8006078:	0800609b 	.word	0x0800609b
 800607c:	080060a3 	.word	0x080060a3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	431a      	orrs	r2, r3
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 800608c:	e013      	b.n	80060b6 <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	6a3b      	ldr	r3, [r7, #32]
 8006096:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 8006098:	e00d      	b.n	80060b6 <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 80060a0:	e009      	b.n	80060b6 <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80060a2:	7ffb      	ldrb	r3, [r7, #31]
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d003      	beq.n	80060b0 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	659a      	str	r2, [r3, #88]	; 0x58
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80060ae:	e001      	b.n	80060b4 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 80060b0:	2300      	movs	r3, #0
 80060b2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80060b4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80060b6:	7ffb      	ldrb	r3, [r7, #31]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d139      	bne.n	8006130 <xTaskGenericNotify+0x124>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060bc:	6a3b      	ldr	r3, [r7, #32]
 80060be:	3304      	adds	r3, #4
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7fd fbf5 	bl	80038b0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ca:	4b1d      	ldr	r3, [pc, #116]	; (8006140 <xTaskGenericNotify+0x134>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d903      	bls.n	80060da <xTaskGenericNotify+0xce>
 80060d2:	6a3b      	ldr	r3, [r7, #32]
 80060d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d6:	4a1a      	ldr	r2, [pc, #104]	; (8006140 <xTaskGenericNotify+0x134>)
 80060d8:	6013      	str	r3, [r2, #0]
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060de:	4613      	mov	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4a17      	ldr	r2, [pc, #92]	; (8006144 <xTaskGenericNotify+0x138>)
 80060e8:	441a      	add	r2, r3
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	3304      	adds	r3, #4
 80060ee:	4619      	mov	r1, r3
 80060f0:	4610      	mov	r0, r2
 80060f2:	f7fd fb82 	bl	80037fa <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d009      	beq.n	8006112 <xTaskGenericNotify+0x106>
 80060fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	617b      	str	r3, [r7, #20]
 8006110:	e7fe      	b.n	8006110 <xTaskGenericNotify+0x104>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006112:	6a3b      	ldr	r3, [r7, #32]
 8006114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006116:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <xTaskGenericNotify+0x13c>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611c:	429a      	cmp	r2, r3
 800611e:	d907      	bls.n	8006130 <xTaskGenericNotify+0x124>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006120:	4b0a      	ldr	r3, [pc, #40]	; (800614c <xTaskGenericNotify+0x140>)
 8006122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006126:	601a      	str	r2, [r3, #0]
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006130:	f000 fd70 	bl	8006c14 <vPortExitCritical>

		return xReturn;
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006136:	4618      	mov	r0, r3
 8006138:	3728      	adds	r7, #40	; 0x28
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	20000efc 	.word	0x20000efc
 8006144:	20000a24 	.word	0x20000a24
 8006148:	20000a20 	.word	0x20000a20
 800614c:	e000ed04 	.word	0xe000ed04

08006150 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006150:	b580      	push	{r7, lr}
 8006152:	b08e      	sub	sp, #56	; 0x38
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	603b      	str	r3, [r7, #0]
 800615c:	4613      	mov	r3, r2
 800615e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006160:	2301      	movs	r3, #1
 8006162:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d109      	bne.n	800617e <xTaskGenericNotifyFromISR+0x2e>
 800616a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	627b      	str	r3, [r7, #36]	; 0x24
 800617c:	e7fe      	b.n	800617c <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800617e:	f000 fdd5 	bl	8006d2c <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8006186:	f3ef 8211 	mrs	r2, BASEPRI
 800618a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	623a      	str	r2, [r7, #32]
 800619c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800619e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061a0:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d003      	beq.n	80061b0 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80061b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80061b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80061ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061bc:	2202      	movs	r2, #2
 80061be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

			switch( eAction )
 80061c2:	79fb      	ldrb	r3, [r7, #7]
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d829      	bhi.n	800621c <xTaskGenericNotifyFromISR+0xcc>
 80061c8:	a201      	add	r2, pc, #4	; (adr r2, 80061d0 <xTaskGenericNotifyFromISR+0x80>)
 80061ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ce:	bf00      	nop
 80061d0:	0800621d 	.word	0x0800621d
 80061d4:	080061e5 	.word	0x080061e5
 80061d8:	080061f3 	.word	0x080061f3
 80061dc:	080061ff 	.word	0x080061ff
 80061e0:	08006207 	.word	0x08006207
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80061e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	431a      	orrs	r2, r3
 80061ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ee:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 80061f0:	e014      	b.n	800621c <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80061f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fa:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 80061fc:	e00e      	b.n	800621c <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80061fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 8006204:	e00a      	b.n	800621c <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006206:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800620a:	2b02      	cmp	r3, #2
 800620c:	d003      	beq.n	8006216 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800620e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	659a      	str	r2, [r3, #88]	; 0x58
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006214:	e001      	b.n	800621a <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 8006216:	2300      	movs	r3, #0
 8006218:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800621a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800621c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006220:	2b01      	cmp	r3, #1
 8006222:	d146      	bne.n	80062b2 <xTaskGenericNotifyFromISR+0x162>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006228:	2b00      	cmp	r3, #0
 800622a:	d009      	beq.n	8006240 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800622c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006230:	f383 8811 	msr	BASEPRI, r3
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	61bb      	str	r3, [r7, #24]
 800623e:	e7fe      	b.n	800623e <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006240:	4b21      	ldr	r3, [pc, #132]	; (80062c8 <xTaskGenericNotifyFromISR+0x178>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d11d      	bne.n	8006284 <xTaskGenericNotifyFromISR+0x134>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624a:	3304      	adds	r3, #4
 800624c:	4618      	mov	r0, r3
 800624e:	f7fd fb2f 	bl	80038b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006256:	4b1d      	ldr	r3, [pc, #116]	; (80062cc <xTaskGenericNotifyFromISR+0x17c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	429a      	cmp	r2, r3
 800625c:	d903      	bls.n	8006266 <xTaskGenericNotifyFromISR+0x116>
 800625e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006262:	4a1a      	ldr	r2, [pc, #104]	; (80062cc <xTaskGenericNotifyFromISR+0x17c>)
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800626a:	4613      	mov	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4a17      	ldr	r2, [pc, #92]	; (80062d0 <xTaskGenericNotifyFromISR+0x180>)
 8006274:	441a      	add	r2, r3
 8006276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006278:	3304      	adds	r3, #4
 800627a:	4619      	mov	r1, r3
 800627c:	4610      	mov	r0, r2
 800627e:	f7fd fabc 	bl	80037fa <vListInsertEnd>
 8006282:	e005      	b.n	8006290 <xTaskGenericNotifyFromISR+0x140>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006286:	3318      	adds	r3, #24
 8006288:	4619      	mov	r1, r3
 800628a:	4812      	ldr	r0, [pc, #72]	; (80062d4 <xTaskGenericNotifyFromISR+0x184>)
 800628c:	f7fd fab5 	bl	80037fa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006294:	4b10      	ldr	r3, [pc, #64]	; (80062d8 <xTaskGenericNotifyFromISR+0x188>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629a:	429a      	cmp	r2, r3
 800629c:	d909      	bls.n	80062b2 <xTaskGenericNotifyFromISR+0x162>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800629e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <xTaskGenericNotifyFromISR+0x15c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80062a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062a6:	2201      	movs	r2, #1
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	e002      	b.n	80062b2 <xTaskGenericNotifyFromISR+0x162>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 80062ac:	4b0b      	ldr	r3, [pc, #44]	; (80062dc <xTaskGenericNotifyFromISR+0x18c>)
 80062ae:	2201      	movs	r2, #1
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b4:	617b      	str	r3, [r7, #20]
	__asm volatile
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80062bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80062be:	4618      	mov	r0, r3
 80062c0:	3738      	adds	r7, #56	; 0x38
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	20000f1c 	.word	0x20000f1c
 80062cc:	20000efc 	.word	0x20000efc
 80062d0:	20000a24 	.word	0x20000a24
 80062d4:	20000eb4 	.word	0x20000eb4
 80062d8:	20000a20 	.word	0x20000a20
 80062dc:	20000f08 	.word	0x20000f08

080062e0 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d102      	bne.n	80062f4 <xTaskNotifyStateClear+0x14>
 80062ee:	4b0e      	ldr	r3, [pc, #56]	; (8006328 <xTaskNotifyStateClear+0x48>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	e000      	b.n	80062f6 <xTaskNotifyStateClear+0x16>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 80062f8:	f000 fc5e 	bl	8006bb8 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b02      	cmp	r3, #2
 8006306:	d106      	bne.n	8006316 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				xReturn = pdPASS;
 8006310:	2301      	movs	r3, #1
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	e001      	b.n	800631a <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8006316:	2300      	movs	r3, #0
 8006318:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800631a:	f000 fc7b 	bl	8006c14 <vPortExitCritical>

		return xReturn;
 800631e:	68fb      	ldr	r3, [r7, #12]
	}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	20000a20 	.word	0x20000a20

0800632c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006336:	4b21      	ldr	r3, [pc, #132]	; (80063bc <prvAddCurrentTaskToDelayedList+0x90>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800633c:	4b20      	ldr	r3, [pc, #128]	; (80063c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3304      	adds	r3, #4
 8006342:	4618      	mov	r0, r3
 8006344:	f7fd fab4 	bl	80038b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634e:	d10a      	bne.n	8006366 <prvAddCurrentTaskToDelayedList+0x3a>
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d007      	beq.n	8006366 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006356:	4b1a      	ldr	r3, [pc, #104]	; (80063c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3304      	adds	r3, #4
 800635c:	4619      	mov	r1, r3
 800635e:	4819      	ldr	r0, [pc, #100]	; (80063c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006360:	f7fd fa4b 	bl	80037fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006364:	e026      	b.n	80063b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4413      	add	r3, r2
 800636c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800636e:	4b14      	ldr	r3, [pc, #80]	; (80063c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	429a      	cmp	r2, r3
 800637c:	d209      	bcs.n	8006392 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800637e:	4b12      	ldr	r3, [pc, #72]	; (80063c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	4b0f      	ldr	r3, [pc, #60]	; (80063c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3304      	adds	r3, #4
 8006388:	4619      	mov	r1, r3
 800638a:	4610      	mov	r0, r2
 800638c:	f7fd fa58 	bl	8003840 <vListInsert>
}
 8006390:	e010      	b.n	80063b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006392:	4b0e      	ldr	r3, [pc, #56]	; (80063cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	4b0a      	ldr	r3, [pc, #40]	; (80063c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3304      	adds	r3, #4
 800639c:	4619      	mov	r1, r3
 800639e:	4610      	mov	r0, r2
 80063a0:	f7fd fa4e 	bl	8003840 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80063a4:	4b0a      	ldr	r3, [pc, #40]	; (80063d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d202      	bcs.n	80063b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80063ae:	4a08      	ldr	r2, [pc, #32]	; (80063d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	6013      	str	r3, [r2, #0]
}
 80063b4:	bf00      	nop
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	20000ef8 	.word	0x20000ef8
 80063c0:	20000a20 	.word	0x20000a20
 80063c4:	20000ee0 	.word	0x20000ee0
 80063c8:	20000eb0 	.word	0x20000eb0
 80063cc:	20000eac 	.word	0x20000eac
 80063d0:	20000f14 	.word	0x20000f14

080063d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b08a      	sub	sp, #40	; 0x28
 80063d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80063da:	2300      	movs	r3, #0
 80063dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80063de:	f000 fac3 	bl	8006968 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80063e2:	4b1c      	ldr	r3, [pc, #112]	; (8006454 <xTimerCreateTimerTask+0x80>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d021      	beq.n	800642e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80063ea:	2300      	movs	r3, #0
 80063ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80063ee:	2300      	movs	r3, #0
 80063f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80063f2:	1d3a      	adds	r2, r7, #4
 80063f4:	f107 0108 	add.w	r1, r7, #8
 80063f8:	f107 030c 	add.w	r3, r7, #12
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7fd f9b7 	bl	8003770 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006402:	6879      	ldr	r1, [r7, #4]
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	9202      	str	r2, [sp, #8]
 800640a:	9301      	str	r3, [sp, #4]
 800640c:	2302      	movs	r3, #2
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	2300      	movs	r3, #0
 8006412:	460a      	mov	r2, r1
 8006414:	4910      	ldr	r1, [pc, #64]	; (8006458 <xTimerCreateTimerTask+0x84>)
 8006416:	4811      	ldr	r0, [pc, #68]	; (800645c <xTimerCreateTimerTask+0x88>)
 8006418:	f7fe fe0d 	bl	8005036 <xTaskCreateStatic>
 800641c:	4602      	mov	r2, r0
 800641e:	4b10      	ldr	r3, [pc, #64]	; (8006460 <xTimerCreateTimerTask+0x8c>)
 8006420:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006422:	4b0f      	ldr	r3, [pc, #60]	; (8006460 <xTimerCreateTimerTask+0x8c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800642a:	2301      	movs	r3, #1
 800642c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d109      	bne.n	8006448 <xTimerCreateTimerTask+0x74>
	__asm volatile
 8006434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006438:	f383 8811 	msr	BASEPRI, r3
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	613b      	str	r3, [r7, #16]
 8006446:	e7fe      	b.n	8006446 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006448:	697b      	ldr	r3, [r7, #20]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3718      	adds	r7, #24
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	20000f58 	.word	0x20000f58
 8006458:	08007218 	.word	0x08007218
 800645c:	0800657d 	.word	0x0800657d
 8006460:	20000f5c 	.word	0x20000f5c

08006464 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b08a      	sub	sp, #40	; 0x28
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
 8006470:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006472:	2300      	movs	r3, #0
 8006474:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d109      	bne.n	8006490 <xTimerGenericCommand+0x2c>
 800647c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006480:	f383 8811 	msr	BASEPRI, r3
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	623b      	str	r3, [r7, #32]
 800648e:	e7fe      	b.n	800648e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006490:	4b19      	ldr	r3, [pc, #100]	; (80064f8 <xTimerGenericCommand+0x94>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d02a      	beq.n	80064ee <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	2b05      	cmp	r3, #5
 80064a8:	dc18      	bgt.n	80064dc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80064aa:	f7ff fbc5 	bl	8005c38 <xTaskGetSchedulerState>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d109      	bne.n	80064c8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80064b4:	4b10      	ldr	r3, [pc, #64]	; (80064f8 <xTimerGenericCommand+0x94>)
 80064b6:	6818      	ldr	r0, [r3, #0]
 80064b8:	f107 0110 	add.w	r1, r7, #16
 80064bc:	2300      	movs	r3, #0
 80064be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064c0:	f7fd fbc0 	bl	8003c44 <xQueueGenericSend>
 80064c4:	6278      	str	r0, [r7, #36]	; 0x24
 80064c6:	e012      	b.n	80064ee <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80064c8:	4b0b      	ldr	r3, [pc, #44]	; (80064f8 <xTimerGenericCommand+0x94>)
 80064ca:	6818      	ldr	r0, [r3, #0]
 80064cc:	f107 0110 	add.w	r1, r7, #16
 80064d0:	2300      	movs	r3, #0
 80064d2:	2200      	movs	r2, #0
 80064d4:	f7fd fbb6 	bl	8003c44 <xQueueGenericSend>
 80064d8:	6278      	str	r0, [r7, #36]	; 0x24
 80064da:	e008      	b.n	80064ee <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80064dc:	4b06      	ldr	r3, [pc, #24]	; (80064f8 <xTimerGenericCommand+0x94>)
 80064de:	6818      	ldr	r0, [r3, #0]
 80064e0:	f107 0110 	add.w	r1, r7, #16
 80064e4:	2300      	movs	r3, #0
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	f7fd fca6 	bl	8003e38 <xQueueGenericSendFromISR>
 80064ec:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3728      	adds	r7, #40	; 0x28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	20000f58 	.word	0x20000f58

080064fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b088      	sub	sp, #32
 8006500:	af02      	add	r7, sp, #8
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006506:	4b1c      	ldr	r3, [pc, #112]	; (8006578 <prvProcessExpiredTimer+0x7c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	3304      	adds	r3, #4
 8006514:	4618      	mov	r0, r3
 8006516:	f7fd f9cb 	bl	80038b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d121      	bne.n	8006566 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	699a      	ldr	r2, [r3, #24]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	18d1      	adds	r1, r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	683a      	ldr	r2, [r7, #0]
 800652e:	6978      	ldr	r0, [r7, #20]
 8006530:	f000 f8c8 	bl	80066c4 <prvInsertTimerInActiveList>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d015      	beq.n	8006566 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800653a:	2300      	movs	r3, #0
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	2300      	movs	r3, #0
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	2100      	movs	r1, #0
 8006544:	6978      	ldr	r0, [r7, #20]
 8006546:	f7ff ff8d 	bl	8006464 <xTimerGenericCommand>
 800654a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d109      	bne.n	8006566 <prvProcessExpiredTimer+0x6a>
 8006552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	60fb      	str	r3, [r7, #12]
 8006564:	e7fe      	b.n	8006564 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656a:	6978      	ldr	r0, [r7, #20]
 800656c:	4798      	blx	r3
}
 800656e:	bf00      	nop
 8006570:	3718      	adds	r7, #24
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	20000f50 	.word	0x20000f50

0800657c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006584:	f107 0308 	add.w	r3, r7, #8
 8006588:	4618      	mov	r0, r3
 800658a:	f000 f857 	bl	800663c <prvGetNextExpireTime>
 800658e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	4619      	mov	r1, r3
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f000 f803 	bl	80065a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800659a:	f000 f8d5 	bl	8006748 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800659e:	e7f1      	b.n	8006584 <prvTimerTask+0x8>

080065a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80065aa:	f7fe ff41 	bl	8005430 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065ae:	f107 0308 	add.w	r3, r7, #8
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 f866 	bl	8006684 <prvSampleTimeNow>
 80065b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d130      	bne.n	8006622 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10a      	bne.n	80065dc <prvProcessTimerOrBlockTask+0x3c>
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d806      	bhi.n	80065dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80065ce:	f7fe ff3d 	bl	800544c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80065d2:	68f9      	ldr	r1, [r7, #12]
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f7ff ff91 	bl	80064fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80065da:	e024      	b.n	8006626 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d008      	beq.n	80065f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80065e2:	4b13      	ldr	r3, [pc, #76]	; (8006630 <prvProcessTimerOrBlockTask+0x90>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	bf0c      	ite	eq
 80065ec:	2301      	moveq	r3, #1
 80065ee:	2300      	movne	r3, #0
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80065f4:	4b0f      	ldr	r3, [pc, #60]	; (8006634 <prvProcessTimerOrBlockTask+0x94>)
 80065f6:	6818      	ldr	r0, [r3, #0]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	4619      	mov	r1, r3
 8006602:	f7fe f931 	bl	8004868 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006606:	f7fe ff21 	bl	800544c <xTaskResumeAll>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10a      	bne.n	8006626 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006610:	4b09      	ldr	r3, [pc, #36]	; (8006638 <prvProcessTimerOrBlockTask+0x98>)
 8006612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006616:	601a      	str	r2, [r3, #0]
 8006618:	f3bf 8f4f 	dsb	sy
 800661c:	f3bf 8f6f 	isb	sy
}
 8006620:	e001      	b.n	8006626 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006622:	f7fe ff13 	bl	800544c <xTaskResumeAll>
}
 8006626:	bf00      	nop
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	20000f54 	.word	0x20000f54
 8006634:	20000f58 	.word	0x20000f58
 8006638:	e000ed04 	.word	0xe000ed04

0800663c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006644:	4b0e      	ldr	r3, [pc, #56]	; (8006680 <prvGetNextExpireTime+0x44>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	bf0c      	ite	eq
 800664e:	2301      	moveq	r3, #1
 8006650:	2300      	movne	r3, #0
 8006652:	b2db      	uxtb	r3, r3
 8006654:	461a      	mov	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d105      	bne.n	800666e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006662:	4b07      	ldr	r3, [pc, #28]	; (8006680 <prvGetNextExpireTime+0x44>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	e001      	b.n	8006672 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800666e:	2300      	movs	r3, #0
 8006670:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006672:	68fb      	ldr	r3, [r7, #12]
}
 8006674:	4618      	mov	r0, r3
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	bc80      	pop	{r7}
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	20000f50 	.word	0x20000f50

08006684 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800668c:	f7fe ff7a 	bl	8005584 <xTaskGetTickCount>
 8006690:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006692:	4b0b      	ldr	r3, [pc, #44]	; (80066c0 <prvSampleTimeNow+0x3c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	429a      	cmp	r2, r3
 800669a:	d205      	bcs.n	80066a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800669c:	f000 f904 	bl	80068a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	e002      	b.n	80066ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80066ae:	4a04      	ldr	r2, [pc, #16]	; (80066c0 <prvSampleTimeNow+0x3c>)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80066b4:	68fb      	ldr	r3, [r7, #12]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	20000f60 	.word	0x20000f60

080066c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80066d2:	2300      	movs	r3, #0
 80066d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d812      	bhi.n	8006710 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	1ad2      	subs	r2, r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d302      	bcc.n	80066fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80066f8:	2301      	movs	r3, #1
 80066fa:	617b      	str	r3, [r7, #20]
 80066fc:	e01b      	b.n	8006736 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80066fe:	4b10      	ldr	r3, [pc, #64]	; (8006740 <prvInsertTimerInActiveList+0x7c>)
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	3304      	adds	r3, #4
 8006706:	4619      	mov	r1, r3
 8006708:	4610      	mov	r0, r2
 800670a:	f7fd f899 	bl	8003840 <vListInsert>
 800670e:	e012      	b.n	8006736 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d206      	bcs.n	8006726 <prvInsertTimerInActiveList+0x62>
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	429a      	cmp	r2, r3
 800671e:	d302      	bcc.n	8006726 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006720:	2301      	movs	r3, #1
 8006722:	617b      	str	r3, [r7, #20]
 8006724:	e007      	b.n	8006736 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006726:	4b07      	ldr	r3, [pc, #28]	; (8006744 <prvInsertTimerInActiveList+0x80>)
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	3304      	adds	r3, #4
 800672e:	4619      	mov	r1, r3
 8006730:	4610      	mov	r0, r2
 8006732:	f7fd f885 	bl	8003840 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006736:	697b      	ldr	r3, [r7, #20]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3718      	adds	r7, #24
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	20000f54 	.word	0x20000f54
 8006744:	20000f50 	.word	0x20000f50

08006748 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b08e      	sub	sp, #56	; 0x38
 800674c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800674e:	e099      	b.n	8006884 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	da17      	bge.n	8006786 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006756:	1d3b      	adds	r3, r7, #4
 8006758:	3304      	adds	r3, #4
 800675a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800675c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675e:	2b00      	cmp	r3, #0
 8006760:	d109      	bne.n	8006776 <prvProcessReceivedCommands+0x2e>
 8006762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	61fb      	str	r3, [r7, #28]
 8006774:	e7fe      	b.n	8006774 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800677c:	6850      	ldr	r0, [r2, #4]
 800677e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006780:	6892      	ldr	r2, [r2, #8]
 8006782:	4611      	mov	r1, r2
 8006784:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	db7a      	blt.n	8006882 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d004      	beq.n	80067a2 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679a:	3304      	adds	r3, #4
 800679c:	4618      	mov	r0, r3
 800679e:	f7fd f887 	bl	80038b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067a2:	463b      	mov	r3, r7
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7ff ff6d 	bl	8006684 <prvSampleTimeNow>
 80067aa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b09      	cmp	r3, #9
 80067b0:	d868      	bhi.n	8006884 <prvProcessReceivedCommands+0x13c>
 80067b2:	a201      	add	r2, pc, #4	; (adr r2, 80067b8 <prvProcessReceivedCommands+0x70>)
 80067b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b8:	080067e1 	.word	0x080067e1
 80067bc:	080067e1 	.word	0x080067e1
 80067c0:	080067e1 	.word	0x080067e1
 80067c4:	08006885 	.word	0x08006885
 80067c8:	0800683b 	.word	0x0800683b
 80067cc:	08006871 	.word	0x08006871
 80067d0:	080067e1 	.word	0x080067e1
 80067d4:	080067e1 	.word	0x080067e1
 80067d8:	08006885 	.word	0x08006885
 80067dc:	0800683b 	.word	0x0800683b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	18d1      	adds	r1, r2, r3
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ee:	f7ff ff69 	bl	80066c4 <prvInsertTimerInActiveList>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d045      	beq.n	8006884 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067fe:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d13d      	bne.n	8006884 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	441a      	add	r2, r3
 8006810:	2300      	movs	r3, #0
 8006812:	9300      	str	r3, [sp, #0]
 8006814:	2300      	movs	r3, #0
 8006816:	2100      	movs	r1, #0
 8006818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800681a:	f7ff fe23 	bl	8006464 <xTimerGenericCommand>
 800681e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006820:	6a3b      	ldr	r3, [r7, #32]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d12e      	bne.n	8006884 <prvProcessReceivedCommands+0x13c>
 8006826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	61bb      	str	r3, [r7, #24]
 8006838:	e7fe      	b.n	8006838 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d109      	bne.n	800685c <prvProcessReceivedCommands+0x114>
 8006848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	617b      	str	r3, [r7, #20]
 800685a:	e7fe      	b.n	800685a <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	699a      	ldr	r2, [r3, #24]
 8006860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006862:	18d1      	adds	r1, r2, r3
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800686a:	f7ff ff2b 	bl	80066c4 <prvInsertTimerInActiveList>
					break;
 800686e:	e009      	b.n	8006884 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006872:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006876:	2b00      	cmp	r3, #0
 8006878:	d104      	bne.n	8006884 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800687a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800687c:	f000 fb54 	bl	8006f28 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006880:	e000      	b.n	8006884 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006882:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006884:	4b07      	ldr	r3, [pc, #28]	; (80068a4 <prvProcessReceivedCommands+0x15c>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	1d39      	adds	r1, r7, #4
 800688a:	2200      	movs	r2, #0
 800688c:	4618      	mov	r0, r3
 800688e:	f7fd fbf1 	bl	8004074 <xQueueReceive>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	f47f af5b 	bne.w	8006750 <prvProcessReceivedCommands+0x8>
	}
}
 800689a:	bf00      	nop
 800689c:	3730      	adds	r7, #48	; 0x30
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	20000f58 	.word	0x20000f58

080068a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b088      	sub	sp, #32
 80068ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068ae:	e044      	b.n	800693a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068b0:	4b2b      	ldr	r3, [pc, #172]	; (8006960 <prvSwitchTimerLists+0xb8>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068ba:	4b29      	ldr	r3, [pc, #164]	; (8006960 <prvSwitchTimerLists+0xb8>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	3304      	adds	r3, #4
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7fc fff1 	bl	80038b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	69db      	ldr	r3, [r3, #28]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d12d      	bne.n	800693a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	4413      	add	r3, r2
 80068e6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d90e      	bls.n	800690e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068fc:	4b18      	ldr	r3, [pc, #96]	; (8006960 <prvSwitchTimerLists+0xb8>)
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	3304      	adds	r3, #4
 8006904:	4619      	mov	r1, r3
 8006906:	4610      	mov	r0, r2
 8006908:	f7fc ff9a 	bl	8003840 <vListInsert>
 800690c:	e015      	b.n	800693a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800690e:	2300      	movs	r3, #0
 8006910:	9300      	str	r3, [sp, #0]
 8006912:	2300      	movs	r3, #0
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	2100      	movs	r1, #0
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f7ff fda3 	bl	8006464 <xTimerGenericCommand>
 800691e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d109      	bne.n	800693a <prvSwitchTimerLists+0x92>
 8006926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692a:	f383 8811 	msr	BASEPRI, r3
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	f3bf 8f4f 	dsb	sy
 8006936:	603b      	str	r3, [r7, #0]
 8006938:	e7fe      	b.n	8006938 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800693a:	4b09      	ldr	r3, [pc, #36]	; (8006960 <prvSwitchTimerLists+0xb8>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1b5      	bne.n	80068b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006944:	4b06      	ldr	r3, [pc, #24]	; (8006960 <prvSwitchTimerLists+0xb8>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800694a:	4b06      	ldr	r3, [pc, #24]	; (8006964 <prvSwitchTimerLists+0xbc>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a04      	ldr	r2, [pc, #16]	; (8006960 <prvSwitchTimerLists+0xb8>)
 8006950:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006952:	4a04      	ldr	r2, [pc, #16]	; (8006964 <prvSwitchTimerLists+0xbc>)
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	6013      	str	r3, [r2, #0]
}
 8006958:	bf00      	nop
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	20000f50 	.word	0x20000f50
 8006964:	20000f54 	.word	0x20000f54

08006968 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800696e:	f000 f923 	bl	8006bb8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006972:	4b15      	ldr	r3, [pc, #84]	; (80069c8 <prvCheckForValidListAndQueue+0x60>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d120      	bne.n	80069bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800697a:	4814      	ldr	r0, [pc, #80]	; (80069cc <prvCheckForValidListAndQueue+0x64>)
 800697c:	f7fc ff12 	bl	80037a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006980:	4813      	ldr	r0, [pc, #76]	; (80069d0 <prvCheckForValidListAndQueue+0x68>)
 8006982:	f7fc ff0f 	bl	80037a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006986:	4b13      	ldr	r3, [pc, #76]	; (80069d4 <prvCheckForValidListAndQueue+0x6c>)
 8006988:	4a10      	ldr	r2, [pc, #64]	; (80069cc <prvCheckForValidListAndQueue+0x64>)
 800698a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800698c:	4b12      	ldr	r3, [pc, #72]	; (80069d8 <prvCheckForValidListAndQueue+0x70>)
 800698e:	4a10      	ldr	r2, [pc, #64]	; (80069d0 <prvCheckForValidListAndQueue+0x68>)
 8006990:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006992:	2300      	movs	r3, #0
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	4b11      	ldr	r3, [pc, #68]	; (80069dc <prvCheckForValidListAndQueue+0x74>)
 8006998:	4a11      	ldr	r2, [pc, #68]	; (80069e0 <prvCheckForValidListAndQueue+0x78>)
 800699a:	2110      	movs	r1, #16
 800699c:	200a      	movs	r0, #10
 800699e:	f7fd f819 	bl	80039d4 <xQueueGenericCreateStatic>
 80069a2:	4602      	mov	r2, r0
 80069a4:	4b08      	ldr	r3, [pc, #32]	; (80069c8 <prvCheckForValidListAndQueue+0x60>)
 80069a6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80069a8:	4b07      	ldr	r3, [pc, #28]	; (80069c8 <prvCheckForValidListAndQueue+0x60>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d005      	beq.n	80069bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80069b0:	4b05      	ldr	r3, [pc, #20]	; (80069c8 <prvCheckForValidListAndQueue+0x60>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	490b      	ldr	r1, [pc, #44]	; (80069e4 <prvCheckForValidListAndQueue+0x7c>)
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7fd ff06 	bl	80047c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069bc:	f000 f92a 	bl	8006c14 <vPortExitCritical>
}
 80069c0:	bf00      	nop
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20000f58 	.word	0x20000f58
 80069cc:	20000f28 	.word	0x20000f28
 80069d0:	20000f3c 	.word	0x20000f3c
 80069d4:	20000f50 	.word	0x20000f50
 80069d8:	20000f54 	.word	0x20000f54
 80069dc:	20001004 	.word	0x20001004
 80069e0:	20000f64 	.word	0x20000f64
 80069e4:	08007220 	.word	0x08007220

080069e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	3b04      	subs	r3, #4
 80069f8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	3b04      	subs	r3, #4
 8006a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f023 0201 	bic.w	r2, r3, #1
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	3b04      	subs	r3, #4
 8006a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a18:	4a08      	ldr	r2, [pc, #32]	; (8006a3c <pxPortInitialiseStack+0x54>)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	3b14      	subs	r3, #20
 8006a22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	3b20      	subs	r3, #32
 8006a2e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a30:	68fb      	ldr	r3, [r7, #12]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bc80      	pop	{r7}
 8006a3a:	4770      	bx	lr
 8006a3c:	08006a41 	.word	0x08006a41

08006a40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006a46:	2300      	movs	r3, #0
 8006a48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a4a:	4b10      	ldr	r3, [pc, #64]	; (8006a8c <prvTaskExitError+0x4c>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a52:	d009      	beq.n	8006a68 <prvTaskExitError+0x28>
 8006a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	60fb      	str	r3, [r7, #12]
 8006a66:	e7fe      	b.n	8006a66 <prvTaskExitError+0x26>
 8006a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6c:	f383 8811 	msr	BASEPRI, r3
 8006a70:	f3bf 8f6f 	isb	sy
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a7a:	bf00      	nop
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d0fc      	beq.n	8006a7c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a82:	bf00      	nop
 8006a84:	3714      	adds	r7, #20
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bc80      	pop	{r7}
 8006a8a:	4770      	bx	lr
 8006a8c:	2000000c 	.word	0x2000000c

08006a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a90:	4b07      	ldr	r3, [pc, #28]	; (8006ab0 <pxCurrentTCBConst2>)
 8006a92:	6819      	ldr	r1, [r3, #0]
 8006a94:	6808      	ldr	r0, [r1, #0]
 8006a96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006a9a:	f380 8809 	msr	PSP, r0
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f04f 0000 	mov.w	r0, #0
 8006aa6:	f380 8811 	msr	BASEPRI, r0
 8006aaa:	f04e 0e0d 	orr.w	lr, lr, #13
 8006aae:	4770      	bx	lr

08006ab0 <pxCurrentTCBConst2>:
 8006ab0:	20000a20 	.word	0x20000a20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop

08006ab8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006ab8:	4806      	ldr	r0, [pc, #24]	; (8006ad4 <prvPortStartFirstTask+0x1c>)
 8006aba:	6800      	ldr	r0, [r0, #0]
 8006abc:	6800      	ldr	r0, [r0, #0]
 8006abe:	f380 8808 	msr	MSP, r0
 8006ac2:	b662      	cpsie	i
 8006ac4:	b661      	cpsie	f
 8006ac6:	f3bf 8f4f 	dsb	sy
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	df00      	svc	0
 8006ad0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006ad2:	bf00      	nop
 8006ad4:	e000ed08 	.word	0xe000ed08

08006ad8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ade:	4b31      	ldr	r3, [pc, #196]	; (8006ba4 <xPortStartScheduler+0xcc>)
 8006ae0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	22ff      	movs	r2, #255	; 0xff
 8006aee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006af8:	78fb      	ldrb	r3, [r7, #3]
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b00:	b2da      	uxtb	r2, r3
 8006b02:	4b29      	ldr	r3, [pc, #164]	; (8006ba8 <xPortStartScheduler+0xd0>)
 8006b04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b06:	4b29      	ldr	r3, [pc, #164]	; (8006bac <xPortStartScheduler+0xd4>)
 8006b08:	2207      	movs	r2, #7
 8006b0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b0c:	e009      	b.n	8006b22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006b0e:	4b27      	ldr	r3, [pc, #156]	; (8006bac <xPortStartScheduler+0xd4>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	3b01      	subs	r3, #1
 8006b14:	4a25      	ldr	r2, [pc, #148]	; (8006bac <xPortStartScheduler+0xd4>)
 8006b16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b18:	78fb      	ldrb	r3, [r7, #3]
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	005b      	lsls	r3, r3, #1
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b22:	78fb      	ldrb	r3, [r7, #3]
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b2a:	2b80      	cmp	r3, #128	; 0x80
 8006b2c:	d0ef      	beq.n	8006b0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b2e:	4b1f      	ldr	r3, [pc, #124]	; (8006bac <xPortStartScheduler+0xd4>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f1c3 0307 	rsb	r3, r3, #7
 8006b36:	2b04      	cmp	r3, #4
 8006b38:	d009      	beq.n	8006b4e <xPortStartScheduler+0x76>
 8006b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	60bb      	str	r3, [r7, #8]
 8006b4c:	e7fe      	b.n	8006b4c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b4e:	4b17      	ldr	r3, [pc, #92]	; (8006bac <xPortStartScheduler+0xd4>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	021b      	lsls	r3, r3, #8
 8006b54:	4a15      	ldr	r2, [pc, #84]	; (8006bac <xPortStartScheduler+0xd4>)
 8006b56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b58:	4b14      	ldr	r3, [pc, #80]	; (8006bac <xPortStartScheduler+0xd4>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b60:	4a12      	ldr	r2, [pc, #72]	; (8006bac <xPortStartScheduler+0xd4>)
 8006b62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b6c:	4b10      	ldr	r3, [pc, #64]	; (8006bb0 <xPortStartScheduler+0xd8>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a0f      	ldr	r2, [pc, #60]	; (8006bb0 <xPortStartScheduler+0xd8>)
 8006b72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b78:	4b0d      	ldr	r3, [pc, #52]	; (8006bb0 <xPortStartScheduler+0xd8>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a0c      	ldr	r2, [pc, #48]	; (8006bb0 <xPortStartScheduler+0xd8>)
 8006b7e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b84:	f000 f8b0 	bl	8006ce8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b88:	4b0a      	ldr	r3, [pc, #40]	; (8006bb4 <xPortStartScheduler+0xdc>)
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b8e:	f7ff ff93 	bl	8006ab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b92:	f7fe fdc3 	bl	800571c <vTaskSwitchContext>
	prvTaskExitError();
 8006b96:	f7ff ff53 	bl	8006a40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	e000e400 	.word	0xe000e400
 8006ba8:	20001054 	.word	0x20001054
 8006bac:	20001058 	.word	0x20001058
 8006bb0:	e000ed20 	.word	0xe000ed20
 8006bb4:	2000000c 	.word	0x2000000c

08006bb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006bd0:	4b0e      	ldr	r3, [pc, #56]	; (8006c0c <vPortEnterCritical+0x54>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	4a0d      	ldr	r2, [pc, #52]	; (8006c0c <vPortEnterCritical+0x54>)
 8006bd8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006bda:	4b0c      	ldr	r3, [pc, #48]	; (8006c0c <vPortEnterCritical+0x54>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d10e      	bne.n	8006c00 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006be2:	4b0b      	ldr	r3, [pc, #44]	; (8006c10 <vPortEnterCritical+0x58>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d009      	beq.n	8006c00 <vPortEnterCritical+0x48>
 8006bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf0:	f383 8811 	msr	BASEPRI, r3
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	603b      	str	r3, [r7, #0]
 8006bfe:	e7fe      	b.n	8006bfe <vPortEnterCritical+0x46>
	}
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bc80      	pop	{r7}
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	2000000c 	.word	0x2000000c
 8006c10:	e000ed04 	.word	0xe000ed04

08006c14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c1a:	4b10      	ldr	r3, [pc, #64]	; (8006c5c <vPortExitCritical+0x48>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d109      	bne.n	8006c36 <vPortExitCritical+0x22>
 8006c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	607b      	str	r3, [r7, #4]
 8006c34:	e7fe      	b.n	8006c34 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006c36:	4b09      	ldr	r3, [pc, #36]	; (8006c5c <vPortExitCritical+0x48>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	4a07      	ldr	r2, [pc, #28]	; (8006c5c <vPortExitCritical+0x48>)
 8006c3e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c40:	4b06      	ldr	r3, [pc, #24]	; (8006c5c <vPortExitCritical+0x48>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d104      	bne.n	8006c52 <vPortExitCritical+0x3e>
 8006c48:	2300      	movs	r3, #0
 8006c4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c52:	bf00      	nop
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bc80      	pop	{r7}
 8006c5a:	4770      	bx	lr
 8006c5c:	2000000c 	.word	0x2000000c

08006c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c60:	f3ef 8009 	mrs	r0, PSP
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	4b0d      	ldr	r3, [pc, #52]	; (8006ca0 <pxCurrentTCBConst>)
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c70:	6010      	str	r0, [r2, #0]
 8006c72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006c76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006c7a:	f380 8811 	msr	BASEPRI, r0
 8006c7e:	f7fe fd4d 	bl	800571c <vTaskSwitchContext>
 8006c82:	f04f 0000 	mov.w	r0, #0
 8006c86:	f380 8811 	msr	BASEPRI, r0
 8006c8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006c8e:	6819      	ldr	r1, [r3, #0]
 8006c90:	6808      	ldr	r0, [r1, #0]
 8006c92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c96:	f380 8809 	msr	PSP, r0
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	4770      	bx	lr

08006ca0 <pxCurrentTCBConst>:
 8006ca0:	20000a20 	.word	0x20000a20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ca4:	bf00      	nop
 8006ca6:	bf00      	nop

08006ca8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
	__asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006cc0:	f7fe fc6e 	bl	80055a0 <xTaskIncrementTick>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d003      	beq.n	8006cd2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006cca:	4b06      	ldr	r3, [pc, #24]	; (8006ce4 <SysTick_Handler+0x3c>)
 8006ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006cdc:	bf00      	nop
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	e000ed04 	.word	0xe000ed04

08006ce8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006ce8:	b480      	push	{r7}
 8006cea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006cec:	4b0a      	ldr	r3, [pc, #40]	; (8006d18 <vPortSetupTimerInterrupt+0x30>)
 8006cee:	2200      	movs	r2, #0
 8006cf0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006cf2:	4b0a      	ldr	r3, [pc, #40]	; (8006d1c <vPortSetupTimerInterrupt+0x34>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006cf8:	4b09      	ldr	r3, [pc, #36]	; (8006d20 <vPortSetupTimerInterrupt+0x38>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a09      	ldr	r2, [pc, #36]	; (8006d24 <vPortSetupTimerInterrupt+0x3c>)
 8006cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006d02:	099b      	lsrs	r3, r3, #6
 8006d04:	4a08      	ldr	r2, [pc, #32]	; (8006d28 <vPortSetupTimerInterrupt+0x40>)
 8006d06:	3b01      	subs	r3, #1
 8006d08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d0a:	4b03      	ldr	r3, [pc, #12]	; (8006d18 <vPortSetupTimerInterrupt+0x30>)
 8006d0c:	2207      	movs	r2, #7
 8006d0e:	601a      	str	r2, [r3, #0]
}
 8006d10:	bf00      	nop
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bc80      	pop	{r7}
 8006d16:	4770      	bx	lr
 8006d18:	e000e010 	.word	0xe000e010
 8006d1c:	e000e018 	.word	0xe000e018
 8006d20:	20000000 	.word	0x20000000
 8006d24:	10624dd3 	.word	0x10624dd3
 8006d28:	e000e014 	.word	0xe000e014

08006d2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d32:	f3ef 8305 	mrs	r3, IPSR
 8006d36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2b0f      	cmp	r3, #15
 8006d3c:	d913      	bls.n	8006d66 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d3e:	4a15      	ldr	r2, [pc, #84]	; (8006d94 <vPortValidateInterruptPriority+0x68>)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4413      	add	r3, r2
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d48:	4b13      	ldr	r3, [pc, #76]	; (8006d98 <vPortValidateInterruptPriority+0x6c>)
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	7afa      	ldrb	r2, [r7, #11]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d209      	bcs.n	8006d66 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	607b      	str	r3, [r7, #4]
 8006d64:	e7fe      	b.n	8006d64 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d66:	4b0d      	ldr	r3, [pc, #52]	; (8006d9c <vPortValidateInterruptPriority+0x70>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006d6e:	4b0c      	ldr	r3, [pc, #48]	; (8006da0 <vPortValidateInterruptPriority+0x74>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d909      	bls.n	8006d8a <vPortValidateInterruptPriority+0x5e>
 8006d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	603b      	str	r3, [r7, #0]
 8006d88:	e7fe      	b.n	8006d88 <vPortValidateInterruptPriority+0x5c>
	}
 8006d8a:	bf00      	nop
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bc80      	pop	{r7}
 8006d92:	4770      	bx	lr
 8006d94:	e000e3f0 	.word	0xe000e3f0
 8006d98:	20001054 	.word	0x20001054
 8006d9c:	e000ed0c 	.word	0xe000ed0c
 8006da0:	20001058 	.word	0x20001058

08006da4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b08a      	sub	sp, #40	; 0x28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006dac:	2300      	movs	r3, #0
 8006dae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006db0:	f7fe fb3e 	bl	8005430 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006db4:	4b57      	ldr	r3, [pc, #348]	; (8006f14 <pvPortMalloc+0x170>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006dbc:	f000 f90c 	bl	8006fd8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006dc0:	4b55      	ldr	r3, [pc, #340]	; (8006f18 <pvPortMalloc+0x174>)
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f040 808c 	bne.w	8006ee6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d01c      	beq.n	8006e0e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006dd4:	2208      	movs	r2, #8
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4413      	add	r3, r2
 8006dda:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f003 0307 	and.w	r3, r3, #7
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d013      	beq.n	8006e0e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f023 0307 	bic.w	r3, r3, #7
 8006dec:	3308      	adds	r3, #8
 8006dee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f003 0307 	and.w	r3, r3, #7
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d009      	beq.n	8006e0e <pvPortMalloc+0x6a>
 8006dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	617b      	str	r3, [r7, #20]
 8006e0c:	e7fe      	b.n	8006e0c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d068      	beq.n	8006ee6 <pvPortMalloc+0x142>
 8006e14:	4b41      	ldr	r3, [pc, #260]	; (8006f1c <pvPortMalloc+0x178>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d863      	bhi.n	8006ee6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e1e:	4b40      	ldr	r3, [pc, #256]	; (8006f20 <pvPortMalloc+0x17c>)
 8006e20:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e22:	4b3f      	ldr	r3, [pc, #252]	; (8006f20 <pvPortMalloc+0x17c>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e28:	e004      	b.n	8006e34 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d903      	bls.n	8006e46 <pvPortMalloc+0xa2>
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1f1      	bne.n	8006e2a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e46:	4b33      	ldr	r3, [pc, #204]	; (8006f14 <pvPortMalloc+0x170>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d04a      	beq.n	8006ee6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2208      	movs	r2, #8
 8006e56:	4413      	add	r3, r2
 8006e58:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	6a3b      	ldr	r3, [r7, #32]
 8006e60:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	1ad2      	subs	r2, r2, r3
 8006e6a:	2308      	movs	r3, #8
 8006e6c:	005b      	lsls	r3, r3, #1
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d91e      	bls.n	8006eb0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4413      	add	r3, r2
 8006e78:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	f003 0307 	and.w	r3, r3, #7
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d009      	beq.n	8006e98 <pvPortMalloc+0xf4>
 8006e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e88:	f383 8811 	msr	BASEPRI, r3
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	613b      	str	r3, [r7, #16]
 8006e96:	e7fe      	b.n	8006e96 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9a:	685a      	ldr	r2, [r3, #4]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	1ad2      	subs	r2, r2, r3
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006eaa:	69b8      	ldr	r0, [r7, #24]
 8006eac:	f000 f8f6 	bl	800709c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006eb0:	4b1a      	ldr	r3, [pc, #104]	; (8006f1c <pvPortMalloc+0x178>)
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	4a18      	ldr	r2, [pc, #96]	; (8006f1c <pvPortMalloc+0x178>)
 8006ebc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ebe:	4b17      	ldr	r3, [pc, #92]	; (8006f1c <pvPortMalloc+0x178>)
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	4b18      	ldr	r3, [pc, #96]	; (8006f24 <pvPortMalloc+0x180>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d203      	bcs.n	8006ed2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006eca:	4b14      	ldr	r3, [pc, #80]	; (8006f1c <pvPortMalloc+0x178>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a15      	ldr	r2, [pc, #84]	; (8006f24 <pvPortMalloc+0x180>)
 8006ed0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	4b10      	ldr	r3, [pc, #64]	; (8006f18 <pvPortMalloc+0x174>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	431a      	orrs	r2, r3
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ee6:	f7fe fab1 	bl	800544c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	f003 0307 	and.w	r3, r3, #7
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d009      	beq.n	8006f08 <pvPortMalloc+0x164>
 8006ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	60fb      	str	r3, [r7, #12]
 8006f06:	e7fe      	b.n	8006f06 <pvPortMalloc+0x162>
	return pvReturn;
 8006f08:	69fb      	ldr	r3, [r7, #28]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3728      	adds	r7, #40	; 0x28
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	2000281c 	.word	0x2000281c
 8006f18:	20002828 	.word	0x20002828
 8006f1c:	20002820 	.word	0x20002820
 8006f20:	20002814 	.word	0x20002814
 8006f24:	20002824 	.word	0x20002824

08006f28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d046      	beq.n	8006fc8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f3a:	2308      	movs	r3, #8
 8006f3c:	425b      	negs	r3, r3
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	4413      	add	r3, r2
 8006f42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	4b20      	ldr	r3, [pc, #128]	; (8006fd0 <vPortFree+0xa8>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4013      	ands	r3, r2
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d109      	bne.n	8006f6a <vPortFree+0x42>
 8006f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	e7fe      	b.n	8006f68 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d009      	beq.n	8006f86 <vPortFree+0x5e>
 8006f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	60bb      	str	r3, [r7, #8]
 8006f84:	e7fe      	b.n	8006f84 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	4b11      	ldr	r3, [pc, #68]	; (8006fd0 <vPortFree+0xa8>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4013      	ands	r3, r2
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d019      	beq.n	8006fc8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d115      	bne.n	8006fc8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	685a      	ldr	r2, [r3, #4]
 8006fa0:	4b0b      	ldr	r3, [pc, #44]	; (8006fd0 <vPortFree+0xa8>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	43db      	mvns	r3, r3
 8006fa6:	401a      	ands	r2, r3
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006fac:	f7fe fa40 	bl	8005430 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	4b07      	ldr	r3, [pc, #28]	; (8006fd4 <vPortFree+0xac>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4413      	add	r3, r2
 8006fba:	4a06      	ldr	r2, [pc, #24]	; (8006fd4 <vPortFree+0xac>)
 8006fbc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006fbe:	6938      	ldr	r0, [r7, #16]
 8006fc0:	f000 f86c 	bl	800709c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006fc4:	f7fe fa42 	bl	800544c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006fc8:	bf00      	nop
 8006fca:	3718      	adds	r7, #24
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	20002828 	.word	0x20002828
 8006fd4:	20002820 	.word	0x20002820

08006fd8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006fde:	f241 73b8 	movw	r3, #6072	; 0x17b8
 8006fe2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006fe4:	4b27      	ldr	r3, [pc, #156]	; (8007084 <prvHeapInit+0xac>)
 8006fe6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f003 0307 	and.w	r3, r3, #7
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00c      	beq.n	800700c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3307      	adds	r3, #7
 8006ff6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f023 0307 	bic.w	r3, r3, #7
 8006ffe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	4a1f      	ldr	r2, [pc, #124]	; (8007084 <prvHeapInit+0xac>)
 8007008:	4413      	add	r3, r2
 800700a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007010:	4a1d      	ldr	r2, [pc, #116]	; (8007088 <prvHeapInit+0xb0>)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007016:	4b1c      	ldr	r3, [pc, #112]	; (8007088 <prvHeapInit+0xb0>)
 8007018:	2200      	movs	r2, #0
 800701a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	4413      	add	r3, r2
 8007022:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007024:	2208      	movs	r2, #8
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	1a9b      	subs	r3, r3, r2
 800702a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f023 0307 	bic.w	r3, r3, #7
 8007032:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	4a15      	ldr	r2, [pc, #84]	; (800708c <prvHeapInit+0xb4>)
 8007038:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800703a:	4b14      	ldr	r3, [pc, #80]	; (800708c <prvHeapInit+0xb4>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2200      	movs	r2, #0
 8007040:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007042:	4b12      	ldr	r3, [pc, #72]	; (800708c <prvHeapInit+0xb4>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2200      	movs	r2, #0
 8007048:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	1ad2      	subs	r2, r2, r3
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007058:	4b0c      	ldr	r3, [pc, #48]	; (800708c <prvHeapInit+0xb4>)
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	4a0a      	ldr	r2, [pc, #40]	; (8007090 <prvHeapInit+0xb8>)
 8007066:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	4a09      	ldr	r2, [pc, #36]	; (8007094 <prvHeapInit+0xbc>)
 800706e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007070:	4b09      	ldr	r3, [pc, #36]	; (8007098 <prvHeapInit+0xc0>)
 8007072:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007076:	601a      	str	r2, [r3, #0]
}
 8007078:	bf00      	nop
 800707a:	3714      	adds	r7, #20
 800707c:	46bd      	mov	sp, r7
 800707e:	bc80      	pop	{r7}
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	2000105c 	.word	0x2000105c
 8007088:	20002814 	.word	0x20002814
 800708c:	2000281c 	.word	0x2000281c
 8007090:	20002824 	.word	0x20002824
 8007094:	20002820 	.word	0x20002820
 8007098:	20002828 	.word	0x20002828

0800709c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80070a4:	4b27      	ldr	r3, [pc, #156]	; (8007144 <prvInsertBlockIntoFreeList+0xa8>)
 80070a6:	60fb      	str	r3, [r7, #12]
 80070a8:	e002      	b.n	80070b0 <prvInsertBlockIntoFreeList+0x14>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	60fb      	str	r3, [r7, #12]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d8f7      	bhi.n	80070aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	4413      	add	r3, r2
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d108      	bne.n	80070de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	441a      	add	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	441a      	add	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d118      	bne.n	8007124 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	4b14      	ldr	r3, [pc, #80]	; (8007148 <prvInsertBlockIntoFreeList+0xac>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d00d      	beq.n	800711a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685a      	ldr	r2, [r3, #4]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	441a      	add	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	601a      	str	r2, [r3, #0]
 8007118:	e008      	b.n	800712c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800711a:	4b0b      	ldr	r3, [pc, #44]	; (8007148 <prvInsertBlockIntoFreeList+0xac>)
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	601a      	str	r2, [r3, #0]
 8007122:	e003      	b.n	800712c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	429a      	cmp	r2, r3
 8007132:	d002      	beq.n	800713a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800713a:	bf00      	nop
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	bc80      	pop	{r7}
 8007142:	4770      	bx	lr
 8007144:	20002814 	.word	0x20002814
 8007148:	2000281c 	.word	0x2000281c

0800714c <__libc_init_array>:
 800714c:	b570      	push	{r4, r5, r6, lr}
 800714e:	2500      	movs	r5, #0
 8007150:	4e0c      	ldr	r6, [pc, #48]	; (8007184 <__libc_init_array+0x38>)
 8007152:	4c0d      	ldr	r4, [pc, #52]	; (8007188 <__libc_init_array+0x3c>)
 8007154:	1ba4      	subs	r4, r4, r6
 8007156:	10a4      	asrs	r4, r4, #2
 8007158:	42a5      	cmp	r5, r4
 800715a:	d109      	bne.n	8007170 <__libc_init_array+0x24>
 800715c:	f000 f82e 	bl	80071bc <_init>
 8007160:	2500      	movs	r5, #0
 8007162:	4e0a      	ldr	r6, [pc, #40]	; (800718c <__libc_init_array+0x40>)
 8007164:	4c0a      	ldr	r4, [pc, #40]	; (8007190 <__libc_init_array+0x44>)
 8007166:	1ba4      	subs	r4, r4, r6
 8007168:	10a4      	asrs	r4, r4, #2
 800716a:	42a5      	cmp	r5, r4
 800716c:	d105      	bne.n	800717a <__libc_init_array+0x2e>
 800716e:	bd70      	pop	{r4, r5, r6, pc}
 8007170:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007174:	4798      	blx	r3
 8007176:	3501      	adds	r5, #1
 8007178:	e7ee      	b.n	8007158 <__libc_init_array+0xc>
 800717a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800717e:	4798      	blx	r3
 8007180:	3501      	adds	r5, #1
 8007182:	e7f2      	b.n	800716a <__libc_init_array+0x1e>
 8007184:	08007274 	.word	0x08007274
 8007188:	08007274 	.word	0x08007274
 800718c:	08007274 	.word	0x08007274
 8007190:	08007278 	.word	0x08007278

08007194 <memcpy>:
 8007194:	b510      	push	{r4, lr}
 8007196:	1e43      	subs	r3, r0, #1
 8007198:	440a      	add	r2, r1
 800719a:	4291      	cmp	r1, r2
 800719c:	d100      	bne.n	80071a0 <memcpy+0xc>
 800719e:	bd10      	pop	{r4, pc}
 80071a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071a8:	e7f7      	b.n	800719a <memcpy+0x6>

080071aa <memset>:
 80071aa:	4603      	mov	r3, r0
 80071ac:	4402      	add	r2, r0
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d100      	bne.n	80071b4 <memset+0xa>
 80071b2:	4770      	bx	lr
 80071b4:	f803 1b01 	strb.w	r1, [r3], #1
 80071b8:	e7f9      	b.n	80071ae <memset+0x4>
	...

080071bc <_init>:
 80071bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071be:	bf00      	nop
 80071c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071c2:	bc08      	pop	{r3}
 80071c4:	469e      	mov	lr, r3
 80071c6:	4770      	bx	lr

080071c8 <_fini>:
 80071c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ca:	bf00      	nop
 80071cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ce:	bc08      	pop	{r3}
 80071d0:	469e      	mov	lr, r3
 80071d2:	4770      	bx	lr
